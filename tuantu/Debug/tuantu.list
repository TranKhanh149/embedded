
tuantu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e5c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003f68  08003f68  00013f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fd0  08003fd0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003fd0  08003fd0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fd0  08003fd0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fd0  08003fd0  00013fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fd4  08003fd4  00013fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  2000005c  08004034  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08004034  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ce70  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002544  00000000  00000000  0002cf38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  0002f480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a5f  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c37  00000000  00000000  00030c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011378  00000000  00000000  00033876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ac9d  00000000  00000000  00044bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c74  00000000  00000000  000cf88c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000d3500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f50 	.word	0x08003f50

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003f50 	.word	0x08003f50

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2uiz>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	d20e      	bcs.n	80004f2 <__aeabi_f2uiz+0x22>
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004d8:	d30b      	bcc.n	80004f2 <__aeabi_f2uiz+0x22>
 80004da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d409      	bmi.n	80004f8 <__aeabi_f2uiz+0x28>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004ec:	fa23 f002 	lsr.w	r0, r3, r2
 80004f0:	4770      	bx	lr
 80004f2:	f04f 0000 	mov.w	r0, #0
 80004f6:	4770      	bx	lr
 80004f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80004fc:	d101      	bne.n	8000502 <__aeabi_f2uiz+0x32>
 80004fe:	0242      	lsls	r2, r0, #9
 8000500:	d102      	bne.n	8000508 <__aeabi_f2uiz+0x38>
 8000502:	f04f 30ff 	mov.w	r0, #4294967295
 8000506:	4770      	bx	lr
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	OneWire_Reset(&OneWire); // Reset the bus
 8000514:	4806      	ldr	r0, [pc, #24]	; (8000530 <DS18B20_StartAll+0x20>)
 8000516:	f000 fb5c 	bl	8000bd2 <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 800051a:	21cc      	movs	r1, #204	; 0xcc
 800051c:	4804      	ldr	r0, [pc, #16]	; (8000530 <DS18B20_StartAll+0x20>)
 800051e:	f000 fbd5 	bl	8000ccc <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 8000522:	2144      	movs	r1, #68	; 0x44
 8000524:	4802      	ldr	r0, [pc, #8]	; (8000530 <DS18B20_StartAll+0x20>)
 8000526:	f000 fbd1 	bl	8000ccc <OneWire_WriteByte>
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	200000b8 	.word	0x200000b8

08000534 <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b087      	sub	sp, #28
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	6039      	str	r1, [r7, #0]
 800053e:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount) // If read sensor is not availible
 8000540:	4b4f      	ldr	r3, [pc, #316]	; (8000680 <DS18B20_Read+0x14c>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	79fa      	ldrb	r2, [r7, #7]
 8000546:	429a      	cmp	r2, r3
 8000548:	d301      	bcc.n	800054e <DS18B20_Read+0x1a>
		return 0;
 800054a:	2300      	movs	r3, #0
 800054c:	e094      	b.n	8000678 <DS18B20_Read+0x144>

	uint16_t temperature;
	uint8_t resolution;
	float result;
	uint8_t i = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	74fb      	strb	r3, [r7, #19]
	uint8_t crc;

#endif

	
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	011b      	lsls	r3, r3, #4
 8000556:	4a4b      	ldr	r2, [pc, #300]	; (8000684 <DS18B20_Read+0x150>)
 8000558:	4413      	add	r3, r2
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f93e 	bl	80007dc <DS18B20_Is>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d101      	bne.n	800056a <DS18B20_Read+0x36>
		return 0;
 8000566:	2300      	movs	r3, #0
 8000568:	e086      	b.n	8000678 <DS18B20_Read+0x144>

	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 800056a:	4847      	ldr	r0, [pc, #284]	; (8000688 <DS18B20_Read+0x154>)
 800056c:	f000 fb84 	bl	8000c78 <OneWire_ReadBit>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d101      	bne.n	800057a <DS18B20_Read+0x46>
		return 0; // Busy bus - conversion is not finished
 8000576:	2300      	movs	r3, #0
 8000578:	e07e      	b.n	8000678 <DS18B20_Read+0x144>

	OneWire_Reset(&OneWire); // Reset the bus
 800057a:	4843      	ldr	r0, [pc, #268]	; (8000688 <DS18B20_Read+0x154>)
 800057c:	f000 fb29 	bl	8000bd2 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	011b      	lsls	r3, r3, #4
 8000584:	4a3f      	ldr	r2, [pc, #252]	; (8000684 <DS18B20_Read+0x150>)
 8000586:	4413      	add	r3, r2
 8000588:	4619      	mov	r1, r3
 800058a:	483f      	ldr	r0, [pc, #252]	; (8000688 <DS18B20_Read+0x154>)
 800058c:	f000 fcd2 	bl	8000f34 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8000590:	21be      	movs	r1, #190	; 0xbe
 8000592:	483d      	ldr	r0, [pc, #244]	; (8000688 <DS18B20_Read+0x154>)
 8000594:	f000 fb9a 	bl	8000ccc <OneWire_WriteByte>
	
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8000598:	2300      	movs	r3, #0
 800059a:	74fb      	strb	r3, [r7, #19]
 800059c:	e00d      	b.n	80005ba <DS18B20_Read+0x86>
		data[i] = OneWire_ReadByte(&OneWire);
 800059e:	7cfc      	ldrb	r4, [r7, #19]
 80005a0:	4839      	ldr	r0, [pc, #228]	; (8000688 <DS18B20_Read+0x154>)
 80005a2:	f000 fbb1 	bl	8000d08 <OneWire_ReadByte>
 80005a6:	4603      	mov	r3, r0
 80005a8:	461a      	mov	r2, r3
 80005aa:	f104 0318 	add.w	r3, r4, #24
 80005ae:	443b      	add	r3, r7
 80005b0:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 80005b4:	7cfb      	ldrb	r3, [r7, #19]
 80005b6:	3301      	adds	r3, #1
 80005b8:	74fb      	strb	r3, [r7, #19]
 80005ba:	7cfb      	ldrb	r3, [r7, #19]
 80005bc:	2b04      	cmp	r3, #4
 80005be:	d9ee      	bls.n	800059e <DS18B20_Read+0x6a>
	crc = OneWire_CRC8(data, 8); // CRC calculation

	if (crc != data[8])
		return 0; // CRC invalid
#endif
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 80005c0:	7a3b      	ldrb	r3, [r7, #8]
 80005c2:	b21a      	sxth	r2, r3
 80005c4:	7a7b      	ldrb	r3, [r7, #9]
 80005c6:	021b      	lsls	r3, r3, #8
 80005c8:	b21b      	sxth	r3, r3
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b21b      	sxth	r3, r3
 80005ce:	823b      	strh	r3, [r7, #16]

	OneWire_Reset(&OneWire); // Reset the bus
 80005d0:	482d      	ldr	r0, [pc, #180]	; (8000688 <DS18B20_Read+0x154>)
 80005d2:	f000 fafe 	bl	8000bd2 <OneWire_Reset>
	
	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 80005d6:	7b3b      	ldrb	r3, [r7, #12]
 80005d8:	115b      	asrs	r3, r3, #5
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	f003 0303 	and.w	r3, r3, #3
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	3309      	adds	r3, #9
 80005e4:	73fb      	strb	r3, [r7, #15]

	switch (resolution) // Chceck the correct value dur to resolution
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	3b09      	subs	r3, #9
 80005ea:	2b03      	cmp	r3, #3
 80005ec:	d83e      	bhi.n	800066c <DS18B20_Read+0x138>
 80005ee:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <DS18B20_Read+0xc0>)
 80005f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f4:	08000605 	.word	0x08000605
 80005f8:	0800061f 	.word	0x0800061f
 80005fc:	08000639 	.word	0x08000639
 8000600:	08000653 	.word	0x08000653
	{
		case DS18B20_Resolution_9bits:
			result = temperature*(float)DS18B20_STEP_9BIT;
 8000604:	8a3b      	ldrh	r3, [r7, #16]
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ff0e 	bl	8000428 <__aeabi_i2f>
 800060c:	4603      	mov	r3, r0
 800060e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fd9a 	bl	800014c <__aeabi_fmul>
 8000618:	4603      	mov	r3, r0
 800061a:	617b      	str	r3, [r7, #20]
		break;
 800061c:	e028      	b.n	8000670 <DS18B20_Read+0x13c>
		case DS18B20_Resolution_10bits:
			result = temperature*(float)DS18B20_STEP_10BIT;
 800061e:	8a3b      	ldrh	r3, [r7, #16]
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ff01 	bl	8000428 <__aeabi_i2f>
 8000626:	4603      	mov	r3, r0
 8000628:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff fd8d 	bl	800014c <__aeabi_fmul>
 8000632:	4603      	mov	r3, r0
 8000634:	617b      	str	r3, [r7, #20]
		 break;
 8000636:	e01b      	b.n	8000670 <DS18B20_Read+0x13c>
		case DS18B20_Resolution_11bits:
			result = temperature*(float)DS18B20_STEP_11BIT;
 8000638:	8a3b      	ldrh	r3, [r7, #16]
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff fef4 	bl	8000428 <__aeabi_i2f>
 8000640:	4603      	mov	r3, r0
 8000642:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fd80 	bl	800014c <__aeabi_fmul>
 800064c:	4603      	mov	r3, r0
 800064e:	617b      	str	r3, [r7, #20]
		break;
 8000650:	e00e      	b.n	8000670 <DS18B20_Read+0x13c>
		case DS18B20_Resolution_12bits:
			result = temperature*(float)DS18B20_STEP_12BIT;
 8000652:	8a3b      	ldrh	r3, [r7, #16]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff fee7 	bl	8000428 <__aeabi_i2f>
 800065a:	4603      	mov	r3, r0
 800065c:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff fd73 	bl	800014c <__aeabi_fmul>
 8000666:	4603      	mov	r3, r0
 8000668:	617b      	str	r3, [r7, #20]
		 break;
 800066a:	e001      	b.n	8000670 <DS18B20_Read+0x13c>
		default: 
			result = 0xFF;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <DS18B20_Read+0x158>)
 800066e:	617b      	str	r3, [r7, #20]
	}
	
	*destination = result;
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	697a      	ldr	r2, [r7, #20]
 8000674:	601a      	str	r2, [r3, #0]
	
	return 1; //temperature valid
 8000676:	2301      	movs	r3, #1
}
 8000678:	4618      	mov	r0, r3
 800067a:	371c      	adds	r7, #28
 800067c:	46bd      	mov	sp, r7
 800067e:	bd90      	pop	{r4, r7, pc}
 8000680:	200000cc 	.word	0x200000cc
 8000684:	20000078 	.word	0x20000078
 8000688:	200000b8 	.word	0x200000b8
 800068c:	437f0000 	.word	0x437f0000

08000690 <DS18B20_SetResolution>:
	
	return conf;
}

uint8_t DS18B20_SetResolution(uint8_t number, DS18B20_Resolution_t resolution)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	460a      	mov	r2, r1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	4613      	mov	r3, r2
 800069e:	71bb      	strb	r3, [r7, #6]
	if( number >= TempSensorCount)
 80006a0:	4b4b      	ldr	r3, [pc, #300]	; (80007d0 <DS18B20_SetResolution+0x140>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	79fa      	ldrb	r2, [r7, #7]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d301      	bcc.n	80006ae <DS18B20_SetResolution+0x1e>
		return 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	e08c      	b.n	80007c8 <DS18B20_SetResolution+0x138>

	uint8_t th, tl, conf;
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	011b      	lsls	r3, r3, #4
 80006b2:	4a48      	ldr	r2, [pc, #288]	; (80007d4 <DS18B20_SetResolution+0x144>)
 80006b4:	4413      	add	r3, r2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 f890 	bl	80007dc <DS18B20_Is>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d101      	bne.n	80006c6 <DS18B20_SetResolution+0x36>
		return 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	e080      	b.n	80007c8 <DS18B20_SetResolution+0x138>
	
	OneWire_Reset(&OneWire); // Reset the bus
 80006c6:	4844      	ldr	r0, [pc, #272]	; (80007d8 <DS18B20_SetResolution+0x148>)
 80006c8:	f000 fa83 	bl	8000bd2 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	011b      	lsls	r3, r3, #4
 80006d0:	4a40      	ldr	r2, [pc, #256]	; (80007d4 <DS18B20_SetResolution+0x144>)
 80006d2:	4413      	add	r3, r2
 80006d4:	4619      	mov	r1, r3
 80006d6:	4840      	ldr	r0, [pc, #256]	; (80007d8 <DS18B20_SetResolution+0x148>)
 80006d8:	f000 fc2c 	bl	8000f34 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 80006dc:	21be      	movs	r1, #190	; 0xbe
 80006de:	483e      	ldr	r0, [pc, #248]	; (80007d8 <DS18B20_SetResolution+0x148>)
 80006e0:	f000 faf4 	bl	8000ccc <OneWire_WriteByte>
	
	OneWire_ReadByte(&OneWire);
 80006e4:	483c      	ldr	r0, [pc, #240]	; (80007d8 <DS18B20_SetResolution+0x148>)
 80006e6:	f000 fb0f 	bl	8000d08 <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 80006ea:	483b      	ldr	r0, [pc, #236]	; (80007d8 <DS18B20_SetResolution+0x148>)
 80006ec:	f000 fb0c 	bl	8000d08 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 80006f0:	4839      	ldr	r0, [pc, #228]	; (80007d8 <DS18B20_SetResolution+0x148>)
 80006f2:	f000 fb09 	bl	8000d08 <OneWire_ReadByte>
 80006f6:	4603      	mov	r3, r0
 80006f8:	73bb      	strb	r3, [r7, #14]
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 80006fa:	4837      	ldr	r0, [pc, #220]	; (80007d8 <DS18B20_SetResolution+0x148>)
 80006fc:	f000 fb04 	bl	8000d08 <OneWire_ReadByte>
 8000700:	4603      	mov	r3, r0
 8000702:	737b      	strb	r3, [r7, #13]
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 8000704:	4834      	ldr	r0, [pc, #208]	; (80007d8 <DS18B20_SetResolution+0x148>)
 8000706:	f000 faff 	bl	8000d08 <OneWire_ReadByte>
 800070a:	4603      	mov	r3, r0
 800070c:	73fb      	strb	r3, [r7, #15]
	
	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 800070e:	79bb      	ldrb	r3, [r7, #6]
 8000710:	2b09      	cmp	r3, #9
 8000712:	d108      	bne.n	8000726 <DS18B20_SetResolution+0x96>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800071a:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	f023 0320 	bic.w	r3, r3, #32
 8000722:	73fb      	strb	r3, [r7, #15]
 8000724:	e022      	b.n	800076c <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 8000726:	79bb      	ldrb	r3, [r7, #6]
 8000728:	2b0a      	cmp	r3, #10
 800072a:	d108      	bne.n	800073e <DS18B20_SetResolution+0xae>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000732:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	f043 0320 	orr.w	r3, r3, #32
 800073a:	73fb      	strb	r3, [r7, #15]
 800073c:	e016      	b.n	800076c <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 800073e:	79bb      	ldrb	r3, [r7, #6]
 8000740:	2b0b      	cmp	r3, #11
 8000742:	d108      	bne.n	8000756 <DS18B20_SetResolution+0xc6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800074a:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	f023 0320 	bic.w	r3, r3, #32
 8000752:	73fb      	strb	r3, [r7, #15]
 8000754:	e00a      	b.n	800076c <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8000756:	79bb      	ldrb	r3, [r7, #6]
 8000758:	2b0c      	cmp	r3, #12
 800075a:	d107      	bne.n	800076c <DS18B20_SetResolution+0xdc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000762:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	f043 0320 	orr.w	r3, r3, #32
 800076a:	73fb      	strb	r3, [r7, #15]
	}
	
	OneWire_Reset(&OneWire); // Reset the bus
 800076c:	481a      	ldr	r0, [pc, #104]	; (80007d8 <DS18B20_SetResolution+0x148>)
 800076e:	f000 fa30 	bl	8000bd2 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <DS18B20_SetResolution+0x144>)
 8000778:	4413      	add	r3, r2
 800077a:	4619      	mov	r1, r3
 800077c:	4816      	ldr	r0, [pc, #88]	; (80007d8 <DS18B20_SetResolution+0x148>)
 800077e:	f000 fbd9 	bl	8000f34 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 8000782:	214e      	movs	r1, #78	; 0x4e
 8000784:	4814      	ldr	r0, [pc, #80]	; (80007d8 <DS18B20_SetResolution+0x148>)
 8000786:	f000 faa1 	bl	8000ccc <OneWire_WriteByte>
	
	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 800078a:	7bbb      	ldrb	r3, [r7, #14]
 800078c:	4619      	mov	r1, r3
 800078e:	4812      	ldr	r0, [pc, #72]	; (80007d8 <DS18B20_SetResolution+0x148>)
 8000790:	f000 fa9c 	bl	8000ccc <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	4619      	mov	r1, r3
 8000798:	480f      	ldr	r0, [pc, #60]	; (80007d8 <DS18B20_SetResolution+0x148>)
 800079a:	f000 fa97 	bl	8000ccc <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	4619      	mov	r1, r3
 80007a2:	480d      	ldr	r0, [pc, #52]	; (80007d8 <DS18B20_SetResolution+0x148>)
 80007a4:	f000 fa92 	bl	8000ccc <OneWire_WriteByte>
	
	OneWire_Reset(&OneWire); // Reset the bus
 80007a8:	480b      	ldr	r0, [pc, #44]	; (80007d8 <DS18B20_SetResolution+0x148>)
 80007aa:	f000 fa12 	bl	8000bd2 <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	011b      	lsls	r3, r3, #4
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <DS18B20_SetResolution+0x144>)
 80007b4:	4413      	add	r3, r2
 80007b6:	4619      	mov	r1, r3
 80007b8:	4807      	ldr	r0, [pc, #28]	; (80007d8 <DS18B20_SetResolution+0x148>)
 80007ba:	f000 fbbb 	bl	8000f34 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 80007be:	2148      	movs	r1, #72	; 0x48
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <DS18B20_SetResolution+0x148>)
 80007c2:	f000 fa83 	bl	8000ccc <OneWire_WriteByte>
	
	return 1;
 80007c6:	2301      	movs	r3, #1
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000cc 	.word	0x200000cc
 80007d4:	20000078 	.word	0x20000078
 80007d8:	200000b8 	.word	0x200000b8

080007dc <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t* ROM)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b28      	cmp	r3, #40	; 0x28
 80007ea:	d101      	bne.n	80007f0 <DS18B20_Is+0x14>
		return 1;
 80007ec:	2301      	movs	r3, #1
 80007ee:	e000      	b.n	80007f2 <DS18B20_Is+0x16>
	return 0;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <DS18B20_AllDone>:

uint8_t DS18B20_AllDone(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <DS18B20_AllDone+0x10>)
 8000802:	f000 fa39 	bl	8000c78 <OneWire_ReadBit>
 8000806:	4603      	mov	r3, r0
}
 8000808:	4618      	mov	r0, r3
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000b8 	.word	0x200000b8

08000810 <DS18B20_ReadAll>:

void DS18B20_ReadAll(void)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
	uint8_t i;

	if (DS18B20_AllDone())
 8000816:	f7ff fff1 	bl	80007fc <DS18B20_AllDone>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d02e      	beq.n	800087e <DS18B20_ReadAll+0x6e>
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8000820:	2300      	movs	r3, #0
 8000822:	71fb      	strb	r3, [r7, #7]
 8000824:	e026      	b.n	8000874 <DS18B20_ReadAll+0x64>
		{
			ds18b20[i].ValidDataFlag = 0;
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	4a17      	ldr	r2, [pc, #92]	; (8000888 <DS18B20_ReadAll+0x78>)
 800082a:	011b      	lsls	r3, r3, #4
 800082c:	4413      	add	r3, r2
 800082e:	330c      	adds	r3, #12
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	011b      	lsls	r3, r3, #4
 8000838:	4a13      	ldr	r2, [pc, #76]	; (8000888 <DS18B20_ReadAll+0x78>)
 800083a:	4413      	add	r3, r2
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ffcd 	bl	80007dc <DS18B20_Is>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d012      	beq.n	800086e <DS18B20_ReadAll+0x5e>
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	011b      	lsls	r3, r3, #4
 800084c:	3308      	adds	r3, #8
 800084e:	4a0e      	ldr	r2, [pc, #56]	; (8000888 <DS18B20_ReadAll+0x78>)
 8000850:	441a      	add	r2, r3
 8000852:	79fc      	ldrb	r4, [r7, #7]
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fe6b 	bl	8000534 <DS18B20_Read>
 800085e:	4603      	mov	r3, r0
 8000860:	4619      	mov	r1, r3
 8000862:	4a09      	ldr	r2, [pc, #36]	; (8000888 <DS18B20_ReadAll+0x78>)
 8000864:	0123      	lsls	r3, r4, #4
 8000866:	4413      	add	r3, r2
 8000868:	330c      	adds	r3, #12
 800086a:	460a      	mov	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	3301      	adds	r3, #1
 8000872:	71fb      	strb	r3, [r7, #7]
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <DS18B20_ReadAll+0x7c>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	79fa      	ldrb	r2, [r7, #7]
 800087a:	429a      	cmp	r2, r3
 800087c:	d3d3      	bcc.n	8000826 <DS18B20_ReadAll+0x16>
			}
		}
	}
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	bd90      	pop	{r4, r7, pc}
 8000886:	bf00      	nop
 8000888:	20000078 	.word	0x20000078
 800088c:	200000cc 	.word	0x200000cc

08000890 <DS18B20_Init>:
	return 1;

}

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
	uint8_t next = 0, i = 0, j;
 800089a:	2300      	movs	r3, #0
 800089c:	73fb      	strb	r3, [r7, #15]
 800089e:	2300      	movs	r3, #0
 80008a0:	73bb      	strb	r3, [r7, #14]
	OneWire_Init(&OneWire, GPIOA, GPIO_PIN_1); // Init OneWire bus
 80008a2:	2202      	movs	r2, #2
 80008a4:	491f      	ldr	r1, [pc, #124]	; (8000924 <DS18B20_Init+0x94>)
 80008a6:	4820      	ldr	r0, [pc, #128]	; (8000928 <DS18B20_Init+0x98>)
 80008a8:	f000 fb80 	bl	8000fac <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 80008ac:	481e      	ldr	r0, [pc, #120]	; (8000928 <DS18B20_Init+0x98>)
 80008ae:	f000 fb24 	bl	8000efa <OneWire_First>
 80008b2:	4603      	mov	r3, r0
 80008b4:	73fb      	strb	r3, [r7, #15]
	while(next)
 80008b6:	e018      	b.n	80008ea <DS18B20_Init+0x5a>
	{
		TempSensorCount++;
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <DS18B20_Init+0x9c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	3301      	adds	r3, #1
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b1a      	ldr	r3, [pc, #104]	; (800092c <DS18B20_Init+0x9c>)
 80008c2:	701a      	strb	r2, [r3, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 80008c4:	7bbb      	ldrb	r3, [r7, #14]
 80008c6:	1c5a      	adds	r2, r3, #1
 80008c8:	73ba      	strb	r2, [r7, #14]
 80008ca:	011b      	lsls	r3, r3, #4
 80008cc:	4a18      	ldr	r2, [pc, #96]	; (8000930 <DS18B20_Init+0xa0>)
 80008ce:	4413      	add	r3, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	4815      	ldr	r0, [pc, #84]	; (8000928 <DS18B20_Init+0x98>)
 80008d4:	f000 fb4d 	bl	8000f72 <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 80008d8:	4813      	ldr	r0, [pc, #76]	; (8000928 <DS18B20_Init+0x98>)
 80008da:	f000 fb1e 	bl	8000f1a <OneWire_Next>
 80008de:	4603      	mov	r3, r0
 80008e0:	73fb      	strb	r3, [r7, #15]
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <DS18B20_Init+0x9c>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b03      	cmp	r3, #3
 80008e8:	d803      	bhi.n	80008f2 <DS18B20_Init+0x62>
	while(next)
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d1e3      	bne.n	80008b8 <DS18B20_Init+0x28>
 80008f0:	e000      	b.n	80008f4 <DS18B20_Init+0x64>
			break;
 80008f2:	bf00      	nop
	}

	for(j = 0; j < i; j++)
 80008f4:	2300      	movs	r3, #0
 80008f6:	737b      	strb	r3, [r7, #13]
 80008f8:	e00a      	b.n	8000910 <DS18B20_Init+0x80>
	{
		DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 80008fa:	79fa      	ldrb	r2, [r7, #7]
 80008fc:	7b7b      	ldrb	r3, [r7, #13]
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fec5 	bl	8000690 <DS18B20_SetResolution>

		DS18B20_StartAll(); // Start conversion on all sensors
 8000906:	f7ff fe03 	bl	8000510 <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 800090a:	7b7b      	ldrb	r3, [r7, #13]
 800090c:	3301      	adds	r3, #1
 800090e:	737b      	strb	r3, [r7, #13]
 8000910:	7b7a      	ldrb	r2, [r7, #13]
 8000912:	7bbb      	ldrb	r3, [r7, #14]
 8000914:	429a      	cmp	r2, r3
 8000916:	d3f0      	bcc.n	80008fa <DS18B20_Init+0x6a>
	}
}
 8000918:	bf00      	nop
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40010800 	.word	0x40010800
 8000928:	200000b8 	.word	0x200000b8
 800092c:	200000cc 	.word	0x200000cc
 8000930:	20000078 	.word	0x20000078

08000934 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	f107 0310 	add.w	r3, r7, #16
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000948:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <MX_GPIO_Init+0xb0>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a25      	ldr	r2, [pc, #148]	; (80009e4 <MX_GPIO_Init+0xb0>)
 800094e:	f043 0320 	orr.w	r3, r3, #32
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <MX_GPIO_Init+0xb0>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0320 	and.w	r3, r3, #32
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000960:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <MX_GPIO_Init+0xb0>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a1f      	ldr	r2, [pc, #124]	; (80009e4 <MX_GPIO_Init+0xb0>)
 8000966:	f043 0304 	orr.w	r3, r3, #4
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <MX_GPIO_Init+0xb0>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0304 	and.w	r3, r3, #4
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000978:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <MX_GPIO_Init+0xb0>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a19      	ldr	r2, [pc, #100]	; (80009e4 <MX_GPIO_Init+0xb0>)
 800097e:	f043 0308 	orr.w	r3, r3, #8
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_GPIO_Init+0xb0>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f003 0308 	and.w	r3, r3, #8
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DS18B20_Pin_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2132      	movs	r1, #50	; 0x32
 8000994:	4814      	ldr	r0, [pc, #80]	; (80009e8 <MX_GPIO_Init+0xb4>)
 8000996:	f001 f8c8 	bl	8001b2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2104      	movs	r1, #4
 800099e:	4813      	ldr	r0, [pc, #76]	; (80009ec <MX_GPIO_Init+0xb8>)
 80009a0:	f001 f8c3 	bl	8001b2a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PA4 PA5 */
  GPIO_InitStruct.Pin = DS18B20_Pin_Pin|GPIO_PIN_4|GPIO_PIN_5;
 80009a4:	2332      	movs	r3, #50	; 0x32
 80009a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2302      	movs	r3, #2
 80009b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	4619      	mov	r1, r3
 80009ba:	480b      	ldr	r0, [pc, #44]	; (80009e8 <MX_GPIO_Init+0xb4>)
 80009bc:	f000 ff1a 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009c0:	2304      	movs	r3, #4
 80009c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	4619      	mov	r1, r3
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_GPIO_Init+0xb8>)
 80009d8:	f000 ff0c 	bl	80017f4 <HAL_GPIO_Init>

}
 80009dc:	bf00      	nop
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40010800 	.word	0x40010800
 80009ec:	40010c00 	.word	0x40010c00

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f4:	f000 fcb8 	bl	8001368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f8:	f000 f83a 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fc:	f7ff ff9a 	bl	8000934 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a00:	f000 fba0 	bl	8001144 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000a04:	f000 fc0c 	bl	8001220 <MX_USART1_UART_Init>
  DS18B20_Init(DS18B20_Resolution_12bits);
 8000a08:	200c      	movs	r0, #12
 8000a0a:	f7ff ff41 	bl	8000890 <DS18B20_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, receivedMessage, 6);
 8000a0e:	2206      	movs	r2, #6
 8000a10:	4911      	ldr	r1, [pc, #68]	; (8000a58 <main+0x68>)
 8000a12:	4812      	ldr	r0, [pc, #72]	; (8000a5c <main+0x6c>)
 8000a14:	f002 f83d 	bl	8002a92 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // /* USER CODE END WHILE */
      DS18B20_ReadAll();
 8000a18:	f7ff fefa 	bl	8000810 <DS18B20_ReadAll>
      DS18B20_StartAll();
 8000a1c:	f7ff fd78 	bl	8000510 <DS18B20_StartAll>
      temperature = ds18b20[0].Temperature;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <main+0x70>)
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fd53 	bl	80004d0 <__aeabi_f2uiz>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <main+0x74>)
 8000a30:	701a      	strb	r2, [r3, #0]
      sprintf(string, "%d C\n",temperature);
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <main+0x74>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	461a      	mov	r2, r3
 8000a38:	490b      	ldr	r1, [pc, #44]	; (8000a68 <main+0x78>)
 8000a3a:	480c      	ldr	r0, [pc, #48]	; (8000a6c <main+0x7c>)
 8000a3c:	f002 fdd6 	bl	80035ec <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)string, sizeof(string), 100);
 8000a40:	2364      	movs	r3, #100	; 0x64
 8000a42:	2240      	movs	r2, #64	; 0x40
 8000a44:	4909      	ldr	r1, [pc, #36]	; (8000a6c <main+0x7c>)
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <main+0x6c>)
 8000a48:	f001 ffa0 	bl	800298c <HAL_UART_Transmit>
      HAL_Delay(1000);
 8000a4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a50:	f000 fcec 	bl	800142c <HAL_Delay>
      DS18B20_ReadAll();
 8000a54:	e7e0      	b.n	8000a18 <main+0x28>
 8000a56:	bf00      	nop
 8000a58:	200000d0 	.word	0x200000d0
 8000a5c:	20000160 	.word	0x20000160
 8000a60:	20000078 	.word	0x20000078
 8000a64:	200000cd 	.word	0x200000cd
 8000a68:	08003f68 	.word	0x08003f68
 8000a6c:	200000d4 	.word	0x200000d4

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b090      	sub	sp, #64	; 0x40
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0318 	add.w	r3, r7, #24
 8000a7a:	2228      	movs	r2, #40	; 0x28
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 fdd4 	bl	800362c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a92:	2301      	movs	r3, #1
 8000a94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000aae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab4:	f107 0318 	add.w	r3, r7, #24
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 f84f 	bl	8001b5c <HAL_RCC_OscConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ac4:	f000 f819 	bl	8000afa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac8:	230f      	movs	r3, #15
 8000aca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000acc:	2302      	movs	r3, #2
 8000ace:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f001 fabc 	bl	8002060 <HAL_RCC_ClockConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000aee:	f000 f804 	bl	8000afa <Error_Handler>
  }
}
 8000af2:	bf00      	nop
 8000af4:	3740      	adds	r7, #64	; 0x40
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afe:	b672      	cpsid	i
}
 8000b00:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <Error_Handler+0x8>

08000b04 <OneWire_Delay>:

//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <OneWire_Delay+0x2c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2200      	movs	r2, #0
 8000b14:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 8000b16:	bf00      	nop
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <OneWire_Delay+0x2c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b1e:	88fb      	ldrh	r3, [r7, #6]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d9f9      	bls.n	8000b18 <OneWire_Delay+0x14>
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	20000118 	.word	0x20000118

08000b34 <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8000b40:	2300      	movs	r3, #0
 8000b42:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8000b44:	2301      	movs	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	889b      	ldrh	r3, [r3, #4]
 8000b4c:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f107 0208 	add.w	r2, r7, #8
 8000b56:	4611      	mov	r1, r2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 fe4b 	bl	80017f4 <HAL_GPIO_Init>
}	
 8000b5e:	bf00      	nop
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 8000b6e:	2311      	movs	r3, #17
 8000b70:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8000b76:	2301      	movs	r3, #1
 8000b78:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	889b      	ldrh	r3, [r3, #4]
 8000b7e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f107 0208 	add.w	r2, r7, #8
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 fe32 	bl	80017f4 <HAL_GPIO_Init>
}
 8000b90:	bf00      	nop
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <OneWire_OutputLow>:

//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	889b      	ldrh	r3, [r3, #4]
 8000ba4:	041a      	lsls	r2, r3, #16
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	611a      	str	r2, [r3, #16]
}	
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr

08000bb6 <OneWire_OutputHigh>:

void OneWire_OutputHigh(OneWire_t *onewire)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	889a      	ldrh	r2, [r3, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	611a      	str	r2, [r3, #16]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr

08000bd2 <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b084      	sub	sp, #16
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	OneWire_OutputLow(onewire);  // Write bus output low
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ffdc 	bl	8000b98 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ffc0 	bl	8000b66 <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 8000be6:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000bea:	f7ff ff8b 	bl	8000b04 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ffa0 	bl	8000b34 <OneWire_BusInputDirection>
	OneWire_Delay(70);
 8000bf4:	2046      	movs	r0, #70	; 0x46
 8000bf6:	f7ff ff85 	bl	8000b04 <OneWire_Delay>
	
	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	889b      	ldrh	r3, [r3, #4]
 8000c02:	4619      	mov	r1, r3
 8000c04:	4610      	mov	r0, r2
 8000c06:	f000 ff79 	bl	8001afc <HAL_GPIO_ReadPin>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	73fb      	strb	r3, [r7, #15]
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 8000c0e:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8000c12:	f7ff ff77 	bl	8000b04 <OneWire_Delay>

	return i;
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	70fb      	strb	r3, [r7, #3]
	if (bit) // Send '1',
 8000c2c:	78fb      	ldrb	r3, [r7, #3]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d00f      	beq.n	8000c52 <OneWire_WriteBit+0x32>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ffb0 	bl	8000b98 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ff94 	bl	8000b66 <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 8000c3e:	2006      	movs	r0, #6
 8000c40:	f7ff ff60 	bl	8000b04 <OneWire_Delay>
		
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ff75 	bl	8000b34 <OneWire_BusInputDirection>
		OneWire_Delay(64);
 8000c4a:	2040      	movs	r0, #64	; 0x40
 8000c4c:	f7ff ff5a 	bl	8000b04 <OneWire_Delay>
		OneWire_Delay(60);
		
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		OneWire_Delay(10);
	}
}
 8000c50:	e00e      	b.n	8000c70 <OneWire_WriteBit+0x50>
		OneWire_OutputLow(onewire); // Set the bus low
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff ffa0 	bl	8000b98 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff ff84 	bl	8000b66 <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 8000c5e:	203c      	movs	r0, #60	; 0x3c
 8000c60:	f7ff ff50 	bl	8000b04 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff ff65 	bl	8000b34 <OneWire_BusInputDirection>
		OneWire_Delay(10);
 8000c6a:	200a      	movs	r0, #10
 8000c6c:	f7ff ff4a 	bl	8000b04 <OneWire_Delay>
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0; // Default read bit state is low
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]
	
	OneWire_OutputLow(onewire); // Set low to initiate reading
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff ff87 	bl	8000b98 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ff6b 	bl	8000b66 <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 8000c90:	2002      	movs	r0, #2
 8000c92:	f7ff ff37 	bl	8000b04 <OneWire_Delay>
	
	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff ff4c 	bl	8000b34 <OneWire_BusInputDirection>
	OneWire_Delay(10);
 8000c9c:	200a      	movs	r0, #10
 8000c9e:	f7ff ff31 	bl	8000b04 <OneWire_Delay>
	
	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	889b      	ldrh	r3, [r3, #4]
 8000caa:	4619      	mov	r1, r3
 8000cac:	4610      	mov	r0, r2
 8000cae:	f000 ff25 	bl	8001afc <HAL_GPIO_ReadPin>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <OneWire_ReadBit+0x44>
		bit = 1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	73fb      	strb	r3, [r7, #15]
	
	OneWire_Delay(50); // Wait for end of read cycle
 8000cbc:	2032      	movs	r0, #50	; 0x32
 8000cbe:	f7ff ff21 	bl	8000b04 <OneWire_Delay>

	return bit;
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	73fb      	strb	r3, [r7, #15]

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 8000cdc:	78fb      	ldrb	r3, [r7, #3]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ff9a 	bl	8000c20 <OneWire_WriteBit>
		byte >>= 1;
 8000cec:	78fb      	ldrb	r3, [r7, #3]
 8000cee:	085b      	lsrs	r3, r3, #1
 8000cf0:	70fb      	strb	r3, [r7, #3]
	} while(--i);
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	73fb      	strb	r3, [r7, #15]
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1ee      	bne.n	8000cdc <OneWire_WriteByte+0x10>
}
 8000cfe:	bf00      	nop
 8000d00:	bf00      	nop
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8000d10:	2308      	movs	r3, #8
 8000d12:	73fb      	strb	r3, [r7, #15]
 8000d14:	2300      	movs	r3, #0
 8000d16:	73bb      	strb	r3, [r7, #14]

	do{
		byte >>= 1;
 8000d18:	7bbb      	ldrb	r3, [r7, #14]
 8000d1a:	085b      	lsrs	r3, r3, #1
 8000d1c:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ffaa 	bl	8000c78 <OneWire_ReadBit>
 8000d24:	4603      	mov	r3, r0
 8000d26:	01db      	lsls	r3, r3, #7
 8000d28:	b25a      	sxtb	r2, r3
 8000d2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	73bb      	strb	r3, [r7, #14]
	} while(--i);
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	73fb      	strb	r3, [r7, #15]
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1eb      	bne.n	8000d18 <OneWire_ReadByte+0x10>
	
	return byte;
 8000d40:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <OneWire_ResetSearch>:

//
// 1-Wire search operations
//
void OneWire_ResetSearch(OneWire_t* onewire)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
	// Clear the search results
	onewire->LastDiscrepancy = 0;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	719a      	strb	r2, [r3, #6]
	onewire->LastDeviceFlag = 0;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	721a      	strb	r2, [r3, #8]
	onewire->LastFamilyDiscrepancy = 0;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	71da      	strb	r2, [r3, #7]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr

08000d6e <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b084      	sub	sp, #16
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	460b      	mov	r3, r1
 8000d78:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number;
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	id_bit_number = 1;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8000d86:	2301      	movs	r3, #1
 8000d88:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	733b      	strb	r3, [r7, #12]

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	7a1b      	ldrb	r3, [r3, #8]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 809a 	bne.w	8000ecc <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff1a 	bl	8000bd2 <OneWire_Reset>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d00a      	beq.n	8000dba <OneWire_Search+0x4c>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	719a      	strb	r2, [r3, #6]
			onewire->LastDeviceFlag = 0;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	721a      	strb	r2, [r3, #8]
			onewire->LastFamilyDiscrepancy = 0;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	71da      	strb	r2, [r3, #7]
			return 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e09b      	b.n	8000ef2 <OneWire_Search+0x184>
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 8000dba:	78fb      	ldrb	r3, [r7, #3]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ff84 	bl	8000ccc <OneWire_WriteByte>

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ff57 	bl	8000c78 <OneWire_ReadBit>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ff52 	bl	8000c78 <OneWire_ReadBit>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	723b      	strb	r3, [r7, #8]

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 8000dd8:	7a7b      	ldrb	r3, [r7, #9]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d102      	bne.n	8000de4 <OneWire_Search+0x76>
 8000dde:	7a3b      	ldrb	r3, [r7, #8]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d064      	beq.n	8000eae <OneWire_Search+0x140>
			{
				break;
			}
			else
			{
				if (id_bit != cmp_id_bit)
 8000de4:	7a7a      	ldrb	r2, [r7, #9]
 8000de6:	7a3b      	ldrb	r3, [r7, #8]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d002      	beq.n	8000df2 <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // Bit write value for search
 8000dec:	7a7b      	ldrb	r3, [r7, #9]
 8000dee:	72bb      	strb	r3, [r7, #10]
 8000df0:	e026      	b.n	8000e40 <OneWire_Search+0xd2>
				}
				else // 00 - 2 devices
				{
					// Table 3. Search Path Direction
					if (id_bit_number < onewire->LastDiscrepancy)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	799b      	ldrb	r3, [r3, #6]
 8000df6:	7bfa      	ldrb	r2, [r7, #15]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d20d      	bcs.n	8000e18 <OneWire_Search+0xaa>
					{
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8000dfc:	7b7b      	ldrb	r3, [r7, #13]
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	7a5a      	ldrb	r2, [r3, #9]
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	4013      	ands	r3, r2
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	bf14      	ite	ne
 8000e0e:	2301      	movne	r3, #1
 8000e10:	2300      	moveq	r3, #0
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	72bb      	strb	r3, [r7, #10]
 8000e16:	e008      	b.n	8000e2a <OneWire_Search+0xbc>
					}
					else
					{
						// If bit is equal to last - pick 1
						// If not - then pick 0
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	799b      	ldrb	r3, [r3, #6]
 8000e1c:	7bfa      	ldrb	r2, [r7, #15]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	bf0c      	ite	eq
 8000e22:	2301      	moveq	r3, #1
 8000e24:	2300      	movne	r3, #0
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	72bb      	strb	r3, [r7, #10]
					}

					if (search_direction == 0) // If 0 was picked, write it to LastZero
 8000e2a:	7abb      	ldrb	r3, [r7, #10]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d107      	bne.n	8000e40 <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	73bb      	strb	r3, [r7, #14]

						if (last_zero < 9) // Check for last discrepancy in family
 8000e34:	7bbb      	ldrb	r3, [r7, #14]
 8000e36:	2b08      	cmp	r3, #8
 8000e38:	d802      	bhi.n	8000e40 <OneWire_Search+0xd2>
						{
							onewire->LastFamilyDiscrepancy = last_zero;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	7bba      	ldrb	r2, [r7, #14]
 8000e3e:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				if (search_direction == 1)
 8000e40:	7abb      	ldrb	r3, [r7, #10]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d10c      	bne.n	8000e60 <OneWire_Search+0xf2>
				{
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 8000e46:	7b7b      	ldrb	r3, [r7, #13]
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	7a59      	ldrb	r1, [r3, #9]
 8000e4e:	7b7b      	ldrb	r3, [r7, #13]
 8000e50:	7afa      	ldrb	r2, [r7, #11]
 8000e52:	430a      	orrs	r2, r1
 8000e54:	b2d1      	uxtb	r1, r2
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	460a      	mov	r2, r1
 8000e5c:	725a      	strb	r2, [r3, #9]
 8000e5e:	e010      	b.n	8000e82 <OneWire_Search+0x114>
				}
				else
				{
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 8000e60:	7b7b      	ldrb	r3, [r7, #13]
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	7a5b      	ldrb	r3, [r3, #9]
 8000e68:	b25a      	sxtb	r2, r3
 8000e6a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	4013      	ands	r3, r2
 8000e74:	b25a      	sxtb	r2, r3
 8000e76:	7b7b      	ldrb	r3, [r7, #13]
 8000e78:	b2d1      	uxtb	r1, r2
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	460a      	mov	r2, r1
 8000e80:	725a      	strb	r2, [r3, #9]
				}
				
				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 8000e82:	7abb      	ldrb	r3, [r7, #10]
 8000e84:	4619      	mov	r1, r3
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff feca 	bl	8000c20 <OneWire_WriteBit>

				id_bit_number++; // Next bit search - increase the id
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 8000e92:	7afb      	ldrb	r3, [r7, #11]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	72fb      	strb	r3, [r7, #11]

				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 8000e98:	7afb      	ldrb	r3, [r7, #11]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d104      	bne.n	8000ea8 <OneWire_Search+0x13a>
				{
					rom_byte_number++; // Next byte number
 8000e9e:	7b7b      	ldrb	r3, [r7, #13]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1; // Reset the mask - first bit
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes
 8000ea8:	7b7b      	ldrb	r3, [r7, #13]
 8000eaa:	2b07      	cmp	r3, #7
 8000eac:	d98a      	bls.n	8000dc4 <OneWire_Search+0x56>

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	2b40      	cmp	r3, #64	; 0x40
 8000eb2:	d90b      	bls.n	8000ecc <OneWire_Search+0x15e>
		{
			onewire->LastDiscrepancy = last_zero;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7bba      	ldrb	r2, [r7, #14]
 8000eb8:	719a      	strb	r2, [r3, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	799b      	ldrb	r3, [r3, #6]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d102      	bne.n	8000ec8 <OneWire_Search+0x15a>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1; // Searching successful
 8000ec8:	2301      	movs	r3, #1
 8000eca:	733b      	strb	r3, [r7, #12]
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 8000ecc:	7b3b      	ldrb	r3, [r7, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <OneWire_Search+0x16c>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	7a5b      	ldrb	r3, [r3, #9]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10a      	bne.n	8000ef0 <OneWire_Search+0x182>
	{
		onewire->LastDiscrepancy = 0;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	719a      	strb	r2, [r3, #6]
		onewire->LastDeviceFlag = 0;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	721a      	strb	r2, [r3, #8]
		onewire->LastFamilyDiscrepancy = 0;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8000ef0:	7b3b      	ldrb	r3, [r7, #12]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <OneWire_First>:

//
//	Return first device on 1-Wire bus
//
uint8_t OneWire_First(OneWire_t* onewire)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
	OneWire_ResetSearch(onewire);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ff21 	bl	8000d4a <OneWire_ResetSearch>

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8000f08:	21f0      	movs	r1, #240	; 0xf0
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ff2f 	bl	8000d6e <OneWire_Search>
 8000f10:	4603      	mov	r3, r0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <OneWire_Next>:

//
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8000f22:	21f0      	movs	r1, #240	; 0xf0
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ff22 	bl	8000d6e <OneWire_Search>
 8000f2a:	4603      	mov	r3, r0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 8000f3e:	2155      	movs	r1, #85	; 0x55
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff fec3 	bl	8000ccc <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	73fb      	strb	r3, [r7, #15]
 8000f4a:	e00a      	b.n	8000f62 <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	683a      	ldr	r2, [r7, #0]
 8000f50:	4413      	add	r3, r2
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff feb8 	bl	8000ccc <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	73fb      	strb	r3, [r7, #15]
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	2b07      	cmp	r3, #7
 8000f66:	d9f1      	bls.n	8000f4c <OneWire_SelectWithPointer+0x18>
	}	
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b085      	sub	sp, #20
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e00a      	b.n	8000f98 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = onewire->ROM_NO[i];
 8000f82:	7bfa      	ldrb	r2, [r7, #15]
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	6839      	ldr	r1, [r7, #0]
 8000f88:	440b      	add	r3, r1
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	440a      	add	r2, r1
 8000f8e:	7a52      	ldrb	r2, [r2, #9]
 8000f90:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	3301      	adds	r3, #1
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	2b07      	cmp	r3, #7
 8000f9c:	d9f1      	bls.n	8000f82 <OneWire_GetFullROM+0x10>
	}
}
 8000f9e:	bf00      	nop
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
	...

08000fac <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 8000fba:	4811      	ldr	r0, [pc, #68]	; (8001000 <OneWire_Init+0x54>)
 8000fbc:	f001 fa2e 	bl	800241c <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	601a      	str	r2, [r3, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	88fa      	ldrh	r2, [r7, #6]
 8000fca:	809a      	strh	r2, [r3, #4]

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f7ff fdca 	bl	8000b66 <OneWire_BusOutputDirection>
	OneWire_OutputHigh(onewire);
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f7ff fdef 	bl	8000bb6 <OneWire_OutputHigh>
	HAL_Delay(100);
 8000fd8:	2064      	movs	r0, #100	; 0x64
 8000fda:	f000 fa27 	bl	800142c <HAL_Delay>
	OneWire_OutputLow(onewire);
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f7ff fdda 	bl	8000b98 <OneWire_OutputLow>
	HAL_Delay(100);
 8000fe4:	2064      	movs	r0, #100	; 0x64
 8000fe6:	f000 fa21 	bl	800142c <HAL_Delay>
	OneWire_OutputHigh(onewire);
 8000fea:	68f8      	ldr	r0, [r7, #12]
 8000fec:	f7ff fde3 	bl	8000bb6 <OneWire_OutputHigh>
	HAL_Delay(200);
 8000ff0:	20c8      	movs	r0, #200	; 0xc8
 8000ff2:	f000 fa1b 	bl	800142c <HAL_Delay>
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000118 	.word	0x20000118

08001004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_MspInit+0x5c>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	4a14      	ldr	r2, [pc, #80]	; (8001060 <HAL_MspInit+0x5c>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6193      	str	r3, [r2, #24]
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_MspInit+0x5c>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_MspInit+0x5c>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <HAL_MspInit+0x5c>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102c:	61d3      	str	r3, [r2, #28]
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_MspInit+0x5c>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_MspInit+0x60>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_MspInit+0x60>)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	40021000 	.word	0x40021000
 8001064:	40010000 	.word	0x40010000

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800106c:	e7fe      	b.n	800106c <NMI_Handler+0x4>

0800106e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <MemManage_Handler+0x4>

0800107a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <BusFault_Handler+0x4>

08001080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <UsageFault_Handler+0x4>

08001086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr

08001092 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr

0800109e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr

080010aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ae:	f000 f9a1 	bl	80013f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <USART1_IRQHandler+0x10>)
 80010be:	f001 fd0d 	bl	8002adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000160 	.word	0x20000160

080010cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d4:	4a14      	ldr	r2, [pc, #80]	; (8001128 <_sbrk+0x5c>)
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <_sbrk+0x60>)
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <_sbrk+0x64>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	; (8001134 <_sbrk+0x68>)
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d207      	bcs.n	800110c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010fc:	f002 fa9e 	bl	800363c <__errno>
 8001100:	4603      	mov	r3, r0
 8001102:	220c      	movs	r2, #12
 8001104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	e009      	b.n	8001120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	4a05      	ldr	r2, [pc, #20]	; (8001130 <_sbrk+0x64>)
 800111c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20005000 	.word	0x20005000
 800112c:	00000400 	.word	0x00000400
 8001130:	20000114 	.word	0x20000114
 8001134:	200002f8 	.word	0x200002f8

08001138 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114a:	f107 0308 	add.w	r3, r7, #8
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	463b      	mov	r3, r7
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <MX_TIM1_Init+0x98>)
 8001162:	4a1f      	ldr	r2, [pc, #124]	; (80011e0 <MX_TIM1_Init+0x9c>)
 8001164:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_TIM1_Init+0x98>)
 8001168:	223f      	movs	r2, #63	; 0x3f
 800116a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <MX_TIM1_Init+0x98>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_TIM1_Init+0x98>)
 8001174:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001178:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <MX_TIM1_Init+0x98>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001180:	4b16      	ldr	r3, [pc, #88]	; (80011dc <MX_TIM1_Init+0x98>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <MX_TIM1_Init+0x98>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800118c:	4813      	ldr	r0, [pc, #76]	; (80011dc <MX_TIM1_Init+0x98>)
 800118e:	f001 f8f5 	bl	800237c <HAL_TIM_Base_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001198:	f7ff fcaf 	bl	8000afa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	4619      	mov	r1, r3
 80011a8:	480c      	ldr	r0, [pc, #48]	; (80011dc <MX_TIM1_Init+0x98>)
 80011aa:	f001 f981 	bl	80024b0 <HAL_TIM_ConfigClockSource>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80011b4:	f7ff fca1 	bl	8000afa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b8:	2300      	movs	r3, #0
 80011ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011c0:	463b      	mov	r3, r7
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_TIM1_Init+0x98>)
 80011c6:	f001 fb33 	bl	8002830 <HAL_TIMEx_MasterConfigSynchronization>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80011d0:	f7ff fc93 	bl	8000afa <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000118 	.word	0x20000118
 80011e0:	40012c00 	.word	0x40012c00

080011e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a09      	ldr	r2, [pc, #36]	; (8001218 <HAL_TIM_Base_MspInit+0x34>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d10b      	bne.n	800120e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_TIM_Base_MspInit+0x38>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	4a08      	ldr	r2, [pc, #32]	; (800121c <HAL_TIM_Base_MspInit+0x38>)
 80011fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001200:	6193      	str	r3, [r2, #24]
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_TIM_Base_MspInit+0x38>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800120e:	bf00      	nop
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	40012c00 	.word	0x40012c00
 800121c:	40021000 	.word	0x40021000

08001220 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_USART1_UART_Init+0x4c>)
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <MX_USART1_UART_Init+0x50>)
 8001228:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <MX_USART1_UART_Init+0x4c>)
 800122c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001230:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_USART1_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_USART1_UART_Init+0x4c>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <MX_USART1_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_USART1_UART_Init+0x4c>)
 8001246:	220c      	movs	r2, #12
 8001248:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <MX_USART1_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_USART1_UART_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_USART1_UART_Init+0x4c>)
 8001258:	f001 fb48 	bl	80028ec <HAL_UART_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001262:	f7ff fc4a 	bl	8000afa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000160 	.word	0x20000160
 8001270:	40013800 	.word	0x40013800

08001274 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a20      	ldr	r2, [pc, #128]	; (8001310 <HAL_UART_MspInit+0x9c>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d139      	bne.n	8001308 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001294:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <HAL_UART_MspInit+0xa0>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <HAL_UART_MspInit+0xa0>)
 800129a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <HAL_UART_MspInit+0xa0>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ac:	4b19      	ldr	r3, [pc, #100]	; (8001314 <HAL_UART_MspInit+0xa0>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a18      	ldr	r2, [pc, #96]	; (8001314 <HAL_UART_MspInit+0xa0>)
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <HAL_UART_MspInit+0xa0>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ce:	2303      	movs	r3, #3
 80012d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	4619      	mov	r1, r3
 80012d8:	480f      	ldr	r0, [pc, #60]	; (8001318 <HAL_UART_MspInit+0xa4>)
 80012da:	f000 fa8b 	bl	80017f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	4619      	mov	r1, r3
 80012f2:	4809      	ldr	r0, [pc, #36]	; (8001318 <HAL_UART_MspInit+0xa4>)
 80012f4:	f000 fa7e 	bl	80017f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2100      	movs	r1, #0
 80012fc:	2025      	movs	r0, #37	; 0x25
 80012fe:	f000 f990 	bl	8001622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001302:	2025      	movs	r0, #37	; 0x25
 8001304:	f000 f9a9 	bl	800165a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001308:	bf00      	nop
 800130a:	3720      	adds	r7, #32
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40013800 	.word	0x40013800
 8001314:	40021000 	.word	0x40021000
 8001318:	40010800 	.word	0x40010800

0800131c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800131c:	f7ff ff0c 	bl	8001138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001320:	480b      	ldr	r0, [pc, #44]	; (8001350 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001322:	490c      	ldr	r1, [pc, #48]	; (8001354 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001324:	4a0c      	ldr	r2, [pc, #48]	; (8001358 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001328:	e002      	b.n	8001330 <LoopCopyDataInit>

0800132a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800132c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800132e:	3304      	adds	r3, #4

08001330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001334:	d3f9      	bcc.n	800132a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001336:	4a09      	ldr	r2, [pc, #36]	; (800135c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001338:	4c09      	ldr	r4, [pc, #36]	; (8001360 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800133c:	e001      	b.n	8001342 <LoopFillZerobss>

0800133e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800133e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001340:	3204      	adds	r2, #4

08001342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001344:	d3fb      	bcc.n	800133e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001346:	f002 f97f 	bl	8003648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800134a:	f7ff fb51 	bl	80009f0 <main>
  bx lr
 800134e:	4770      	bx	lr
  ldr r0, =_sdata
 8001350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001354:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001358:	08003fd8 	.word	0x08003fd8
  ldr r2, =_sbss
 800135c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001360:	200002f4 	.word	0x200002f4

08001364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001364:	e7fe      	b.n	8001364 <ADC1_2_IRQHandler>
	...

08001368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <HAL_Init+0x28>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a07      	ldr	r2, [pc, #28]	; (8001390 <HAL_Init+0x28>)
 8001372:	f043 0310 	orr.w	r3, r3, #16
 8001376:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001378:	2003      	movs	r0, #3
 800137a:	f000 f947 	bl	800160c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800137e:	200f      	movs	r0, #15
 8001380:	f000 f808 	bl	8001394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001384:	f7ff fe3e 	bl	8001004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40022000 	.word	0x40022000

08001394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_InitTick+0x54>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_InitTick+0x58>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f95f 	bl	8001676 <HAL_SYSTICK_Config>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e00e      	b.n	80013e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	d80a      	bhi.n	80013de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f000 f927 	bl	8001622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d4:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <HAL_InitTick+0x5c>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	e000      	b.n	80013e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000008 	.word	0x20000008
 80013f0:	20000004 	.word	0x20000004

080013f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_IncTick+0x1c>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_IncTick+0x20>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4413      	add	r3, r2
 8001404:	4a03      	ldr	r2, [pc, #12]	; (8001414 <HAL_IncTick+0x20>)
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	20000008 	.word	0x20000008
 8001414:	200001a8 	.word	0x200001a8

08001418 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b02      	ldr	r3, [pc, #8]	; (8001428 <HAL_GetTick+0x10>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	200001a8 	.word	0x200001a8

0800142c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001434:	f7ff fff0 	bl	8001418 <HAL_GetTick>
 8001438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001444:	d005      	beq.n	8001452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_Delay+0x44>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4413      	add	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001452:	bf00      	nop
 8001454:	f7ff ffe0 	bl	8001418 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	429a      	cmp	r2, r3
 8001462:	d8f7      	bhi.n	8001454 <HAL_Delay+0x28>
  {
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000008 	.word	0x20000008

08001474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001490:	4013      	ands	r3, r2
 8001492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800149c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a6:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	60d3      	str	r3, [r2, #12]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <__NVIC_GetPriorityGrouping+0x18>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	f003 0307 	and.w	r3, r3, #7
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	db0b      	blt.n	8001502 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	f003 021f 	and.w	r2, r3, #31
 80014f0:	4906      	ldr	r1, [pc, #24]	; (800150c <__NVIC_EnableIRQ+0x34>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	095b      	lsrs	r3, r3, #5
 80014f8:	2001      	movs	r0, #1
 80014fa:	fa00 f202 	lsl.w	r2, r0, r2
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	e000e100 	.word	0xe000e100

08001510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db0a      	blt.n	800153a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	490c      	ldr	r1, [pc, #48]	; (800155c <__NVIC_SetPriority+0x4c>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	0112      	lsls	r2, r2, #4
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	440b      	add	r3, r1
 8001534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001538:	e00a      	b.n	8001550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4908      	ldr	r1, [pc, #32]	; (8001560 <__NVIC_SetPriority+0x50>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	3b04      	subs	r3, #4
 8001548:	0112      	lsls	r2, r2, #4
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	440b      	add	r3, r1
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f1c3 0307 	rsb	r3, r3, #7
 800157e:	2b04      	cmp	r3, #4
 8001580:	bf28      	it	cs
 8001582:	2304      	movcs	r3, #4
 8001584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3304      	adds	r3, #4
 800158a:	2b06      	cmp	r3, #6
 800158c:	d902      	bls.n	8001594 <NVIC_EncodePriority+0x30>
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3b03      	subs	r3, #3
 8001592:	e000      	b.n	8001596 <NVIC_EncodePriority+0x32>
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	f04f 32ff 	mov.w	r2, #4294967295
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43da      	mvns	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	401a      	ands	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	43d9      	mvns	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	4313      	orrs	r3, r2
         );
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3724      	adds	r7, #36	; 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d8:	d301      	bcc.n	80015de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015da:	2301      	movs	r3, #1
 80015dc:	e00f      	b.n	80015fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <SysTick_Config+0x40>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e6:	210f      	movs	r1, #15
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ec:	f7ff ff90 	bl	8001510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <SysTick_Config+0x40>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f6:	4b04      	ldr	r3, [pc, #16]	; (8001608 <SysTick_Config+0x40>)
 80015f8:	2207      	movs	r2, #7
 80015fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	e000e010 	.word	0xe000e010

0800160c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ff2d 	bl	8001474 <__NVIC_SetPriorityGrouping>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001622:	b580      	push	{r7, lr}
 8001624:	b086      	sub	sp, #24
 8001626:	af00      	add	r7, sp, #0
 8001628:	4603      	mov	r3, r0
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001634:	f7ff ff42 	bl	80014bc <__NVIC_GetPriorityGrouping>
 8001638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	6978      	ldr	r0, [r7, #20]
 8001640:	f7ff ff90 	bl	8001564 <NVIC_EncodePriority>
 8001644:	4602      	mov	r2, r0
 8001646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff5f 	bl	8001510 <__NVIC_SetPriority>
}
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff35 	bl	80014d8 <__NVIC_EnableIRQ>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ffa2 	bl	80015c8 <SysTick_Config>
 8001684:	4603      	mov	r3, r0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800168e:	b480      	push	{r7}
 8001690:	b085      	sub	sp, #20
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d008      	beq.n	80016b8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2204      	movs	r2, #4
 80016aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e020      	b.n	80016fa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 020e 	bic.w	r2, r2, #14
 80016c6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0201 	bic.w	r2, r2, #1
 80016d6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e0:	2101      	movs	r1, #1
 80016e2:	fa01 f202 	lsl.w	r2, r1, r2
 80016e6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr

08001704 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d005      	beq.n	8001728 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2204      	movs	r2, #4
 8001720:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	73fb      	strb	r3, [r7, #15]
 8001726:	e051      	b.n	80017cc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 020e 	bic.w	r2, r2, #14
 8001736:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0201 	bic.w	r2, r2, #1
 8001746:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a22      	ldr	r2, [pc, #136]	; (80017d8 <HAL_DMA_Abort_IT+0xd4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d029      	beq.n	80017a6 <HAL_DMA_Abort_IT+0xa2>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a21      	ldr	r2, [pc, #132]	; (80017dc <HAL_DMA_Abort_IT+0xd8>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d022      	beq.n	80017a2 <HAL_DMA_Abort_IT+0x9e>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a1f      	ldr	r2, [pc, #124]	; (80017e0 <HAL_DMA_Abort_IT+0xdc>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d01a      	beq.n	800179c <HAL_DMA_Abort_IT+0x98>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a1e      	ldr	r2, [pc, #120]	; (80017e4 <HAL_DMA_Abort_IT+0xe0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d012      	beq.n	8001796 <HAL_DMA_Abort_IT+0x92>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a1c      	ldr	r2, [pc, #112]	; (80017e8 <HAL_DMA_Abort_IT+0xe4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d00a      	beq.n	8001790 <HAL_DMA_Abort_IT+0x8c>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a1b      	ldr	r2, [pc, #108]	; (80017ec <HAL_DMA_Abort_IT+0xe8>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d102      	bne.n	800178a <HAL_DMA_Abort_IT+0x86>
 8001784:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001788:	e00e      	b.n	80017a8 <HAL_DMA_Abort_IT+0xa4>
 800178a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800178e:	e00b      	b.n	80017a8 <HAL_DMA_Abort_IT+0xa4>
 8001790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001794:	e008      	b.n	80017a8 <HAL_DMA_Abort_IT+0xa4>
 8001796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179a:	e005      	b.n	80017a8 <HAL_DMA_Abort_IT+0xa4>
 800179c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a0:	e002      	b.n	80017a8 <HAL_DMA_Abort_IT+0xa4>
 80017a2:	2310      	movs	r3, #16
 80017a4:	e000      	b.n	80017a8 <HAL_DMA_Abort_IT+0xa4>
 80017a6:	2301      	movs	r3, #1
 80017a8:	4a11      	ldr	r2, [pc, #68]	; (80017f0 <HAL_DMA_Abort_IT+0xec>)
 80017aa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	4798      	blx	r3
    } 
  }
  return status;
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40020008 	.word	0x40020008
 80017dc:	4002001c 	.word	0x4002001c
 80017e0:	40020030 	.word	0x40020030
 80017e4:	40020044 	.word	0x40020044
 80017e8:	40020058 	.word	0x40020058
 80017ec:	4002006c 	.word	0x4002006c
 80017f0:	40020000 	.word	0x40020000

080017f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b08b      	sub	sp, #44	; 0x2c
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001806:	e169      	b.n	8001adc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001808:	2201      	movs	r2, #1
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	429a      	cmp	r2, r3
 8001822:	f040 8158 	bne.w	8001ad6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4a9a      	ldr	r2, [pc, #616]	; (8001a94 <HAL_GPIO_Init+0x2a0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d05e      	beq.n	80018ee <HAL_GPIO_Init+0xfa>
 8001830:	4a98      	ldr	r2, [pc, #608]	; (8001a94 <HAL_GPIO_Init+0x2a0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d875      	bhi.n	8001922 <HAL_GPIO_Init+0x12e>
 8001836:	4a98      	ldr	r2, [pc, #608]	; (8001a98 <HAL_GPIO_Init+0x2a4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d058      	beq.n	80018ee <HAL_GPIO_Init+0xfa>
 800183c:	4a96      	ldr	r2, [pc, #600]	; (8001a98 <HAL_GPIO_Init+0x2a4>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d86f      	bhi.n	8001922 <HAL_GPIO_Init+0x12e>
 8001842:	4a96      	ldr	r2, [pc, #600]	; (8001a9c <HAL_GPIO_Init+0x2a8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d052      	beq.n	80018ee <HAL_GPIO_Init+0xfa>
 8001848:	4a94      	ldr	r2, [pc, #592]	; (8001a9c <HAL_GPIO_Init+0x2a8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d869      	bhi.n	8001922 <HAL_GPIO_Init+0x12e>
 800184e:	4a94      	ldr	r2, [pc, #592]	; (8001aa0 <HAL_GPIO_Init+0x2ac>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d04c      	beq.n	80018ee <HAL_GPIO_Init+0xfa>
 8001854:	4a92      	ldr	r2, [pc, #584]	; (8001aa0 <HAL_GPIO_Init+0x2ac>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d863      	bhi.n	8001922 <HAL_GPIO_Init+0x12e>
 800185a:	4a92      	ldr	r2, [pc, #584]	; (8001aa4 <HAL_GPIO_Init+0x2b0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d046      	beq.n	80018ee <HAL_GPIO_Init+0xfa>
 8001860:	4a90      	ldr	r2, [pc, #576]	; (8001aa4 <HAL_GPIO_Init+0x2b0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d85d      	bhi.n	8001922 <HAL_GPIO_Init+0x12e>
 8001866:	2b12      	cmp	r3, #18
 8001868:	d82a      	bhi.n	80018c0 <HAL_GPIO_Init+0xcc>
 800186a:	2b12      	cmp	r3, #18
 800186c:	d859      	bhi.n	8001922 <HAL_GPIO_Init+0x12e>
 800186e:	a201      	add	r2, pc, #4	; (adr r2, 8001874 <HAL_GPIO_Init+0x80>)
 8001870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001874:	080018ef 	.word	0x080018ef
 8001878:	080018c9 	.word	0x080018c9
 800187c:	080018db 	.word	0x080018db
 8001880:	0800191d 	.word	0x0800191d
 8001884:	08001923 	.word	0x08001923
 8001888:	08001923 	.word	0x08001923
 800188c:	08001923 	.word	0x08001923
 8001890:	08001923 	.word	0x08001923
 8001894:	08001923 	.word	0x08001923
 8001898:	08001923 	.word	0x08001923
 800189c:	08001923 	.word	0x08001923
 80018a0:	08001923 	.word	0x08001923
 80018a4:	08001923 	.word	0x08001923
 80018a8:	08001923 	.word	0x08001923
 80018ac:	08001923 	.word	0x08001923
 80018b0:	08001923 	.word	0x08001923
 80018b4:	08001923 	.word	0x08001923
 80018b8:	080018d1 	.word	0x080018d1
 80018bc:	080018e5 	.word	0x080018e5
 80018c0:	4a79      	ldr	r2, [pc, #484]	; (8001aa8 <HAL_GPIO_Init+0x2b4>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d013      	beq.n	80018ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018c6:	e02c      	b.n	8001922 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	623b      	str	r3, [r7, #32]
          break;
 80018ce:	e029      	b.n	8001924 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	3304      	adds	r3, #4
 80018d6:	623b      	str	r3, [r7, #32]
          break;
 80018d8:	e024      	b.n	8001924 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	3308      	adds	r3, #8
 80018e0:	623b      	str	r3, [r7, #32]
          break;
 80018e2:	e01f      	b.n	8001924 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	330c      	adds	r3, #12
 80018ea:	623b      	str	r3, [r7, #32]
          break;
 80018ec:	e01a      	b.n	8001924 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d102      	bne.n	80018fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018f6:	2304      	movs	r3, #4
 80018f8:	623b      	str	r3, [r7, #32]
          break;
 80018fa:	e013      	b.n	8001924 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d105      	bne.n	8001910 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001904:	2308      	movs	r3, #8
 8001906:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	611a      	str	r2, [r3, #16]
          break;
 800190e:	e009      	b.n	8001924 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001910:	2308      	movs	r3, #8
 8001912:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69fa      	ldr	r2, [r7, #28]
 8001918:	615a      	str	r2, [r3, #20]
          break;
 800191a:	e003      	b.n	8001924 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800191c:	2300      	movs	r3, #0
 800191e:	623b      	str	r3, [r7, #32]
          break;
 8001920:	e000      	b.n	8001924 <HAL_GPIO_Init+0x130>
          break;
 8001922:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	2bff      	cmp	r3, #255	; 0xff
 8001928:	d801      	bhi.n	800192e <HAL_GPIO_Init+0x13a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	e001      	b.n	8001932 <HAL_GPIO_Init+0x13e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3304      	adds	r3, #4
 8001932:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2bff      	cmp	r3, #255	; 0xff
 8001938:	d802      	bhi.n	8001940 <HAL_GPIO_Init+0x14c>
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	e002      	b.n	8001946 <HAL_GPIO_Init+0x152>
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	3b08      	subs	r3, #8
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	210f      	movs	r1, #15
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	fa01 f303 	lsl.w	r3, r1, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	401a      	ands	r2, r3
 8001958:	6a39      	ldr	r1, [r7, #32]
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	431a      	orrs	r2, r3
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 80b1 	beq.w	8001ad6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001974:	4b4d      	ldr	r3, [pc, #308]	; (8001aac <HAL_GPIO_Init+0x2b8>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	4a4c      	ldr	r2, [pc, #304]	; (8001aac <HAL_GPIO_Init+0x2b8>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6193      	str	r3, [r2, #24]
 8001980:	4b4a      	ldr	r3, [pc, #296]	; (8001aac <HAL_GPIO_Init+0x2b8>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800198c:	4a48      	ldr	r2, [pc, #288]	; (8001ab0 <HAL_GPIO_Init+0x2bc>)
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	089b      	lsrs	r3, r3, #2
 8001992:	3302      	adds	r3, #2
 8001994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001998:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	220f      	movs	r2, #15
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4013      	ands	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a40      	ldr	r2, [pc, #256]	; (8001ab4 <HAL_GPIO_Init+0x2c0>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d013      	beq.n	80019e0 <HAL_GPIO_Init+0x1ec>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a3f      	ldr	r2, [pc, #252]	; (8001ab8 <HAL_GPIO_Init+0x2c4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d00d      	beq.n	80019dc <HAL_GPIO_Init+0x1e8>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a3e      	ldr	r2, [pc, #248]	; (8001abc <HAL_GPIO_Init+0x2c8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d007      	beq.n	80019d8 <HAL_GPIO_Init+0x1e4>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a3d      	ldr	r2, [pc, #244]	; (8001ac0 <HAL_GPIO_Init+0x2cc>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d101      	bne.n	80019d4 <HAL_GPIO_Init+0x1e0>
 80019d0:	2303      	movs	r3, #3
 80019d2:	e006      	b.n	80019e2 <HAL_GPIO_Init+0x1ee>
 80019d4:	2304      	movs	r3, #4
 80019d6:	e004      	b.n	80019e2 <HAL_GPIO_Init+0x1ee>
 80019d8:	2302      	movs	r3, #2
 80019da:	e002      	b.n	80019e2 <HAL_GPIO_Init+0x1ee>
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <HAL_GPIO_Init+0x1ee>
 80019e0:	2300      	movs	r3, #0
 80019e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e4:	f002 0203 	and.w	r2, r2, #3
 80019e8:	0092      	lsls	r2, r2, #2
 80019ea:	4093      	lsls	r3, r2
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019f2:	492f      	ldr	r1, [pc, #188]	; (8001ab0 <HAL_GPIO_Init+0x2bc>)
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	3302      	adds	r3, #2
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d006      	beq.n	8001a1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	492c      	ldr	r1, [pc, #176]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	608b      	str	r3, [r1, #8]
 8001a18:	e006      	b.n	8001a28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	4928      	ldr	r1, [pc, #160]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a34:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	4922      	ldr	r1, [pc, #136]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	60cb      	str	r3, [r1, #12]
 8001a40:	e006      	b.n	8001a50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	491e      	ldr	r1, [pc, #120]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d006      	beq.n	8001a6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	4918      	ldr	r1, [pc, #96]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
 8001a68:	e006      	b.n	8001a78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	4914      	ldr	r1, [pc, #80]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d021      	beq.n	8001ac8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	490e      	ldr	r1, [pc, #56]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	600b      	str	r3, [r1, #0]
 8001a90:	e021      	b.n	8001ad6 <HAL_GPIO_Init+0x2e2>
 8001a92:	bf00      	nop
 8001a94:	10320000 	.word	0x10320000
 8001a98:	10310000 	.word	0x10310000
 8001a9c:	10220000 	.word	0x10220000
 8001aa0:	10210000 	.word	0x10210000
 8001aa4:	10120000 	.word	0x10120000
 8001aa8:	10110000 	.word	0x10110000
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40010000 	.word	0x40010000
 8001ab4:	40010800 	.word	0x40010800
 8001ab8:	40010c00 	.word	0x40010c00
 8001abc:	40011000 	.word	0x40011000
 8001ac0:	40011400 	.word	0x40011400
 8001ac4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_GPIO_Init+0x304>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	4909      	ldr	r1, [pc, #36]	; (8001af8 <HAL_GPIO_Init+0x304>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	3301      	adds	r3, #1
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f47f ae8e 	bne.w	8001808 <HAL_GPIO_Init+0x14>
  }
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	372c      	adds	r7, #44	; 0x2c
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	40010400 	.word	0x40010400

08001afc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	e001      	b.n	8001b1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	460b      	mov	r3, r1
 8001b34:	807b      	strh	r3, [r7, #2]
 8001b36:	4613      	mov	r3, r2
 8001b38:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b3a:	787b      	ldrb	r3, [r7, #1]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b40:	887a      	ldrh	r2, [r7, #2]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b46:	e003      	b.n	8001b50 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b48:	887b      	ldrh	r3, [r7, #2]
 8001b4a:	041a      	lsls	r2, r3, #16
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	611a      	str	r2, [r3, #16]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
	...

08001b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e272      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8087 	beq.w	8001c8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b7c:	4b92      	ldr	r3, [pc, #584]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d00c      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b88:	4b8f      	ldr	r3, [pc, #572]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d112      	bne.n	8001bba <HAL_RCC_OscConfig+0x5e>
 8001b94:	4b8c      	ldr	r3, [pc, #560]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba0:	d10b      	bne.n	8001bba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba2:	4b89      	ldr	r3, [pc, #548]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d06c      	beq.n	8001c88 <HAL_RCC_OscConfig+0x12c>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d168      	bne.n	8001c88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e24c      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc2:	d106      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x76>
 8001bc4:	4b80      	ldr	r3, [pc, #512]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a7f      	ldr	r2, [pc, #508]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	e02e      	b.n	8001c30 <HAL_RCC_OscConfig+0xd4>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x98>
 8001bda:	4b7b      	ldr	r3, [pc, #492]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a7a      	ldr	r2, [pc, #488]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	4b78      	ldr	r3, [pc, #480]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a77      	ldr	r2, [pc, #476]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e01d      	b.n	8001c30 <HAL_RCC_OscConfig+0xd4>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bfc:	d10c      	bne.n	8001c18 <HAL_RCC_OscConfig+0xbc>
 8001bfe:	4b72      	ldr	r3, [pc, #456]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a71      	ldr	r2, [pc, #452]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	4b6f      	ldr	r3, [pc, #444]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a6e      	ldr	r2, [pc, #440]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	e00b      	b.n	8001c30 <HAL_RCC_OscConfig+0xd4>
 8001c18:	4b6b      	ldr	r3, [pc, #428]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a6a      	ldr	r2, [pc, #424]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b68      	ldr	r3, [pc, #416]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a67      	ldr	r2, [pc, #412]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d013      	beq.n	8001c60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7ff fbee 	bl	8001418 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c40:	f7ff fbea 	bl	8001418 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	; 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e200      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c52:	4b5d      	ldr	r3, [pc, #372]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0xe4>
 8001c5e:	e014      	b.n	8001c8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c60:	f7ff fbda 	bl	8001418 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c68:	f7ff fbd6 	bl	8001418 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b64      	cmp	r3, #100	; 0x64
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e1ec      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7a:	4b53      	ldr	r3, [pc, #332]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x10c>
 8001c86:	e000      	b.n	8001c8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d063      	beq.n	8001d5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c96:	4b4c      	ldr	r3, [pc, #304]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00b      	beq.n	8001cba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ca2:	4b49      	ldr	r3, [pc, #292]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d11c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x18c>
 8001cae:	4b46      	ldr	r3, [pc, #280]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d116      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cba:	4b43      	ldr	r3, [pc, #268]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d005      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x176>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d001      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e1c0      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	4939      	ldr	r1, [pc, #228]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce6:	e03a      	b.n	8001d5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d020      	beq.n	8001d32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf0:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf6:	f7ff fb8f 	bl	8001418 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cfe:	f7ff fb8b 	bl	8001418 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e1a1      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d10:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4927      	ldr	r1, [pc, #156]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	600b      	str	r3, [r1, #0]
 8001d30:	e015      	b.n	8001d5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d32:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7ff fb6e 	bl	8001418 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d40:	f7ff fb6a 	bl	8001418 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e180      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d52:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d03a      	beq.n	8001de0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d019      	beq.n	8001da6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d78:	f7ff fb4e 	bl	8001418 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d80:	f7ff fb4a 	bl	8001418 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e160      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d92:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f000 face 	bl	8002340 <RCC_Delay>
 8001da4:	e01c      	b.n	8001de0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dac:	f7ff fb34 	bl	8001418 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db2:	e00f      	b.n	8001dd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db4:	f7ff fb30 	bl	8001418 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d908      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e146      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	42420000 	.word	0x42420000
 8001dd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd4:	4b92      	ldr	r3, [pc, #584]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1e9      	bne.n	8001db4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80a6 	beq.w	8001f3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df2:	4b8b      	ldr	r3, [pc, #556]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10d      	bne.n	8001e1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	4b88      	ldr	r3, [pc, #544]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	4a87      	ldr	r2, [pc, #540]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e08:	61d3      	str	r3, [r2, #28]
 8001e0a:	4b85      	ldr	r3, [pc, #532]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e16:	2301      	movs	r3, #1
 8001e18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1a:	4b82      	ldr	r3, [pc, #520]	; (8002024 <HAL_RCC_OscConfig+0x4c8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d118      	bne.n	8001e58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e26:	4b7f      	ldr	r3, [pc, #508]	; (8002024 <HAL_RCC_OscConfig+0x4c8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a7e      	ldr	r2, [pc, #504]	; (8002024 <HAL_RCC_OscConfig+0x4c8>)
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e32:	f7ff faf1 	bl	8001418 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3a:	f7ff faed 	bl	8001418 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b64      	cmp	r3, #100	; 0x64
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e103      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4c:	4b75      	ldr	r3, [pc, #468]	; (8002024 <HAL_RCC_OscConfig+0x4c8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x312>
 8001e60:	4b6f      	ldr	r3, [pc, #444]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4a6e      	ldr	r2, [pc, #440]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6213      	str	r3, [r2, #32]
 8001e6c:	e02d      	b.n	8001eca <HAL_RCC_OscConfig+0x36e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x334>
 8001e76:	4b6a      	ldr	r3, [pc, #424]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	4a69      	ldr	r2, [pc, #420]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	6213      	str	r3, [r2, #32]
 8001e82:	4b67      	ldr	r3, [pc, #412]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	4a66      	ldr	r2, [pc, #408]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	f023 0304 	bic.w	r3, r3, #4
 8001e8c:	6213      	str	r3, [r2, #32]
 8001e8e:	e01c      	b.n	8001eca <HAL_RCC_OscConfig+0x36e>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	2b05      	cmp	r3, #5
 8001e96:	d10c      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x356>
 8001e98:	4b61      	ldr	r3, [pc, #388]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	4a60      	ldr	r2, [pc, #384]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	6213      	str	r3, [r2, #32]
 8001ea4:	4b5e      	ldr	r3, [pc, #376]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4a5d      	ldr	r2, [pc, #372]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6213      	str	r3, [r2, #32]
 8001eb0:	e00b      	b.n	8001eca <HAL_RCC_OscConfig+0x36e>
 8001eb2:	4b5b      	ldr	r3, [pc, #364]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	4a5a      	ldr	r2, [pc, #360]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	6213      	str	r3, [r2, #32]
 8001ebe:	4b58      	ldr	r3, [pc, #352]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4a57      	ldr	r2, [pc, #348]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	f023 0304 	bic.w	r3, r3, #4
 8001ec8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d015      	beq.n	8001efe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed2:	f7ff faa1 	bl	8001418 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed8:	e00a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eda:	f7ff fa9d 	bl	8001418 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e0b1      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef0:	4b4b      	ldr	r3, [pc, #300]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0ee      	beq.n	8001eda <HAL_RCC_OscConfig+0x37e>
 8001efc:	e014      	b.n	8001f28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efe:	f7ff fa8b 	bl	8001418 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f04:	e00a      	b.n	8001f1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f06:	f7ff fa87 	bl	8001418 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e09b      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1c:	4b40      	ldr	r3, [pc, #256]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1ee      	bne.n	8001f06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f28:	7dfb      	ldrb	r3, [r7, #23]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d105      	bne.n	8001f3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f2e:	4b3c      	ldr	r3, [pc, #240]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4a3b      	ldr	r2, [pc, #236]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 8087 	beq.w	8002052 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f44:	4b36      	ldr	r3, [pc, #216]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 030c 	and.w	r3, r3, #12
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d061      	beq.n	8002014 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d146      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f58:	4b33      	ldr	r3, [pc, #204]	; (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5e:	f7ff fa5b 	bl	8001418 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f66:	f7ff fa57 	bl	8001418 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e06d      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f78:	4b29      	ldr	r3, [pc, #164]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f0      	bne.n	8001f66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f8c:	d108      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f8e:	4b24      	ldr	r3, [pc, #144]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	4921      	ldr	r1, [pc, #132]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fa0:	4b1f      	ldr	r3, [pc, #124]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a19      	ldr	r1, [r3, #32]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	491b      	ldr	r1, [pc, #108]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7ff fa2b 	bl	8001418 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc6:	f7ff fa27 	bl	8001418 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e03d      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x46a>
 8001fe4:	e035      	b.n	8002052 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <HAL_RCC_OscConfig+0x4cc>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7ff fa14 	bl	8001418 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff4:	f7ff fa10 	bl	8001418 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e026      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x498>
 8002012:	e01e      	b.n	8002052 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d107      	bne.n	800202c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e019      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
 8002020:	40021000 	.word	0x40021000
 8002024:	40007000 	.word	0x40007000
 8002028:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_RCC_OscConfig+0x500>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	429a      	cmp	r2, r3
 800203e:	d106      	bne.n	800204e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204a:	429a      	cmp	r2, r3
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40021000 	.word	0x40021000

08002060 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0d0      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002074:	4b6a      	ldr	r3, [pc, #424]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d910      	bls.n	80020a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b67      	ldr	r3, [pc, #412]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 0207 	bic.w	r2, r3, #7
 800208a:	4965      	ldr	r1, [pc, #404]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	4b63      	ldr	r3, [pc, #396]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0b8      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d020      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020bc:	4b59      	ldr	r3, [pc, #356]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4a58      	ldr	r2, [pc, #352]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020d4:	4b53      	ldr	r3, [pc, #332]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4a52      	ldr	r2, [pc, #328]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e0:	4b50      	ldr	r3, [pc, #320]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	494d      	ldr	r1, [pc, #308]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d040      	beq.n	8002180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002106:	4b47      	ldr	r3, [pc, #284]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d115      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e07f      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d107      	bne.n	800212e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211e:	4b41      	ldr	r3, [pc, #260]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e073      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212e:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e06b      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800213e:	4b39      	ldr	r3, [pc, #228]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f023 0203 	bic.w	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4936      	ldr	r1, [pc, #216]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002150:	f7ff f962 	bl	8001418 <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	e00a      	b.n	800216e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002158:	f7ff f95e 	bl	8001418 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	; 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e053      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216e:	4b2d      	ldr	r3, [pc, #180]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 020c 	and.w	r2, r3, #12
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	429a      	cmp	r2, r3
 800217e:	d1eb      	bne.n	8002158 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002180:	4b27      	ldr	r3, [pc, #156]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d210      	bcs.n	80021b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b24      	ldr	r3, [pc, #144]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 0207 	bic.w	r2, r3, #7
 8002196:	4922      	ldr	r1, [pc, #136]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b20      	ldr	r3, [pc, #128]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e032      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d008      	beq.n	80021ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021bc:	4b19      	ldr	r3, [pc, #100]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4916      	ldr	r1, [pc, #88]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d009      	beq.n	80021ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021da:	4b12      	ldr	r3, [pc, #72]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	490e      	ldr	r1, [pc, #56]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ee:	f000 f821 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80021f2:	4602      	mov	r2, r0
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	490a      	ldr	r1, [pc, #40]	; (8002228 <HAL_RCC_ClockConfig+0x1c8>)
 8002200:	5ccb      	ldrb	r3, [r1, r3]
 8002202:	fa22 f303 	lsr.w	r3, r2, r3
 8002206:	4a09      	ldr	r2, [pc, #36]	; (800222c <HAL_RCC_ClockConfig+0x1cc>)
 8002208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_RCC_ClockConfig+0x1d0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff f8c0 	bl	8001394 <HAL_InitTick>

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40022000 	.word	0x40022000
 8002224:	40021000 	.word	0x40021000
 8002228:	08003f70 	.word	0x08003f70
 800222c:	20000000 	.word	0x20000000
 8002230:	20000004 	.word	0x20000004

08002234 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002234:	b480      	push	{r7}
 8002236:	b087      	sub	sp, #28
 8002238:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800224e:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b04      	cmp	r3, #4
 800225c:	d002      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0x30>
 800225e:	2b08      	cmp	r3, #8
 8002260:	d003      	beq.n	800226a <HAL_RCC_GetSysClockFreq+0x36>
 8002262:	e027      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_RCC_GetSysClockFreq+0x98>)
 8002266:	613b      	str	r3, [r7, #16]
      break;
 8002268:	e027      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	0c9b      	lsrs	r3, r3, #18
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	4a17      	ldr	r2, [pc, #92]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002274:	5cd3      	ldrb	r3, [r2, r3]
 8002276:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d010      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	0c5b      	lsrs	r3, r3, #17
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800228e:	5cd3      	ldrb	r3, [r2, r3]
 8002290:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <HAL_RCC_GetSysClockFreq+0x98>)
 8002296:	fb03 f202 	mul.w	r2, r3, r2
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	e004      	b.n	80022ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a0c      	ldr	r2, [pc, #48]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022a8:	fb02 f303 	mul.w	r3, r2, r3
 80022ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	613b      	str	r3, [r7, #16]
      break;
 80022b2:	e002      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_RCC_GetSysClockFreq+0x98>)
 80022b6:	613b      	str	r3, [r7, #16]
      break;
 80022b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ba:	693b      	ldr	r3, [r7, #16]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	371c      	adds	r7, #28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000
 80022cc:	007a1200 	.word	0x007a1200
 80022d0:	08003f88 	.word	0x08003f88
 80022d4:	08003f98 	.word	0x08003f98
 80022d8:	003d0900 	.word	0x003d0900

080022dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e0:	4b02      	ldr	r3, [pc, #8]	; (80022ec <HAL_RCC_GetHCLKFreq+0x10>)
 80022e2:	681b      	ldr	r3, [r3, #0]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	20000000 	.word	0x20000000

080022f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022f4:	f7ff fff2 	bl	80022dc <HAL_RCC_GetHCLKFreq>
 80022f8:	4602      	mov	r2, r0
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	0a1b      	lsrs	r3, r3, #8
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	4903      	ldr	r1, [pc, #12]	; (8002314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002306:	5ccb      	ldrb	r3, [r1, r3]
 8002308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800230c:	4618      	mov	r0, r3
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40021000 	.word	0x40021000
 8002314:	08003f80 	.word	0x08003f80

08002318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800231c:	f7ff ffde 	bl	80022dc <HAL_RCC_GetHCLKFreq>
 8002320:	4602      	mov	r2, r0
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	0adb      	lsrs	r3, r3, #11
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	4903      	ldr	r1, [pc, #12]	; (800233c <HAL_RCC_GetPCLK2Freq+0x24>)
 800232e:	5ccb      	ldrb	r3, [r1, r3]
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000
 800233c:	08003f80 	.word	0x08003f80

08002340 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002348:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <RCC_Delay+0x34>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <RCC_Delay+0x38>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	0a5b      	lsrs	r3, r3, #9
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800235c:	bf00      	nop
  }
  while (Delay --);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1e5a      	subs	r2, r3, #1
 8002362:	60fa      	str	r2, [r7, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f9      	bne.n	800235c <RCC_Delay+0x1c>
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr
 8002374:	20000000 	.word	0x20000000
 8002378:	10624dd3 	.word	0x10624dd3

0800237c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e041      	b.n	8002412 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fe ff1e 	bl	80011e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3304      	adds	r3, #4
 80023b8:	4619      	mov	r1, r3
 80023ba:	4610      	mov	r0, r2
 80023bc:	f000 f940 	bl	8002640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d001      	beq.n	8002434 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e032      	b.n	800249a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a18      	ldr	r2, [pc, #96]	; (80024a4 <HAL_TIM_Base_Start+0x88>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d00e      	beq.n	8002464 <HAL_TIM_Base_Start+0x48>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244e:	d009      	beq.n	8002464 <HAL_TIM_Base_Start+0x48>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <HAL_TIM_Base_Start+0x8c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d004      	beq.n	8002464 <HAL_TIM_Base_Start+0x48>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a13      	ldr	r2, [pc, #76]	; (80024ac <HAL_TIM_Base_Start+0x90>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d111      	bne.n	8002488 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b06      	cmp	r3, #6
 8002474:	d010      	beq.n	8002498 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0201 	orr.w	r2, r2, #1
 8002484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002486:	e007      	b.n	8002498 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr
 80024a4:	40012c00 	.word	0x40012c00
 80024a8:	40000400 	.word	0x40000400
 80024ac:	40000800 	.word	0x40000800

080024b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_TIM_ConfigClockSource+0x1c>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e0b4      	b.n	8002636 <HAL_TIM_ConfigClockSource+0x186>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002504:	d03e      	beq.n	8002584 <HAL_TIM_ConfigClockSource+0xd4>
 8002506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800250a:	f200 8087 	bhi.w	800261c <HAL_TIM_ConfigClockSource+0x16c>
 800250e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002512:	f000 8086 	beq.w	8002622 <HAL_TIM_ConfigClockSource+0x172>
 8002516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251a:	d87f      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 800251c:	2b70      	cmp	r3, #112	; 0x70
 800251e:	d01a      	beq.n	8002556 <HAL_TIM_ConfigClockSource+0xa6>
 8002520:	2b70      	cmp	r3, #112	; 0x70
 8002522:	d87b      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 8002524:	2b60      	cmp	r3, #96	; 0x60
 8002526:	d050      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0x11a>
 8002528:	2b60      	cmp	r3, #96	; 0x60
 800252a:	d877      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 800252c:	2b50      	cmp	r3, #80	; 0x50
 800252e:	d03c      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0xfa>
 8002530:	2b50      	cmp	r3, #80	; 0x50
 8002532:	d873      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 8002534:	2b40      	cmp	r3, #64	; 0x40
 8002536:	d058      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0x13a>
 8002538:	2b40      	cmp	r3, #64	; 0x40
 800253a:	d86f      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 800253c:	2b30      	cmp	r3, #48	; 0x30
 800253e:	d064      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x15a>
 8002540:	2b30      	cmp	r3, #48	; 0x30
 8002542:	d86b      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 8002544:	2b20      	cmp	r3, #32
 8002546:	d060      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x15a>
 8002548:	2b20      	cmp	r3, #32
 800254a:	d867      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 800254c:	2b00      	cmp	r3, #0
 800254e:	d05c      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x15a>
 8002550:	2b10      	cmp	r3, #16
 8002552:	d05a      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x15a>
 8002554:	e062      	b.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002566:	f000 f944 	bl	80027f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002578:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	609a      	str	r2, [r3, #8]
      break;
 8002582:	e04f      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002594:	f000 f92d 	bl	80027f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025a6:	609a      	str	r2, [r3, #8]
      break;
 80025a8:	e03c      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b6:	461a      	mov	r2, r3
 80025b8:	f000 f8a4 	bl	8002704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2150      	movs	r1, #80	; 0x50
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 f8fb 	bl	80027be <TIM_ITRx_SetConfig>
      break;
 80025c8:	e02c      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025d6:	461a      	mov	r2, r3
 80025d8:	f000 f8c2 	bl	8002760 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2160      	movs	r1, #96	; 0x60
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 f8eb 	bl	80027be <TIM_ITRx_SetConfig>
      break;
 80025e8:	e01c      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025f6:	461a      	mov	r2, r3
 80025f8:	f000 f884 	bl	8002704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2140      	movs	r1, #64	; 0x40
 8002602:	4618      	mov	r0, r3
 8002604:	f000 f8db 	bl	80027be <TIM_ITRx_SetConfig>
      break;
 8002608:	e00c      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4619      	mov	r1, r3
 8002614:	4610      	mov	r0, r2
 8002616:	f000 f8d2 	bl	80027be <TIM_ITRx_SetConfig>
      break;
 800261a:	e003      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
      break;
 8002620:	e000      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002622:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002634:	7bfb      	ldrb	r3, [r7, #15]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a29      	ldr	r2, [pc, #164]	; (80026f8 <TIM_Base_SetConfig+0xb8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d00b      	beq.n	8002670 <TIM_Base_SetConfig+0x30>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265e:	d007      	beq.n	8002670 <TIM_Base_SetConfig+0x30>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a26      	ldr	r2, [pc, #152]	; (80026fc <TIM_Base_SetConfig+0xbc>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d003      	beq.n	8002670 <TIM_Base_SetConfig+0x30>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a25      	ldr	r2, [pc, #148]	; (8002700 <TIM_Base_SetConfig+0xc0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d108      	bne.n	8002682 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a1c      	ldr	r2, [pc, #112]	; (80026f8 <TIM_Base_SetConfig+0xb8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00b      	beq.n	80026a2 <TIM_Base_SetConfig+0x62>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002690:	d007      	beq.n	80026a2 <TIM_Base_SetConfig+0x62>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a19      	ldr	r2, [pc, #100]	; (80026fc <TIM_Base_SetConfig+0xbc>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d003      	beq.n	80026a2 <TIM_Base_SetConfig+0x62>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a18      	ldr	r2, [pc, #96]	; (8002700 <TIM_Base_SetConfig+0xc0>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d108      	bne.n	80026b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	4313      	orrs	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a07      	ldr	r2, [pc, #28]	; (80026f8 <TIM_Base_SetConfig+0xb8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d103      	bne.n	80026e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	615a      	str	r2, [r3, #20]
}
 80026ee:	bf00      	nop
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	40012c00 	.word	0x40012c00
 80026fc:	40000400 	.word	0x40000400
 8002700:	40000800 	.word	0x40000800

08002704 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	f023 0201 	bic.w	r2, r3, #1
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800272e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f023 030a 	bic.w	r3, r3, #10
 8002740:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4313      	orrs	r3, r2
 8002748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	621a      	str	r2, [r3, #32]
}
 8002756:	bf00      	nop
 8002758:	371c      	adds	r7, #28
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	f023 0210 	bic.w	r2, r3, #16
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800278a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	031b      	lsls	r3, r3, #12
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800279c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	621a      	str	r2, [r3, #32]
}
 80027b4:	bf00      	nop
 80027b6:	371c      	adds	r7, #28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027be:	b480      	push	{r7}
 80027c0:	b085      	sub	sp, #20
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4313      	orrs	r3, r2
 80027dc:	f043 0307 	orr.w	r3, r3, #7
 80027e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	609a      	str	r2, [r3, #8]
}
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b087      	sub	sp, #28
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800280c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	021a      	lsls	r2, r3, #8
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	431a      	orrs	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	4313      	orrs	r3, r2
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	609a      	str	r2, [r3, #8]
}
 8002826:	bf00      	nop
 8002828:	371c      	adds	r7, #28
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002844:	2302      	movs	r3, #2
 8002846:	e046      	b.n	80028d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4313      	orrs	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a16      	ldr	r2, [pc, #88]	; (80028e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d00e      	beq.n	80028aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002894:	d009      	beq.n	80028aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a12      	ldr	r2, [pc, #72]	; (80028e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d004      	beq.n	80028aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a10      	ldr	r2, [pc, #64]	; (80028e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d10c      	bne.n	80028c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	40012c00 	.word	0x40012c00
 80028e4:	40000400 	.word	0x40000400
 80028e8:	40000800 	.word	0x40000800

080028ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e042      	b.n	8002984 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d106      	bne.n	8002918 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7fe fcae 	bl	8001274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2224      	movs	r2, #36	; 0x24
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800292e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 fdcd 	bl	80034d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002944:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002954:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002964:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2220      	movs	r2, #32
 8002970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08a      	sub	sp, #40	; 0x28
 8002990:	af02      	add	r7, sp, #8
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	4613      	mov	r3, r2
 800299a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	d16d      	bne.n	8002a88 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <HAL_UART_Transmit+0x2c>
 80029b2:	88fb      	ldrh	r3, [r7, #6]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e066      	b.n	8002a8a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2221      	movs	r2, #33	; 0x21
 80029c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ca:	f7fe fd25 	bl	8001418 <HAL_GetTick>
 80029ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	88fa      	ldrh	r2, [r7, #6]
 80029d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	88fa      	ldrh	r2, [r7, #6]
 80029da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e4:	d108      	bne.n	80029f8 <HAL_UART_Transmit+0x6c>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d104      	bne.n	80029f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	61bb      	str	r3, [r7, #24]
 80029f6:	e003      	b.n	8002a00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a00:	e02a      	b.n	8002a58 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2180      	movs	r1, #128	; 0x80
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 fb1d 	bl	800304c <UART_WaitOnFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e036      	b.n	8002a8a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10b      	bne.n	8002a3a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	3302      	adds	r3, #2
 8002a36:	61bb      	str	r3, [r7, #24]
 8002a38:	e007      	b.n	8002a4a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	781a      	ldrb	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	3301      	adds	r3, #1
 8002a48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1cf      	bne.n	8002a02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2140      	movs	r1, #64	; 0x40
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 faed 	bl	800304c <UART_WaitOnFlagUntilTimeout>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e006      	b.n	8002a8a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	e000      	b.n	8002a8a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002a88:	2302      	movs	r3, #2
  }
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3720      	adds	r7, #32
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	d112      	bne.n	8002ad2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <HAL_UART_Receive_IT+0x26>
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e00b      	b.n	8002ad4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 fb2d 	bl	8003128 <UART_Start_Receive_IT>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	e000      	b.n	8002ad4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002ad2:	2302      	movs	r3, #2
  }
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b0ba      	sub	sp, #232	; 0xe8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002b1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10f      	bne.n	8002b42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <HAL_UART_IRQHandler+0x66>
 8002b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fc0a 	bl	8003354 <UART_Receive_IT>
      return;
 8002b40:	e25b      	b.n	8002ffa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 80de 	beq.w	8002d08 <HAL_UART_IRQHandler+0x22c>
 8002b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d106      	bne.n	8002b66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 80d1 	beq.w	8002d08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_UART_IRQHandler+0xae>
 8002b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	f043 0201 	orr.w	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00b      	beq.n	8002bae <HAL_UART_IRQHandler+0xd2>
 8002b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba6:	f043 0202 	orr.w	r2, r3, #2
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00b      	beq.n	8002bd2 <HAL_UART_IRQHandler+0xf6>
 8002bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	f043 0204 	orr.w	r2, r3, #4
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d011      	beq.n	8002c02 <HAL_UART_IRQHandler+0x126>
 8002bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d105      	bne.n	8002bf6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	f043 0208 	orr.w	r2, r3, #8
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 81f2 	beq.w	8002ff0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_UART_IRQHandler+0x14e>
 8002c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 fb95 	bl	8003354 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf14      	ite	ne
 8002c38:	2301      	movne	r3, #1
 8002c3a:	2300      	moveq	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d103      	bne.n	8002c56 <HAL_UART_IRQHandler+0x17a>
 8002c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d04f      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fa9f 	bl	800319a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d041      	beq.n	8002cee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3314      	adds	r3, #20
 8002c70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c78:	e853 3f00 	ldrex	r3, [r3]
 8002c7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3314      	adds	r3, #20
 8002c92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ca2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ca6:	e841 2300 	strex	r3, r2, [r1]
 8002caa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002cae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1d9      	bne.n	8002c6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d013      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc2:	4a7e      	ldr	r2, [pc, #504]	; (8002ebc <HAL_UART_IRQHandler+0x3e0>)
 8002cc4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe fd1a 	bl	8001704 <HAL_DMA_Abort_IT>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d016      	beq.n	8002d04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce4:	e00e      	b.n	8002d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f99c 	bl	8003024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cec:	e00a      	b.n	8002d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f998 	bl	8003024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf4:	e006      	b.n	8002d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f994 	bl	8003024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002d02:	e175      	b.n	8002ff0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d04:	bf00      	nop
    return;
 8002d06:	e173      	b.n	8002ff0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	f040 814f 	bne.w	8002fb0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d16:	f003 0310 	and.w	r3, r3, #16
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 8148 	beq.w	8002fb0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 8141 	beq.w	8002fb0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 80b6 	beq.w	8002ec0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 8145 	beq.w	8002ff4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d72:	429a      	cmp	r2, r3
 8002d74:	f080 813e 	bcs.w	8002ff4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	2b20      	cmp	r3, #32
 8002d88:	f000 8088 	beq.w	8002e9c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	330c      	adds	r3, #12
 8002d92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d9a:	e853 3f00 	ldrex	r3, [r3]
 8002d9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002da2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002da6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002daa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	330c      	adds	r3, #12
 8002db4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002db8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002dc4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002dc8:	e841 2300 	strex	r3, r2, [r1]
 8002dcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002dd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1d9      	bne.n	8002d8c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3314      	adds	r3, #20
 8002dde:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002de2:	e853 3f00 	ldrex	r3, [r3]
 8002de6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002de8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dea:	f023 0301 	bic.w	r3, r3, #1
 8002dee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3314      	adds	r3, #20
 8002df8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002dfc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e00:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e02:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e04:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e08:	e841 2300 	strex	r3, r2, [r1]
 8002e0c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1e1      	bne.n	8002dd8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	3314      	adds	r3, #20
 8002e1a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e1e:	e853 3f00 	ldrex	r3, [r3]
 8002e22:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	3314      	adds	r3, #20
 8002e34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e38:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e40:	e841 2300 	strex	r3, r2, [r1]
 8002e44:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1e3      	bne.n	8002e14 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	330c      	adds	r3, #12
 8002e60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e64:	e853 3f00 	ldrex	r3, [r3]
 8002e68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e6c:	f023 0310 	bic.w	r3, r3, #16
 8002e70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	330c      	adds	r3, #12
 8002e7a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e80:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e86:	e841 2300 	strex	r3, r2, [r1]
 8002e8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1e3      	bne.n	8002e5a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe fbf9 	bl	800168e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f8bf 	bl	8003036 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002eb8:	e09c      	b.n	8002ff4 <HAL_UART_IRQHandler+0x518>
 8002eba:	bf00      	nop
 8002ebc:	0800325f 	.word	0x0800325f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 808e 	beq.w	8002ff8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002edc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 8089 	beq.w	8002ff8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	330c      	adds	r3, #12
 8002eec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef0:	e853 3f00 	ldrex	r3, [r3]
 8002ef4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002efc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	330c      	adds	r3, #12
 8002f06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002f0a:	647a      	str	r2, [r7, #68]	; 0x44
 8002f0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f12:	e841 2300 	strex	r3, r2, [r1]
 8002f16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1e3      	bne.n	8002ee6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	3314      	adds	r3, #20
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	e853 3f00 	ldrex	r3, [r3]
 8002f2c:	623b      	str	r3, [r7, #32]
   return(result);
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	f023 0301 	bic.w	r3, r3, #1
 8002f34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3314      	adds	r3, #20
 8002f3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f42:	633a      	str	r2, [r7, #48]	; 0x30
 8002f44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f4a:	e841 2300 	strex	r3, r2, [r1]
 8002f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1e3      	bne.n	8002f1e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	330c      	adds	r3, #12
 8002f6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	e853 3f00 	ldrex	r3, [r3]
 8002f72:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f023 0310 	bic.w	r3, r3, #16
 8002f7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	330c      	adds	r3, #12
 8002f84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f88:	61fa      	str	r2, [r7, #28]
 8002f8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8c:	69b9      	ldr	r1, [r7, #24]
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	e841 2300 	strex	r3, r2, [r1]
 8002f94:	617b      	str	r3, [r7, #20]
   return(result);
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1e3      	bne.n	8002f64 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fa2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f844 	bl	8003036 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fae:	e023      	b.n	8002ff8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d009      	beq.n	8002fd0 <HAL_UART_IRQHandler+0x4f4>
 8002fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f95c 	bl	8003286 <UART_Transmit_IT>
    return;
 8002fce:	e014      	b.n	8002ffa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00e      	beq.n	8002ffa <HAL_UART_IRQHandler+0x51e>
 8002fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f99b 	bl	8003324 <UART_EndTransmit_IT>
    return;
 8002fee:	e004      	b.n	8002ffa <HAL_UART_IRQHandler+0x51e>
    return;
 8002ff0:	bf00      	nop
 8002ff2:	e002      	b.n	8002ffa <HAL_UART_IRQHandler+0x51e>
      return;
 8002ff4:	bf00      	nop
 8002ff6:	e000      	b.n	8002ffa <HAL_UART_IRQHandler+0x51e>
      return;
 8002ff8:	bf00      	nop
  }
}
 8002ffa:	37e8      	adds	r7, #232	; 0xe8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr

08003012 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr

08003036 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	460b      	mov	r3, r1
 8003040:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b090      	sub	sp, #64	; 0x40
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800305c:	e050      	b.n	8003100 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800305e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d04c      	beq.n	8003100 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003068:	2b00      	cmp	r3, #0
 800306a:	d007      	beq.n	800307c <UART_WaitOnFlagUntilTimeout+0x30>
 800306c:	f7fe f9d4 	bl	8001418 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003078:	429a      	cmp	r2, r3
 800307a:	d241      	bcs.n	8003100 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	330c      	adds	r3, #12
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	e853 3f00 	ldrex	r3, [r3]
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	330c      	adds	r3, #12
 800309a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800309c:	637a      	str	r2, [r7, #52]	; 0x34
 800309e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030a4:	e841 2300 	strex	r3, r2, [r1]
 80030a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1e5      	bne.n	800307c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3314      	adds	r3, #20
 80030b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	e853 3f00 	ldrex	r3, [r3]
 80030be:	613b      	str	r3, [r7, #16]
   return(result);
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f023 0301 	bic.w	r3, r3, #1
 80030c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	3314      	adds	r3, #20
 80030ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030d0:	623a      	str	r2, [r7, #32]
 80030d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d4:	69f9      	ldr	r1, [r7, #28]
 80030d6:	6a3a      	ldr	r2, [r7, #32]
 80030d8:	e841 2300 	strex	r3, r2, [r1]
 80030dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1e5      	bne.n	80030b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e00f      	b.n	8003120 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	4013      	ands	r3, r2
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	429a      	cmp	r2, r3
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	461a      	mov	r2, r3
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	429a      	cmp	r2, r3
 800311c:	d09f      	beq.n	800305e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3740      	adds	r7, #64	; 0x40
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	4613      	mov	r3, r2
 8003134:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	88fa      	ldrh	r2, [r7, #6]
 8003140:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	88fa      	ldrh	r2, [r7, #6]
 8003146:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2222      	movs	r2, #34	; 0x22
 8003152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d007      	beq.n	800316e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800316c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695a      	ldr	r2, [r3, #20]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 0201 	orr.w	r2, r2, #1
 800317c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f042 0220 	orr.w	r2, r2, #32
 800318c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800319a:	b480      	push	{r7}
 800319c:	b095      	sub	sp, #84	; 0x54
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	330c      	adds	r3, #12
 80031a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ac:	e853 3f00 	ldrex	r3, [r3]
 80031b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80031b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	330c      	adds	r3, #12
 80031c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031c2:	643a      	str	r2, [r7, #64]	; 0x40
 80031c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80031c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031ca:	e841 2300 	strex	r3, r2, [r1]
 80031ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1e5      	bne.n	80031a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3314      	adds	r3, #20
 80031dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	e853 3f00 	ldrex	r3, [r3]
 80031e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	f023 0301 	bic.w	r3, r3, #1
 80031ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3314      	adds	r3, #20
 80031f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031fe:	e841 2300 	strex	r3, r2, [r1]
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1e5      	bne.n	80031d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	2b01      	cmp	r3, #1
 8003210:	d119      	bne.n	8003246 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	330c      	adds	r3, #12
 8003218:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	e853 3f00 	ldrex	r3, [r3]
 8003220:	60bb      	str	r3, [r7, #8]
   return(result);
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f023 0310 	bic.w	r3, r3, #16
 8003228:	647b      	str	r3, [r7, #68]	; 0x44
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	330c      	adds	r3, #12
 8003230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003232:	61ba      	str	r2, [r7, #24]
 8003234:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003236:	6979      	ldr	r1, [r7, #20]
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	e841 2300 	strex	r3, r2, [r1]
 800323e:	613b      	str	r3, [r7, #16]
   return(result);
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1e5      	bne.n	8003212 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003254:	bf00      	nop
 8003256:	3754      	adds	r7, #84	; 0x54
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr

0800325e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b084      	sub	sp, #16
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f7ff fed3 	bl	8003024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800327e:	bf00      	nop
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003286:	b480      	push	{r7}
 8003288:	b085      	sub	sp, #20
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b21      	cmp	r3, #33	; 0x21
 8003298:	d13e      	bne.n	8003318 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a2:	d114      	bne.n	80032ce <UART_Transmit_IT+0x48>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d110      	bne.n	80032ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	1c9a      	adds	r2, r3, #2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	621a      	str	r2, [r3, #32]
 80032cc:	e008      	b.n	80032e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	1c59      	adds	r1, r3, #1
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6211      	str	r1, [r2, #32]
 80032d8:	781a      	ldrb	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	4619      	mov	r1, r3
 80032ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10f      	bne.n	8003314 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003302:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003312:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	e000      	b.n	800331a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003318:	2302      	movs	r3, #2
  }
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr

08003324 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800333a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff fe5b 	bl	8003000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08c      	sub	sp, #48	; 0x30
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b22      	cmp	r3, #34	; 0x22
 8003366:	f040 80ae 	bne.w	80034c6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003372:	d117      	bne.n	80033a4 <UART_Receive_IT+0x50>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d113      	bne.n	80033a4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800337c:	2300      	movs	r3, #0
 800337e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	b29b      	uxth	r3, r3
 800338e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003392:	b29a      	uxth	r2, r3
 8003394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003396:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339c:	1c9a      	adds	r2, r3, #2
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	629a      	str	r2, [r3, #40]	; 0x28
 80033a2:	e026      	b.n	80033f2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b6:	d007      	beq.n	80033c8 <UART_Receive_IT+0x74>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10a      	bne.n	80033d6 <UART_Receive_IT+0x82>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d106      	bne.n	80033d6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	e008      	b.n	80033e8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	1c5a      	adds	r2, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	4619      	mov	r1, r3
 8003400:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003402:	2b00      	cmp	r3, #0
 8003404:	d15d      	bne.n	80034c2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0220 	bic.w	r2, r2, #32
 8003414:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003424:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695a      	ldr	r2, [r3, #20]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0201 	bic.w	r2, r2, #1
 8003434:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003448:	2b01      	cmp	r3, #1
 800344a:	d135      	bne.n	80034b8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	330c      	adds	r3, #12
 8003458:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	e853 3f00 	ldrex	r3, [r3]
 8003460:	613b      	str	r3, [r7, #16]
   return(result);
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f023 0310 	bic.w	r3, r3, #16
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	330c      	adds	r3, #12
 8003470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003472:	623a      	str	r2, [r7, #32]
 8003474:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003476:	69f9      	ldr	r1, [r7, #28]
 8003478:	6a3a      	ldr	r2, [r7, #32]
 800347a:	e841 2300 	strex	r3, r2, [r1]
 800347e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1e5      	bne.n	8003452 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b10      	cmp	r3, #16
 8003492:	d10a      	bne.n	80034aa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003494:	2300      	movs	r3, #0
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034ae:	4619      	mov	r1, r3
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff fdc0 	bl	8003036 <HAL_UARTEx_RxEventCallback>
 80034b6:	e002      	b.n	80034be <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff fdaa 	bl	8003012 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	e002      	b.n	80034c8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	e000      	b.n	80034c8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80034c6:	2302      	movs	r3, #2
  }
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3730      	adds	r7, #48	; 0x30
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800350a:	f023 030c 	bic.w	r3, r3, #12
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6812      	ldr	r2, [r2, #0]
 8003512:	68b9      	ldr	r1, [r7, #8]
 8003514:	430b      	orrs	r3, r1
 8003516:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a2c      	ldr	r2, [pc, #176]	; (80035e4 <UART_SetConfig+0x114>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d103      	bne.n	8003540 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003538:	f7fe feee 	bl	8002318 <HAL_RCC_GetPCLK2Freq>
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	e002      	b.n	8003546 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003540:	f7fe fed6 	bl	80022f0 <HAL_RCC_GetPCLK1Freq>
 8003544:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	009a      	lsls	r2, r3, #2
 8003550:	441a      	add	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	fbb2 f3f3 	udiv	r3, r2, r3
 800355c:	4a22      	ldr	r2, [pc, #136]	; (80035e8 <UART_SetConfig+0x118>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	0119      	lsls	r1, r3, #4
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	009a      	lsls	r2, r3, #2
 8003570:	441a      	add	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	fbb2 f2f3 	udiv	r2, r2, r3
 800357c:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <UART_SetConfig+0x118>)
 800357e:	fba3 0302 	umull	r0, r3, r3, r2
 8003582:	095b      	lsrs	r3, r3, #5
 8003584:	2064      	movs	r0, #100	; 0x64
 8003586:	fb00 f303 	mul.w	r3, r0, r3
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	3332      	adds	r3, #50	; 0x32
 8003590:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <UART_SetConfig+0x118>)
 8003592:	fba2 2303 	umull	r2, r3, r2, r3
 8003596:	095b      	lsrs	r3, r3, #5
 8003598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800359c:	4419      	add	r1, r3
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	4613      	mov	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	009a      	lsls	r2, r3, #2
 80035a8:	441a      	add	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80035b4:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <UART_SetConfig+0x118>)
 80035b6:	fba3 0302 	umull	r0, r3, r3, r2
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	2064      	movs	r0, #100	; 0x64
 80035be:	fb00 f303 	mul.w	r3, r0, r3
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	3332      	adds	r3, #50	; 0x32
 80035c8:	4a07      	ldr	r2, [pc, #28]	; (80035e8 <UART_SetConfig+0x118>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	f003 020f 	and.w	r2, r3, #15
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	440a      	add	r2, r1
 80035da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035dc:	bf00      	nop
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40013800 	.word	0x40013800
 80035e8:	51eb851f 	.word	0x51eb851f

080035ec <siprintf>:
 80035ec:	b40e      	push	{r1, r2, r3}
 80035ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035f2:	b500      	push	{lr}
 80035f4:	b09c      	sub	sp, #112	; 0x70
 80035f6:	ab1d      	add	r3, sp, #116	; 0x74
 80035f8:	9002      	str	r0, [sp, #8]
 80035fa:	9006      	str	r0, [sp, #24]
 80035fc:	9107      	str	r1, [sp, #28]
 80035fe:	9104      	str	r1, [sp, #16]
 8003600:	4808      	ldr	r0, [pc, #32]	; (8003624 <siprintf+0x38>)
 8003602:	4909      	ldr	r1, [pc, #36]	; (8003628 <siprintf+0x3c>)
 8003604:	f853 2b04 	ldr.w	r2, [r3], #4
 8003608:	9105      	str	r1, [sp, #20]
 800360a:	6800      	ldr	r0, [r0, #0]
 800360c:	a902      	add	r1, sp, #8
 800360e:	9301      	str	r3, [sp, #4]
 8003610:	f000 f98e 	bl	8003930 <_svfiprintf_r>
 8003614:	2200      	movs	r2, #0
 8003616:	9b02      	ldr	r3, [sp, #8]
 8003618:	701a      	strb	r2, [r3, #0]
 800361a:	b01c      	add	sp, #112	; 0x70
 800361c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003620:	b003      	add	sp, #12
 8003622:	4770      	bx	lr
 8003624:	20000058 	.word	0x20000058
 8003628:	ffff0208 	.word	0xffff0208

0800362c <memset>:
 800362c:	4603      	mov	r3, r0
 800362e:	4402      	add	r2, r0
 8003630:	4293      	cmp	r3, r2
 8003632:	d100      	bne.n	8003636 <memset+0xa>
 8003634:	4770      	bx	lr
 8003636:	f803 1b01 	strb.w	r1, [r3], #1
 800363a:	e7f9      	b.n	8003630 <memset+0x4>

0800363c <__errno>:
 800363c:	4b01      	ldr	r3, [pc, #4]	; (8003644 <__errno+0x8>)
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	20000058 	.word	0x20000058

08003648 <__libc_init_array>:
 8003648:	b570      	push	{r4, r5, r6, lr}
 800364a:	2600      	movs	r6, #0
 800364c:	4d0c      	ldr	r5, [pc, #48]	; (8003680 <__libc_init_array+0x38>)
 800364e:	4c0d      	ldr	r4, [pc, #52]	; (8003684 <__libc_init_array+0x3c>)
 8003650:	1b64      	subs	r4, r4, r5
 8003652:	10a4      	asrs	r4, r4, #2
 8003654:	42a6      	cmp	r6, r4
 8003656:	d109      	bne.n	800366c <__libc_init_array+0x24>
 8003658:	f000 fc7a 	bl	8003f50 <_init>
 800365c:	2600      	movs	r6, #0
 800365e:	4d0a      	ldr	r5, [pc, #40]	; (8003688 <__libc_init_array+0x40>)
 8003660:	4c0a      	ldr	r4, [pc, #40]	; (800368c <__libc_init_array+0x44>)
 8003662:	1b64      	subs	r4, r4, r5
 8003664:	10a4      	asrs	r4, r4, #2
 8003666:	42a6      	cmp	r6, r4
 8003668:	d105      	bne.n	8003676 <__libc_init_array+0x2e>
 800366a:	bd70      	pop	{r4, r5, r6, pc}
 800366c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003670:	4798      	blx	r3
 8003672:	3601      	adds	r6, #1
 8003674:	e7ee      	b.n	8003654 <__libc_init_array+0xc>
 8003676:	f855 3b04 	ldr.w	r3, [r5], #4
 800367a:	4798      	blx	r3
 800367c:	3601      	adds	r6, #1
 800367e:	e7f2      	b.n	8003666 <__libc_init_array+0x1e>
 8003680:	08003fd0 	.word	0x08003fd0
 8003684:	08003fd0 	.word	0x08003fd0
 8003688:	08003fd0 	.word	0x08003fd0
 800368c:	08003fd4 	.word	0x08003fd4

08003690 <__retarget_lock_acquire_recursive>:
 8003690:	4770      	bx	lr

08003692 <__retarget_lock_release_recursive>:
 8003692:	4770      	bx	lr

08003694 <_free_r>:
 8003694:	b538      	push	{r3, r4, r5, lr}
 8003696:	4605      	mov	r5, r0
 8003698:	2900      	cmp	r1, #0
 800369a:	d040      	beq.n	800371e <_free_r+0x8a>
 800369c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036a0:	1f0c      	subs	r4, r1, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	bfb8      	it	lt
 80036a6:	18e4      	addlt	r4, r4, r3
 80036a8:	f000 f8dc 	bl	8003864 <__malloc_lock>
 80036ac:	4a1c      	ldr	r2, [pc, #112]	; (8003720 <_free_r+0x8c>)
 80036ae:	6813      	ldr	r3, [r2, #0]
 80036b0:	b933      	cbnz	r3, 80036c0 <_free_r+0x2c>
 80036b2:	6063      	str	r3, [r4, #4]
 80036b4:	6014      	str	r4, [r2, #0]
 80036b6:	4628      	mov	r0, r5
 80036b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036bc:	f000 b8d8 	b.w	8003870 <__malloc_unlock>
 80036c0:	42a3      	cmp	r3, r4
 80036c2:	d908      	bls.n	80036d6 <_free_r+0x42>
 80036c4:	6820      	ldr	r0, [r4, #0]
 80036c6:	1821      	adds	r1, r4, r0
 80036c8:	428b      	cmp	r3, r1
 80036ca:	bf01      	itttt	eq
 80036cc:	6819      	ldreq	r1, [r3, #0]
 80036ce:	685b      	ldreq	r3, [r3, #4]
 80036d0:	1809      	addeq	r1, r1, r0
 80036d2:	6021      	streq	r1, [r4, #0]
 80036d4:	e7ed      	b.n	80036b2 <_free_r+0x1e>
 80036d6:	461a      	mov	r2, r3
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	b10b      	cbz	r3, 80036e0 <_free_r+0x4c>
 80036dc:	42a3      	cmp	r3, r4
 80036de:	d9fa      	bls.n	80036d6 <_free_r+0x42>
 80036e0:	6811      	ldr	r1, [r2, #0]
 80036e2:	1850      	adds	r0, r2, r1
 80036e4:	42a0      	cmp	r0, r4
 80036e6:	d10b      	bne.n	8003700 <_free_r+0x6c>
 80036e8:	6820      	ldr	r0, [r4, #0]
 80036ea:	4401      	add	r1, r0
 80036ec:	1850      	adds	r0, r2, r1
 80036ee:	4283      	cmp	r3, r0
 80036f0:	6011      	str	r1, [r2, #0]
 80036f2:	d1e0      	bne.n	80036b6 <_free_r+0x22>
 80036f4:	6818      	ldr	r0, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4408      	add	r0, r1
 80036fa:	6010      	str	r0, [r2, #0]
 80036fc:	6053      	str	r3, [r2, #4]
 80036fe:	e7da      	b.n	80036b6 <_free_r+0x22>
 8003700:	d902      	bls.n	8003708 <_free_r+0x74>
 8003702:	230c      	movs	r3, #12
 8003704:	602b      	str	r3, [r5, #0]
 8003706:	e7d6      	b.n	80036b6 <_free_r+0x22>
 8003708:	6820      	ldr	r0, [r4, #0]
 800370a:	1821      	adds	r1, r4, r0
 800370c:	428b      	cmp	r3, r1
 800370e:	bf01      	itttt	eq
 8003710:	6819      	ldreq	r1, [r3, #0]
 8003712:	685b      	ldreq	r3, [r3, #4]
 8003714:	1809      	addeq	r1, r1, r0
 8003716:	6021      	streq	r1, [r4, #0]
 8003718:	6063      	str	r3, [r4, #4]
 800371a:	6054      	str	r4, [r2, #4]
 800371c:	e7cb      	b.n	80036b6 <_free_r+0x22>
 800371e:	bd38      	pop	{r3, r4, r5, pc}
 8003720:	200002ec 	.word	0x200002ec

08003724 <sbrk_aligned>:
 8003724:	b570      	push	{r4, r5, r6, lr}
 8003726:	4e0e      	ldr	r6, [pc, #56]	; (8003760 <sbrk_aligned+0x3c>)
 8003728:	460c      	mov	r4, r1
 800372a:	6831      	ldr	r1, [r6, #0]
 800372c:	4605      	mov	r5, r0
 800372e:	b911      	cbnz	r1, 8003736 <sbrk_aligned+0x12>
 8003730:	f000 fbaa 	bl	8003e88 <_sbrk_r>
 8003734:	6030      	str	r0, [r6, #0]
 8003736:	4621      	mov	r1, r4
 8003738:	4628      	mov	r0, r5
 800373a:	f000 fba5 	bl	8003e88 <_sbrk_r>
 800373e:	1c43      	adds	r3, r0, #1
 8003740:	d00a      	beq.n	8003758 <sbrk_aligned+0x34>
 8003742:	1cc4      	adds	r4, r0, #3
 8003744:	f024 0403 	bic.w	r4, r4, #3
 8003748:	42a0      	cmp	r0, r4
 800374a:	d007      	beq.n	800375c <sbrk_aligned+0x38>
 800374c:	1a21      	subs	r1, r4, r0
 800374e:	4628      	mov	r0, r5
 8003750:	f000 fb9a 	bl	8003e88 <_sbrk_r>
 8003754:	3001      	adds	r0, #1
 8003756:	d101      	bne.n	800375c <sbrk_aligned+0x38>
 8003758:	f04f 34ff 	mov.w	r4, #4294967295
 800375c:	4620      	mov	r0, r4
 800375e:	bd70      	pop	{r4, r5, r6, pc}
 8003760:	200002f0 	.word	0x200002f0

08003764 <_malloc_r>:
 8003764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003768:	1ccd      	adds	r5, r1, #3
 800376a:	f025 0503 	bic.w	r5, r5, #3
 800376e:	3508      	adds	r5, #8
 8003770:	2d0c      	cmp	r5, #12
 8003772:	bf38      	it	cc
 8003774:	250c      	movcc	r5, #12
 8003776:	2d00      	cmp	r5, #0
 8003778:	4607      	mov	r7, r0
 800377a:	db01      	blt.n	8003780 <_malloc_r+0x1c>
 800377c:	42a9      	cmp	r1, r5
 800377e:	d905      	bls.n	800378c <_malloc_r+0x28>
 8003780:	230c      	movs	r3, #12
 8003782:	2600      	movs	r6, #0
 8003784:	603b      	str	r3, [r7, #0]
 8003786:	4630      	mov	r0, r6
 8003788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800378c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003860 <_malloc_r+0xfc>
 8003790:	f000 f868 	bl	8003864 <__malloc_lock>
 8003794:	f8d8 3000 	ldr.w	r3, [r8]
 8003798:	461c      	mov	r4, r3
 800379a:	bb5c      	cbnz	r4, 80037f4 <_malloc_r+0x90>
 800379c:	4629      	mov	r1, r5
 800379e:	4638      	mov	r0, r7
 80037a0:	f7ff ffc0 	bl	8003724 <sbrk_aligned>
 80037a4:	1c43      	adds	r3, r0, #1
 80037a6:	4604      	mov	r4, r0
 80037a8:	d155      	bne.n	8003856 <_malloc_r+0xf2>
 80037aa:	f8d8 4000 	ldr.w	r4, [r8]
 80037ae:	4626      	mov	r6, r4
 80037b0:	2e00      	cmp	r6, #0
 80037b2:	d145      	bne.n	8003840 <_malloc_r+0xdc>
 80037b4:	2c00      	cmp	r4, #0
 80037b6:	d048      	beq.n	800384a <_malloc_r+0xe6>
 80037b8:	6823      	ldr	r3, [r4, #0]
 80037ba:	4631      	mov	r1, r6
 80037bc:	4638      	mov	r0, r7
 80037be:	eb04 0903 	add.w	r9, r4, r3
 80037c2:	f000 fb61 	bl	8003e88 <_sbrk_r>
 80037c6:	4581      	cmp	r9, r0
 80037c8:	d13f      	bne.n	800384a <_malloc_r+0xe6>
 80037ca:	6821      	ldr	r1, [r4, #0]
 80037cc:	4638      	mov	r0, r7
 80037ce:	1a6d      	subs	r5, r5, r1
 80037d0:	4629      	mov	r1, r5
 80037d2:	f7ff ffa7 	bl	8003724 <sbrk_aligned>
 80037d6:	3001      	adds	r0, #1
 80037d8:	d037      	beq.n	800384a <_malloc_r+0xe6>
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	442b      	add	r3, r5
 80037de:	6023      	str	r3, [r4, #0]
 80037e0:	f8d8 3000 	ldr.w	r3, [r8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d038      	beq.n	800385a <_malloc_r+0xf6>
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	42a2      	cmp	r2, r4
 80037ec:	d12b      	bne.n	8003846 <_malloc_r+0xe2>
 80037ee:	2200      	movs	r2, #0
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	e00f      	b.n	8003814 <_malloc_r+0xb0>
 80037f4:	6822      	ldr	r2, [r4, #0]
 80037f6:	1b52      	subs	r2, r2, r5
 80037f8:	d41f      	bmi.n	800383a <_malloc_r+0xd6>
 80037fa:	2a0b      	cmp	r2, #11
 80037fc:	d917      	bls.n	800382e <_malloc_r+0xca>
 80037fe:	1961      	adds	r1, r4, r5
 8003800:	42a3      	cmp	r3, r4
 8003802:	6025      	str	r5, [r4, #0]
 8003804:	bf18      	it	ne
 8003806:	6059      	strne	r1, [r3, #4]
 8003808:	6863      	ldr	r3, [r4, #4]
 800380a:	bf08      	it	eq
 800380c:	f8c8 1000 	streq.w	r1, [r8]
 8003810:	5162      	str	r2, [r4, r5]
 8003812:	604b      	str	r3, [r1, #4]
 8003814:	4638      	mov	r0, r7
 8003816:	f104 060b 	add.w	r6, r4, #11
 800381a:	f000 f829 	bl	8003870 <__malloc_unlock>
 800381e:	f026 0607 	bic.w	r6, r6, #7
 8003822:	1d23      	adds	r3, r4, #4
 8003824:	1af2      	subs	r2, r6, r3
 8003826:	d0ae      	beq.n	8003786 <_malloc_r+0x22>
 8003828:	1b9b      	subs	r3, r3, r6
 800382a:	50a3      	str	r3, [r4, r2]
 800382c:	e7ab      	b.n	8003786 <_malloc_r+0x22>
 800382e:	42a3      	cmp	r3, r4
 8003830:	6862      	ldr	r2, [r4, #4]
 8003832:	d1dd      	bne.n	80037f0 <_malloc_r+0x8c>
 8003834:	f8c8 2000 	str.w	r2, [r8]
 8003838:	e7ec      	b.n	8003814 <_malloc_r+0xb0>
 800383a:	4623      	mov	r3, r4
 800383c:	6864      	ldr	r4, [r4, #4]
 800383e:	e7ac      	b.n	800379a <_malloc_r+0x36>
 8003840:	4634      	mov	r4, r6
 8003842:	6876      	ldr	r6, [r6, #4]
 8003844:	e7b4      	b.n	80037b0 <_malloc_r+0x4c>
 8003846:	4613      	mov	r3, r2
 8003848:	e7cc      	b.n	80037e4 <_malloc_r+0x80>
 800384a:	230c      	movs	r3, #12
 800384c:	4638      	mov	r0, r7
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	f000 f80e 	bl	8003870 <__malloc_unlock>
 8003854:	e797      	b.n	8003786 <_malloc_r+0x22>
 8003856:	6025      	str	r5, [r4, #0]
 8003858:	e7dc      	b.n	8003814 <_malloc_r+0xb0>
 800385a:	605b      	str	r3, [r3, #4]
 800385c:	deff      	udf	#255	; 0xff
 800385e:	bf00      	nop
 8003860:	200002ec 	.word	0x200002ec

08003864 <__malloc_lock>:
 8003864:	4801      	ldr	r0, [pc, #4]	; (800386c <__malloc_lock+0x8>)
 8003866:	f7ff bf13 	b.w	8003690 <__retarget_lock_acquire_recursive>
 800386a:	bf00      	nop
 800386c:	200002e8 	.word	0x200002e8

08003870 <__malloc_unlock>:
 8003870:	4801      	ldr	r0, [pc, #4]	; (8003878 <__malloc_unlock+0x8>)
 8003872:	f7ff bf0e 	b.w	8003692 <__retarget_lock_release_recursive>
 8003876:	bf00      	nop
 8003878:	200002e8 	.word	0x200002e8

0800387c <__ssputs_r>:
 800387c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003880:	461f      	mov	r7, r3
 8003882:	688e      	ldr	r6, [r1, #8]
 8003884:	4682      	mov	sl, r0
 8003886:	42be      	cmp	r6, r7
 8003888:	460c      	mov	r4, r1
 800388a:	4690      	mov	r8, r2
 800388c:	680b      	ldr	r3, [r1, #0]
 800388e:	d82c      	bhi.n	80038ea <__ssputs_r+0x6e>
 8003890:	898a      	ldrh	r2, [r1, #12]
 8003892:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003896:	d026      	beq.n	80038e6 <__ssputs_r+0x6a>
 8003898:	6965      	ldr	r5, [r4, #20]
 800389a:	6909      	ldr	r1, [r1, #16]
 800389c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038a0:	eba3 0901 	sub.w	r9, r3, r1
 80038a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038a8:	1c7b      	adds	r3, r7, #1
 80038aa:	444b      	add	r3, r9
 80038ac:	106d      	asrs	r5, r5, #1
 80038ae:	429d      	cmp	r5, r3
 80038b0:	bf38      	it	cc
 80038b2:	461d      	movcc	r5, r3
 80038b4:	0553      	lsls	r3, r2, #21
 80038b6:	d527      	bpl.n	8003908 <__ssputs_r+0x8c>
 80038b8:	4629      	mov	r1, r5
 80038ba:	f7ff ff53 	bl	8003764 <_malloc_r>
 80038be:	4606      	mov	r6, r0
 80038c0:	b360      	cbz	r0, 800391c <__ssputs_r+0xa0>
 80038c2:	464a      	mov	r2, r9
 80038c4:	6921      	ldr	r1, [r4, #16]
 80038c6:	f000 fafd 	bl	8003ec4 <memcpy>
 80038ca:	89a3      	ldrh	r3, [r4, #12]
 80038cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d4:	81a3      	strh	r3, [r4, #12]
 80038d6:	6126      	str	r6, [r4, #16]
 80038d8:	444e      	add	r6, r9
 80038da:	6026      	str	r6, [r4, #0]
 80038dc:	463e      	mov	r6, r7
 80038de:	6165      	str	r5, [r4, #20]
 80038e0:	eba5 0509 	sub.w	r5, r5, r9
 80038e4:	60a5      	str	r5, [r4, #8]
 80038e6:	42be      	cmp	r6, r7
 80038e8:	d900      	bls.n	80038ec <__ssputs_r+0x70>
 80038ea:	463e      	mov	r6, r7
 80038ec:	4632      	mov	r2, r6
 80038ee:	4641      	mov	r1, r8
 80038f0:	6820      	ldr	r0, [r4, #0]
 80038f2:	f000 faaf 	bl	8003e54 <memmove>
 80038f6:	2000      	movs	r0, #0
 80038f8:	68a3      	ldr	r3, [r4, #8]
 80038fa:	1b9b      	subs	r3, r3, r6
 80038fc:	60a3      	str	r3, [r4, #8]
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	4433      	add	r3, r6
 8003902:	6023      	str	r3, [r4, #0]
 8003904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003908:	462a      	mov	r2, r5
 800390a:	f000 fae9 	bl	8003ee0 <_realloc_r>
 800390e:	4606      	mov	r6, r0
 8003910:	2800      	cmp	r0, #0
 8003912:	d1e0      	bne.n	80038d6 <__ssputs_r+0x5a>
 8003914:	4650      	mov	r0, sl
 8003916:	6921      	ldr	r1, [r4, #16]
 8003918:	f7ff febc 	bl	8003694 <_free_r>
 800391c:	230c      	movs	r3, #12
 800391e:	f8ca 3000 	str.w	r3, [sl]
 8003922:	89a3      	ldrh	r3, [r4, #12]
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800392c:	81a3      	strh	r3, [r4, #12]
 800392e:	e7e9      	b.n	8003904 <__ssputs_r+0x88>

08003930 <_svfiprintf_r>:
 8003930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003934:	4698      	mov	r8, r3
 8003936:	898b      	ldrh	r3, [r1, #12]
 8003938:	4607      	mov	r7, r0
 800393a:	061b      	lsls	r3, r3, #24
 800393c:	460d      	mov	r5, r1
 800393e:	4614      	mov	r4, r2
 8003940:	b09d      	sub	sp, #116	; 0x74
 8003942:	d50e      	bpl.n	8003962 <_svfiprintf_r+0x32>
 8003944:	690b      	ldr	r3, [r1, #16]
 8003946:	b963      	cbnz	r3, 8003962 <_svfiprintf_r+0x32>
 8003948:	2140      	movs	r1, #64	; 0x40
 800394a:	f7ff ff0b 	bl	8003764 <_malloc_r>
 800394e:	6028      	str	r0, [r5, #0]
 8003950:	6128      	str	r0, [r5, #16]
 8003952:	b920      	cbnz	r0, 800395e <_svfiprintf_r+0x2e>
 8003954:	230c      	movs	r3, #12
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	f04f 30ff 	mov.w	r0, #4294967295
 800395c:	e0d0      	b.n	8003b00 <_svfiprintf_r+0x1d0>
 800395e:	2340      	movs	r3, #64	; 0x40
 8003960:	616b      	str	r3, [r5, #20]
 8003962:	2300      	movs	r3, #0
 8003964:	9309      	str	r3, [sp, #36]	; 0x24
 8003966:	2320      	movs	r3, #32
 8003968:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800396c:	2330      	movs	r3, #48	; 0x30
 800396e:	f04f 0901 	mov.w	r9, #1
 8003972:	f8cd 800c 	str.w	r8, [sp, #12]
 8003976:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003b18 <_svfiprintf_r+0x1e8>
 800397a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800397e:	4623      	mov	r3, r4
 8003980:	469a      	mov	sl, r3
 8003982:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003986:	b10a      	cbz	r2, 800398c <_svfiprintf_r+0x5c>
 8003988:	2a25      	cmp	r2, #37	; 0x25
 800398a:	d1f9      	bne.n	8003980 <_svfiprintf_r+0x50>
 800398c:	ebba 0b04 	subs.w	fp, sl, r4
 8003990:	d00b      	beq.n	80039aa <_svfiprintf_r+0x7a>
 8003992:	465b      	mov	r3, fp
 8003994:	4622      	mov	r2, r4
 8003996:	4629      	mov	r1, r5
 8003998:	4638      	mov	r0, r7
 800399a:	f7ff ff6f 	bl	800387c <__ssputs_r>
 800399e:	3001      	adds	r0, #1
 80039a0:	f000 80a9 	beq.w	8003af6 <_svfiprintf_r+0x1c6>
 80039a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039a6:	445a      	add	r2, fp
 80039a8:	9209      	str	r2, [sp, #36]	; 0x24
 80039aa:	f89a 3000 	ldrb.w	r3, [sl]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 80a1 	beq.w	8003af6 <_svfiprintf_r+0x1c6>
 80039b4:	2300      	movs	r3, #0
 80039b6:	f04f 32ff 	mov.w	r2, #4294967295
 80039ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039be:	f10a 0a01 	add.w	sl, sl, #1
 80039c2:	9304      	str	r3, [sp, #16]
 80039c4:	9307      	str	r3, [sp, #28]
 80039c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039ca:	931a      	str	r3, [sp, #104]	; 0x68
 80039cc:	4654      	mov	r4, sl
 80039ce:	2205      	movs	r2, #5
 80039d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039d4:	4850      	ldr	r0, [pc, #320]	; (8003b18 <_svfiprintf_r+0x1e8>)
 80039d6:	f000 fa67 	bl	8003ea8 <memchr>
 80039da:	9a04      	ldr	r2, [sp, #16]
 80039dc:	b9d8      	cbnz	r0, 8003a16 <_svfiprintf_r+0xe6>
 80039de:	06d0      	lsls	r0, r2, #27
 80039e0:	bf44      	itt	mi
 80039e2:	2320      	movmi	r3, #32
 80039e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039e8:	0711      	lsls	r1, r2, #28
 80039ea:	bf44      	itt	mi
 80039ec:	232b      	movmi	r3, #43	; 0x2b
 80039ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039f2:	f89a 3000 	ldrb.w	r3, [sl]
 80039f6:	2b2a      	cmp	r3, #42	; 0x2a
 80039f8:	d015      	beq.n	8003a26 <_svfiprintf_r+0xf6>
 80039fa:	4654      	mov	r4, sl
 80039fc:	2000      	movs	r0, #0
 80039fe:	f04f 0c0a 	mov.w	ip, #10
 8003a02:	9a07      	ldr	r2, [sp, #28]
 8003a04:	4621      	mov	r1, r4
 8003a06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a0a:	3b30      	subs	r3, #48	; 0x30
 8003a0c:	2b09      	cmp	r3, #9
 8003a0e:	d94d      	bls.n	8003aac <_svfiprintf_r+0x17c>
 8003a10:	b1b0      	cbz	r0, 8003a40 <_svfiprintf_r+0x110>
 8003a12:	9207      	str	r2, [sp, #28]
 8003a14:	e014      	b.n	8003a40 <_svfiprintf_r+0x110>
 8003a16:	eba0 0308 	sub.w	r3, r0, r8
 8003a1a:	fa09 f303 	lsl.w	r3, r9, r3
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	46a2      	mov	sl, r4
 8003a22:	9304      	str	r3, [sp, #16]
 8003a24:	e7d2      	b.n	80039cc <_svfiprintf_r+0x9c>
 8003a26:	9b03      	ldr	r3, [sp, #12]
 8003a28:	1d19      	adds	r1, r3, #4
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	9103      	str	r1, [sp, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bfbb      	ittet	lt
 8003a32:	425b      	neglt	r3, r3
 8003a34:	f042 0202 	orrlt.w	r2, r2, #2
 8003a38:	9307      	strge	r3, [sp, #28]
 8003a3a:	9307      	strlt	r3, [sp, #28]
 8003a3c:	bfb8      	it	lt
 8003a3e:	9204      	strlt	r2, [sp, #16]
 8003a40:	7823      	ldrb	r3, [r4, #0]
 8003a42:	2b2e      	cmp	r3, #46	; 0x2e
 8003a44:	d10c      	bne.n	8003a60 <_svfiprintf_r+0x130>
 8003a46:	7863      	ldrb	r3, [r4, #1]
 8003a48:	2b2a      	cmp	r3, #42	; 0x2a
 8003a4a:	d134      	bne.n	8003ab6 <_svfiprintf_r+0x186>
 8003a4c:	9b03      	ldr	r3, [sp, #12]
 8003a4e:	3402      	adds	r4, #2
 8003a50:	1d1a      	adds	r2, r3, #4
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	9203      	str	r2, [sp, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	bfb8      	it	lt
 8003a5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a5e:	9305      	str	r3, [sp, #20]
 8003a60:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003b1c <_svfiprintf_r+0x1ec>
 8003a64:	2203      	movs	r2, #3
 8003a66:	4650      	mov	r0, sl
 8003a68:	7821      	ldrb	r1, [r4, #0]
 8003a6a:	f000 fa1d 	bl	8003ea8 <memchr>
 8003a6e:	b138      	cbz	r0, 8003a80 <_svfiprintf_r+0x150>
 8003a70:	2240      	movs	r2, #64	; 0x40
 8003a72:	9b04      	ldr	r3, [sp, #16]
 8003a74:	eba0 000a 	sub.w	r0, r0, sl
 8003a78:	4082      	lsls	r2, r0
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	3401      	adds	r4, #1
 8003a7e:	9304      	str	r3, [sp, #16]
 8003a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a84:	2206      	movs	r2, #6
 8003a86:	4826      	ldr	r0, [pc, #152]	; (8003b20 <_svfiprintf_r+0x1f0>)
 8003a88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a8c:	f000 fa0c 	bl	8003ea8 <memchr>
 8003a90:	2800      	cmp	r0, #0
 8003a92:	d038      	beq.n	8003b06 <_svfiprintf_r+0x1d6>
 8003a94:	4b23      	ldr	r3, [pc, #140]	; (8003b24 <_svfiprintf_r+0x1f4>)
 8003a96:	bb1b      	cbnz	r3, 8003ae0 <_svfiprintf_r+0x1b0>
 8003a98:	9b03      	ldr	r3, [sp, #12]
 8003a9a:	3307      	adds	r3, #7
 8003a9c:	f023 0307 	bic.w	r3, r3, #7
 8003aa0:	3308      	adds	r3, #8
 8003aa2:	9303      	str	r3, [sp, #12]
 8003aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aa6:	4433      	add	r3, r6
 8003aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8003aaa:	e768      	b.n	800397e <_svfiprintf_r+0x4e>
 8003aac:	460c      	mov	r4, r1
 8003aae:	2001      	movs	r0, #1
 8003ab0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ab4:	e7a6      	b.n	8003a04 <_svfiprintf_r+0xd4>
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	f04f 0c0a 	mov.w	ip, #10
 8003abc:	4619      	mov	r1, r3
 8003abe:	3401      	adds	r4, #1
 8003ac0:	9305      	str	r3, [sp, #20]
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ac8:	3a30      	subs	r2, #48	; 0x30
 8003aca:	2a09      	cmp	r2, #9
 8003acc:	d903      	bls.n	8003ad6 <_svfiprintf_r+0x1a6>
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0c6      	beq.n	8003a60 <_svfiprintf_r+0x130>
 8003ad2:	9105      	str	r1, [sp, #20]
 8003ad4:	e7c4      	b.n	8003a60 <_svfiprintf_r+0x130>
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	2301      	movs	r3, #1
 8003ada:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ade:	e7f0      	b.n	8003ac2 <_svfiprintf_r+0x192>
 8003ae0:	ab03      	add	r3, sp, #12
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	462a      	mov	r2, r5
 8003ae6:	4638      	mov	r0, r7
 8003ae8:	4b0f      	ldr	r3, [pc, #60]	; (8003b28 <_svfiprintf_r+0x1f8>)
 8003aea:	a904      	add	r1, sp, #16
 8003aec:	f3af 8000 	nop.w
 8003af0:	1c42      	adds	r2, r0, #1
 8003af2:	4606      	mov	r6, r0
 8003af4:	d1d6      	bne.n	8003aa4 <_svfiprintf_r+0x174>
 8003af6:	89ab      	ldrh	r3, [r5, #12]
 8003af8:	065b      	lsls	r3, r3, #25
 8003afa:	f53f af2d 	bmi.w	8003958 <_svfiprintf_r+0x28>
 8003afe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b00:	b01d      	add	sp, #116	; 0x74
 8003b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b06:	ab03      	add	r3, sp, #12
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	462a      	mov	r2, r5
 8003b0c:	4638      	mov	r0, r7
 8003b0e:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <_svfiprintf_r+0x1f8>)
 8003b10:	a904      	add	r1, sp, #16
 8003b12:	f000 f87d 	bl	8003c10 <_printf_i>
 8003b16:	e7eb      	b.n	8003af0 <_svfiprintf_r+0x1c0>
 8003b18:	08003f9a 	.word	0x08003f9a
 8003b1c:	08003fa0 	.word	0x08003fa0
 8003b20:	08003fa4 	.word	0x08003fa4
 8003b24:	00000000 	.word	0x00000000
 8003b28:	0800387d 	.word	0x0800387d

08003b2c <_printf_common>:
 8003b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b30:	4616      	mov	r6, r2
 8003b32:	4699      	mov	r9, r3
 8003b34:	688a      	ldr	r2, [r1, #8]
 8003b36:	690b      	ldr	r3, [r1, #16]
 8003b38:	4607      	mov	r7, r0
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	bfb8      	it	lt
 8003b3e:	4613      	movlt	r3, r2
 8003b40:	6033      	str	r3, [r6, #0]
 8003b42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b46:	460c      	mov	r4, r1
 8003b48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b4c:	b10a      	cbz	r2, 8003b52 <_printf_common+0x26>
 8003b4e:	3301      	adds	r3, #1
 8003b50:	6033      	str	r3, [r6, #0]
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	0699      	lsls	r1, r3, #26
 8003b56:	bf42      	ittt	mi
 8003b58:	6833      	ldrmi	r3, [r6, #0]
 8003b5a:	3302      	addmi	r3, #2
 8003b5c:	6033      	strmi	r3, [r6, #0]
 8003b5e:	6825      	ldr	r5, [r4, #0]
 8003b60:	f015 0506 	ands.w	r5, r5, #6
 8003b64:	d106      	bne.n	8003b74 <_printf_common+0x48>
 8003b66:	f104 0a19 	add.w	sl, r4, #25
 8003b6a:	68e3      	ldr	r3, [r4, #12]
 8003b6c:	6832      	ldr	r2, [r6, #0]
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	42ab      	cmp	r3, r5
 8003b72:	dc2b      	bgt.n	8003bcc <_printf_common+0xa0>
 8003b74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b78:	1e13      	subs	r3, r2, #0
 8003b7a:	6822      	ldr	r2, [r4, #0]
 8003b7c:	bf18      	it	ne
 8003b7e:	2301      	movne	r3, #1
 8003b80:	0692      	lsls	r2, r2, #26
 8003b82:	d430      	bmi.n	8003be6 <_printf_common+0xba>
 8003b84:	4649      	mov	r1, r9
 8003b86:	4638      	mov	r0, r7
 8003b88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b8c:	47c0      	blx	r8
 8003b8e:	3001      	adds	r0, #1
 8003b90:	d023      	beq.n	8003bda <_printf_common+0xae>
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	6922      	ldr	r2, [r4, #16]
 8003b96:	f003 0306 	and.w	r3, r3, #6
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	bf14      	ite	ne
 8003b9e:	2500      	movne	r5, #0
 8003ba0:	6833      	ldreq	r3, [r6, #0]
 8003ba2:	f04f 0600 	mov.w	r6, #0
 8003ba6:	bf08      	it	eq
 8003ba8:	68e5      	ldreq	r5, [r4, #12]
 8003baa:	f104 041a 	add.w	r4, r4, #26
 8003bae:	bf08      	it	eq
 8003bb0:	1aed      	subeq	r5, r5, r3
 8003bb2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003bb6:	bf08      	it	eq
 8003bb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	bfc4      	itt	gt
 8003bc0:	1a9b      	subgt	r3, r3, r2
 8003bc2:	18ed      	addgt	r5, r5, r3
 8003bc4:	42b5      	cmp	r5, r6
 8003bc6:	d11a      	bne.n	8003bfe <_printf_common+0xd2>
 8003bc8:	2000      	movs	r0, #0
 8003bca:	e008      	b.n	8003bde <_printf_common+0xb2>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	4652      	mov	r2, sl
 8003bd0:	4649      	mov	r1, r9
 8003bd2:	4638      	mov	r0, r7
 8003bd4:	47c0      	blx	r8
 8003bd6:	3001      	adds	r0, #1
 8003bd8:	d103      	bne.n	8003be2 <_printf_common+0xb6>
 8003bda:	f04f 30ff 	mov.w	r0, #4294967295
 8003bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003be2:	3501      	adds	r5, #1
 8003be4:	e7c1      	b.n	8003b6a <_printf_common+0x3e>
 8003be6:	2030      	movs	r0, #48	; 0x30
 8003be8:	18e1      	adds	r1, r4, r3
 8003bea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bf4:	4422      	add	r2, r4
 8003bf6:	3302      	adds	r3, #2
 8003bf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bfc:	e7c2      	b.n	8003b84 <_printf_common+0x58>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	4622      	mov	r2, r4
 8003c02:	4649      	mov	r1, r9
 8003c04:	4638      	mov	r0, r7
 8003c06:	47c0      	blx	r8
 8003c08:	3001      	adds	r0, #1
 8003c0a:	d0e6      	beq.n	8003bda <_printf_common+0xae>
 8003c0c:	3601      	adds	r6, #1
 8003c0e:	e7d9      	b.n	8003bc4 <_printf_common+0x98>

08003c10 <_printf_i>:
 8003c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c14:	7e0f      	ldrb	r7, [r1, #24]
 8003c16:	4691      	mov	r9, r2
 8003c18:	2f78      	cmp	r7, #120	; 0x78
 8003c1a:	4680      	mov	r8, r0
 8003c1c:	460c      	mov	r4, r1
 8003c1e:	469a      	mov	sl, r3
 8003c20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c26:	d807      	bhi.n	8003c38 <_printf_i+0x28>
 8003c28:	2f62      	cmp	r7, #98	; 0x62
 8003c2a:	d80a      	bhi.n	8003c42 <_printf_i+0x32>
 8003c2c:	2f00      	cmp	r7, #0
 8003c2e:	f000 80d5 	beq.w	8003ddc <_printf_i+0x1cc>
 8003c32:	2f58      	cmp	r7, #88	; 0x58
 8003c34:	f000 80c1 	beq.w	8003dba <_printf_i+0x1aa>
 8003c38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c40:	e03a      	b.n	8003cb8 <_printf_i+0xa8>
 8003c42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c46:	2b15      	cmp	r3, #21
 8003c48:	d8f6      	bhi.n	8003c38 <_printf_i+0x28>
 8003c4a:	a101      	add	r1, pc, #4	; (adr r1, 8003c50 <_printf_i+0x40>)
 8003c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c50:	08003ca9 	.word	0x08003ca9
 8003c54:	08003cbd 	.word	0x08003cbd
 8003c58:	08003c39 	.word	0x08003c39
 8003c5c:	08003c39 	.word	0x08003c39
 8003c60:	08003c39 	.word	0x08003c39
 8003c64:	08003c39 	.word	0x08003c39
 8003c68:	08003cbd 	.word	0x08003cbd
 8003c6c:	08003c39 	.word	0x08003c39
 8003c70:	08003c39 	.word	0x08003c39
 8003c74:	08003c39 	.word	0x08003c39
 8003c78:	08003c39 	.word	0x08003c39
 8003c7c:	08003dc3 	.word	0x08003dc3
 8003c80:	08003ce9 	.word	0x08003ce9
 8003c84:	08003d7d 	.word	0x08003d7d
 8003c88:	08003c39 	.word	0x08003c39
 8003c8c:	08003c39 	.word	0x08003c39
 8003c90:	08003de5 	.word	0x08003de5
 8003c94:	08003c39 	.word	0x08003c39
 8003c98:	08003ce9 	.word	0x08003ce9
 8003c9c:	08003c39 	.word	0x08003c39
 8003ca0:	08003c39 	.word	0x08003c39
 8003ca4:	08003d85 	.word	0x08003d85
 8003ca8:	682b      	ldr	r3, [r5, #0]
 8003caa:	1d1a      	adds	r2, r3, #4
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	602a      	str	r2, [r5, #0]
 8003cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0a0      	b.n	8003dfe <_printf_i+0x1ee>
 8003cbc:	6820      	ldr	r0, [r4, #0]
 8003cbe:	682b      	ldr	r3, [r5, #0]
 8003cc0:	0607      	lsls	r7, r0, #24
 8003cc2:	f103 0104 	add.w	r1, r3, #4
 8003cc6:	6029      	str	r1, [r5, #0]
 8003cc8:	d501      	bpl.n	8003cce <_printf_i+0xbe>
 8003cca:	681e      	ldr	r6, [r3, #0]
 8003ccc:	e003      	b.n	8003cd6 <_printf_i+0xc6>
 8003cce:	0646      	lsls	r6, r0, #25
 8003cd0:	d5fb      	bpl.n	8003cca <_printf_i+0xba>
 8003cd2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003cd6:	2e00      	cmp	r6, #0
 8003cd8:	da03      	bge.n	8003ce2 <_printf_i+0xd2>
 8003cda:	232d      	movs	r3, #45	; 0x2d
 8003cdc:	4276      	negs	r6, r6
 8003cde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ce2:	230a      	movs	r3, #10
 8003ce4:	4859      	ldr	r0, [pc, #356]	; (8003e4c <_printf_i+0x23c>)
 8003ce6:	e012      	b.n	8003d0e <_printf_i+0xfe>
 8003ce8:	682b      	ldr	r3, [r5, #0]
 8003cea:	6820      	ldr	r0, [r4, #0]
 8003cec:	1d19      	adds	r1, r3, #4
 8003cee:	6029      	str	r1, [r5, #0]
 8003cf0:	0605      	lsls	r5, r0, #24
 8003cf2:	d501      	bpl.n	8003cf8 <_printf_i+0xe8>
 8003cf4:	681e      	ldr	r6, [r3, #0]
 8003cf6:	e002      	b.n	8003cfe <_printf_i+0xee>
 8003cf8:	0641      	lsls	r1, r0, #25
 8003cfa:	d5fb      	bpl.n	8003cf4 <_printf_i+0xe4>
 8003cfc:	881e      	ldrh	r6, [r3, #0]
 8003cfe:	2f6f      	cmp	r7, #111	; 0x6f
 8003d00:	bf0c      	ite	eq
 8003d02:	2308      	moveq	r3, #8
 8003d04:	230a      	movne	r3, #10
 8003d06:	4851      	ldr	r0, [pc, #324]	; (8003e4c <_printf_i+0x23c>)
 8003d08:	2100      	movs	r1, #0
 8003d0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d0e:	6865      	ldr	r5, [r4, #4]
 8003d10:	2d00      	cmp	r5, #0
 8003d12:	bfa8      	it	ge
 8003d14:	6821      	ldrge	r1, [r4, #0]
 8003d16:	60a5      	str	r5, [r4, #8]
 8003d18:	bfa4      	itt	ge
 8003d1a:	f021 0104 	bicge.w	r1, r1, #4
 8003d1e:	6021      	strge	r1, [r4, #0]
 8003d20:	b90e      	cbnz	r6, 8003d26 <_printf_i+0x116>
 8003d22:	2d00      	cmp	r5, #0
 8003d24:	d04b      	beq.n	8003dbe <_printf_i+0x1ae>
 8003d26:	4615      	mov	r5, r2
 8003d28:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d2c:	fb03 6711 	mls	r7, r3, r1, r6
 8003d30:	5dc7      	ldrb	r7, [r0, r7]
 8003d32:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d36:	4637      	mov	r7, r6
 8003d38:	42bb      	cmp	r3, r7
 8003d3a:	460e      	mov	r6, r1
 8003d3c:	d9f4      	bls.n	8003d28 <_printf_i+0x118>
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d10b      	bne.n	8003d5a <_printf_i+0x14a>
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	07de      	lsls	r6, r3, #31
 8003d46:	d508      	bpl.n	8003d5a <_printf_i+0x14a>
 8003d48:	6923      	ldr	r3, [r4, #16]
 8003d4a:	6861      	ldr	r1, [r4, #4]
 8003d4c:	4299      	cmp	r1, r3
 8003d4e:	bfde      	ittt	le
 8003d50:	2330      	movle	r3, #48	; 0x30
 8003d52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d56:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d5a:	1b52      	subs	r2, r2, r5
 8003d5c:	6122      	str	r2, [r4, #16]
 8003d5e:	464b      	mov	r3, r9
 8003d60:	4621      	mov	r1, r4
 8003d62:	4640      	mov	r0, r8
 8003d64:	f8cd a000 	str.w	sl, [sp]
 8003d68:	aa03      	add	r2, sp, #12
 8003d6a:	f7ff fedf 	bl	8003b2c <_printf_common>
 8003d6e:	3001      	adds	r0, #1
 8003d70:	d14a      	bne.n	8003e08 <_printf_i+0x1f8>
 8003d72:	f04f 30ff 	mov.w	r0, #4294967295
 8003d76:	b004      	add	sp, #16
 8003d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	f043 0320 	orr.w	r3, r3, #32
 8003d82:	6023      	str	r3, [r4, #0]
 8003d84:	2778      	movs	r7, #120	; 0x78
 8003d86:	4832      	ldr	r0, [pc, #200]	; (8003e50 <_printf_i+0x240>)
 8003d88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	6829      	ldr	r1, [r5, #0]
 8003d90:	061f      	lsls	r7, r3, #24
 8003d92:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d96:	d402      	bmi.n	8003d9e <_printf_i+0x18e>
 8003d98:	065f      	lsls	r7, r3, #25
 8003d9a:	bf48      	it	mi
 8003d9c:	b2b6      	uxthmi	r6, r6
 8003d9e:	07df      	lsls	r7, r3, #31
 8003da0:	bf48      	it	mi
 8003da2:	f043 0320 	orrmi.w	r3, r3, #32
 8003da6:	6029      	str	r1, [r5, #0]
 8003da8:	bf48      	it	mi
 8003daa:	6023      	strmi	r3, [r4, #0]
 8003dac:	b91e      	cbnz	r6, 8003db6 <_printf_i+0x1a6>
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	f023 0320 	bic.w	r3, r3, #32
 8003db4:	6023      	str	r3, [r4, #0]
 8003db6:	2310      	movs	r3, #16
 8003db8:	e7a6      	b.n	8003d08 <_printf_i+0xf8>
 8003dba:	4824      	ldr	r0, [pc, #144]	; (8003e4c <_printf_i+0x23c>)
 8003dbc:	e7e4      	b.n	8003d88 <_printf_i+0x178>
 8003dbe:	4615      	mov	r5, r2
 8003dc0:	e7bd      	b.n	8003d3e <_printf_i+0x12e>
 8003dc2:	682b      	ldr	r3, [r5, #0]
 8003dc4:	6826      	ldr	r6, [r4, #0]
 8003dc6:	1d18      	adds	r0, r3, #4
 8003dc8:	6961      	ldr	r1, [r4, #20]
 8003dca:	6028      	str	r0, [r5, #0]
 8003dcc:	0635      	lsls	r5, r6, #24
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	d501      	bpl.n	8003dd6 <_printf_i+0x1c6>
 8003dd2:	6019      	str	r1, [r3, #0]
 8003dd4:	e002      	b.n	8003ddc <_printf_i+0x1cc>
 8003dd6:	0670      	lsls	r0, r6, #25
 8003dd8:	d5fb      	bpl.n	8003dd2 <_printf_i+0x1c2>
 8003dda:	8019      	strh	r1, [r3, #0]
 8003ddc:	2300      	movs	r3, #0
 8003dde:	4615      	mov	r5, r2
 8003de0:	6123      	str	r3, [r4, #16]
 8003de2:	e7bc      	b.n	8003d5e <_printf_i+0x14e>
 8003de4:	682b      	ldr	r3, [r5, #0]
 8003de6:	2100      	movs	r1, #0
 8003de8:	1d1a      	adds	r2, r3, #4
 8003dea:	602a      	str	r2, [r5, #0]
 8003dec:	681d      	ldr	r5, [r3, #0]
 8003dee:	6862      	ldr	r2, [r4, #4]
 8003df0:	4628      	mov	r0, r5
 8003df2:	f000 f859 	bl	8003ea8 <memchr>
 8003df6:	b108      	cbz	r0, 8003dfc <_printf_i+0x1ec>
 8003df8:	1b40      	subs	r0, r0, r5
 8003dfa:	6060      	str	r0, [r4, #4]
 8003dfc:	6863      	ldr	r3, [r4, #4]
 8003dfe:	6123      	str	r3, [r4, #16]
 8003e00:	2300      	movs	r3, #0
 8003e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e06:	e7aa      	b.n	8003d5e <_printf_i+0x14e>
 8003e08:	462a      	mov	r2, r5
 8003e0a:	4649      	mov	r1, r9
 8003e0c:	4640      	mov	r0, r8
 8003e0e:	6923      	ldr	r3, [r4, #16]
 8003e10:	47d0      	blx	sl
 8003e12:	3001      	adds	r0, #1
 8003e14:	d0ad      	beq.n	8003d72 <_printf_i+0x162>
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	079b      	lsls	r3, r3, #30
 8003e1a:	d413      	bmi.n	8003e44 <_printf_i+0x234>
 8003e1c:	68e0      	ldr	r0, [r4, #12]
 8003e1e:	9b03      	ldr	r3, [sp, #12]
 8003e20:	4298      	cmp	r0, r3
 8003e22:	bfb8      	it	lt
 8003e24:	4618      	movlt	r0, r3
 8003e26:	e7a6      	b.n	8003d76 <_printf_i+0x166>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	4632      	mov	r2, r6
 8003e2c:	4649      	mov	r1, r9
 8003e2e:	4640      	mov	r0, r8
 8003e30:	47d0      	blx	sl
 8003e32:	3001      	adds	r0, #1
 8003e34:	d09d      	beq.n	8003d72 <_printf_i+0x162>
 8003e36:	3501      	adds	r5, #1
 8003e38:	68e3      	ldr	r3, [r4, #12]
 8003e3a:	9903      	ldr	r1, [sp, #12]
 8003e3c:	1a5b      	subs	r3, r3, r1
 8003e3e:	42ab      	cmp	r3, r5
 8003e40:	dcf2      	bgt.n	8003e28 <_printf_i+0x218>
 8003e42:	e7eb      	b.n	8003e1c <_printf_i+0x20c>
 8003e44:	2500      	movs	r5, #0
 8003e46:	f104 0619 	add.w	r6, r4, #25
 8003e4a:	e7f5      	b.n	8003e38 <_printf_i+0x228>
 8003e4c:	08003fab 	.word	0x08003fab
 8003e50:	08003fbc 	.word	0x08003fbc

08003e54 <memmove>:
 8003e54:	4288      	cmp	r0, r1
 8003e56:	b510      	push	{r4, lr}
 8003e58:	eb01 0402 	add.w	r4, r1, r2
 8003e5c:	d902      	bls.n	8003e64 <memmove+0x10>
 8003e5e:	4284      	cmp	r4, r0
 8003e60:	4623      	mov	r3, r4
 8003e62:	d807      	bhi.n	8003e74 <memmove+0x20>
 8003e64:	1e43      	subs	r3, r0, #1
 8003e66:	42a1      	cmp	r1, r4
 8003e68:	d008      	beq.n	8003e7c <memmove+0x28>
 8003e6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e72:	e7f8      	b.n	8003e66 <memmove+0x12>
 8003e74:	4601      	mov	r1, r0
 8003e76:	4402      	add	r2, r0
 8003e78:	428a      	cmp	r2, r1
 8003e7a:	d100      	bne.n	8003e7e <memmove+0x2a>
 8003e7c:	bd10      	pop	{r4, pc}
 8003e7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e86:	e7f7      	b.n	8003e78 <memmove+0x24>

08003e88 <_sbrk_r>:
 8003e88:	b538      	push	{r3, r4, r5, lr}
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	4d05      	ldr	r5, [pc, #20]	; (8003ea4 <_sbrk_r+0x1c>)
 8003e8e:	4604      	mov	r4, r0
 8003e90:	4608      	mov	r0, r1
 8003e92:	602b      	str	r3, [r5, #0]
 8003e94:	f7fd f91a 	bl	80010cc <_sbrk>
 8003e98:	1c43      	adds	r3, r0, #1
 8003e9a:	d102      	bne.n	8003ea2 <_sbrk_r+0x1a>
 8003e9c:	682b      	ldr	r3, [r5, #0]
 8003e9e:	b103      	cbz	r3, 8003ea2 <_sbrk_r+0x1a>
 8003ea0:	6023      	str	r3, [r4, #0]
 8003ea2:	bd38      	pop	{r3, r4, r5, pc}
 8003ea4:	200002e4 	.word	0x200002e4

08003ea8 <memchr>:
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	b510      	push	{r4, lr}
 8003eac:	b2c9      	uxtb	r1, r1
 8003eae:	4402      	add	r2, r0
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	d101      	bne.n	8003eba <memchr+0x12>
 8003eb6:	2000      	movs	r0, #0
 8003eb8:	e003      	b.n	8003ec2 <memchr+0x1a>
 8003eba:	7804      	ldrb	r4, [r0, #0]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	428c      	cmp	r4, r1
 8003ec0:	d1f6      	bne.n	8003eb0 <memchr+0x8>
 8003ec2:	bd10      	pop	{r4, pc}

08003ec4 <memcpy>:
 8003ec4:	440a      	add	r2, r1
 8003ec6:	4291      	cmp	r1, r2
 8003ec8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ecc:	d100      	bne.n	8003ed0 <memcpy+0xc>
 8003ece:	4770      	bx	lr
 8003ed0:	b510      	push	{r4, lr}
 8003ed2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ed6:	4291      	cmp	r1, r2
 8003ed8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003edc:	d1f9      	bne.n	8003ed2 <memcpy+0xe>
 8003ede:	bd10      	pop	{r4, pc}

08003ee0 <_realloc_r>:
 8003ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ee4:	4680      	mov	r8, r0
 8003ee6:	4614      	mov	r4, r2
 8003ee8:	460e      	mov	r6, r1
 8003eea:	b921      	cbnz	r1, 8003ef6 <_realloc_r+0x16>
 8003eec:	4611      	mov	r1, r2
 8003eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef2:	f7ff bc37 	b.w	8003764 <_malloc_r>
 8003ef6:	b92a      	cbnz	r2, 8003f04 <_realloc_r+0x24>
 8003ef8:	f7ff fbcc 	bl	8003694 <_free_r>
 8003efc:	4625      	mov	r5, r4
 8003efe:	4628      	mov	r0, r5
 8003f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f04:	f000 f81b 	bl	8003f3e <_malloc_usable_size_r>
 8003f08:	4284      	cmp	r4, r0
 8003f0a:	4607      	mov	r7, r0
 8003f0c:	d802      	bhi.n	8003f14 <_realloc_r+0x34>
 8003f0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003f12:	d812      	bhi.n	8003f3a <_realloc_r+0x5a>
 8003f14:	4621      	mov	r1, r4
 8003f16:	4640      	mov	r0, r8
 8003f18:	f7ff fc24 	bl	8003764 <_malloc_r>
 8003f1c:	4605      	mov	r5, r0
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	d0ed      	beq.n	8003efe <_realloc_r+0x1e>
 8003f22:	42bc      	cmp	r4, r7
 8003f24:	4622      	mov	r2, r4
 8003f26:	4631      	mov	r1, r6
 8003f28:	bf28      	it	cs
 8003f2a:	463a      	movcs	r2, r7
 8003f2c:	f7ff ffca 	bl	8003ec4 <memcpy>
 8003f30:	4631      	mov	r1, r6
 8003f32:	4640      	mov	r0, r8
 8003f34:	f7ff fbae 	bl	8003694 <_free_r>
 8003f38:	e7e1      	b.n	8003efe <_realloc_r+0x1e>
 8003f3a:	4635      	mov	r5, r6
 8003f3c:	e7df      	b.n	8003efe <_realloc_r+0x1e>

08003f3e <_malloc_usable_size_r>:
 8003f3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f42:	1f18      	subs	r0, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	bfbc      	itt	lt
 8003f48:	580b      	ldrlt	r3, [r1, r0]
 8003f4a:	18c0      	addlt	r0, r0, r3
 8003f4c:	4770      	bx	lr
	...

08003f50 <_init>:
 8003f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f52:	bf00      	nop
 8003f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f56:	bc08      	pop	{r3}
 8003f58:	469e      	mov	lr, r3
 8003f5a:	4770      	bx	lr

08003f5c <_fini>:
 8003f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5e:	bf00      	nop
 8003f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f62:	bc08      	pop	{r3}
 8003f64:	469e      	mov	lr, r3
 8003f66:	4770      	bx	lr
