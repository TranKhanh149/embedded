
donnhiem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004b00  08004b00  00014b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b70  08004b70  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08004b70  08004b70  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b70  08004b70  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b70  08004b70  00014b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b74  08004b74  00014b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  2000006c  08004be4  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08004be4  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dfff  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002836  00000000  00000000  0002e0d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e18  00000000  00000000  00030910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aea  00000000  00000000  00031728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018685  00000000  00000000  00032212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001208c  00000000  00000000  0004a897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008afd0  00000000  00000000  0005c923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f14  00000000  00000000  000e78f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000eb808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004ae8 	.word	0x08004ae8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08004ae8 	.word	0x08004ae8

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2uiz>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	d20e      	bcs.n	80004f2 <__aeabi_f2uiz+0x22>
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004d8:	d30b      	bcc.n	80004f2 <__aeabi_f2uiz+0x22>
 80004da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d409      	bmi.n	80004f8 <__aeabi_f2uiz+0x28>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004ec:	fa23 f002 	lsr.w	r0, r3, r2
 80004f0:	4770      	bx	lr
 80004f2:	f04f 0000 	mov.w	r0, #0
 80004f6:	4770      	bx	lr
 80004f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80004fc:	d101      	bne.n	8000502 <__aeabi_f2uiz+0x32>
 80004fe:	0242      	lsls	r2, r0, #9
 8000500:	d102      	bne.n	8000508 <__aeabi_f2uiz+0x38>
 8000502:	f04f 30ff 	mov.w	r0, #4294967295
 8000506:	4770      	bx	lr
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <tm1637_CLKhigh>:

extern uint32_t Timer1;
extern uint8_t CurrentDisplay[4];
extern uint8_t tm1637_Segments[8];
void tm1637_CLKhigh()
{																	  	//SCL high period
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);		  	//Setting SCL frequency
 8000514:	2201      	movs	r2, #1
 8000516:	2110      	movs	r1, #16
 8000518:	4807      	ldr	r0, [pc, #28]	; (8000538 <tm1637_CLKhigh+0x28>)
 800051a:	f001 ff2a 	bl	8002372 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800051e:	2201      	movs	r2, #1
 8000520:	2110      	movs	r1, #16
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <tm1637_CLKhigh+0x28>)
 8000524:	f001 ff25 	bl	8002372 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	2110      	movs	r1, #16
 800052c:	4802      	ldr	r0, [pc, #8]	; (8000538 <tm1637_CLKhigh+0x28>)
 800052e:	f001 ff20 	bl	8002372 <HAL_GPIO_WritePin>
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40010800 	.word	0x40010800

0800053c <tm1637_CLKlow>:
void tm1637_CLKlow()
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);		//SCL low period
 8000540:	2200      	movs	r2, #0
 8000542:	2110      	movs	r1, #16
 8000544:	4807      	ldr	r0, [pc, #28]	; (8000564 <tm1637_CLKlow+0x28>)
 8000546:	f001 ff14 	bl	8002372 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2110      	movs	r1, #16
 800054e:	4805      	ldr	r0, [pc, #20]	; (8000564 <tm1637_CLKlow+0x28>)
 8000550:	f001 ff0f 	bl	8002372 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2110      	movs	r1, #16
 8000558:	4802      	ldr	r0, [pc, #8]	; (8000564 <tm1637_CLKlow+0x28>)
 800055a:	f001 ff0a 	bl	8002372 <HAL_GPIO_WritePin>
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40010800 	.word	0x40010800

08000568 <tm1637_SDOhigh>:
void tm1637_SDOhigh()
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);			//SDO high period
 800056c:	2201      	movs	r2, #1
 800056e:	2120      	movs	r1, #32
 8000570:	4807      	ldr	r0, [pc, #28]	; (8000590 <tm1637_SDOhigh+0x28>)
 8000572:	f001 fefe 	bl	8002372 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000576:	2201      	movs	r2, #1
 8000578:	2120      	movs	r1, #32
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <tm1637_SDOhigh+0x28>)
 800057c:	f001 fef9 	bl	8002372 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	2120      	movs	r1, #32
 8000584:	4802      	ldr	r0, [pc, #8]	; (8000590 <tm1637_SDOhigh+0x28>)
 8000586:	f001 fef4 	bl	8002372 <HAL_GPIO_WritePin>
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40010800 	.word	0x40010800

08000594 <tm1637_SDOlow>:
void tm1637_SDOlow()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);			//SDO low period
 8000598:	2200      	movs	r2, #0
 800059a:	2120      	movs	r1, #32
 800059c:	4807      	ldr	r0, [pc, #28]	; (80005bc <tm1637_SDOlow+0x28>)
 800059e:	f001 fee8 	bl	8002372 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2120      	movs	r1, #32
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <tm1637_SDOlow+0x28>)
 80005a8:	f001 fee3 	bl	8002372 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2120      	movs	r1, #32
 80005b0:	4802      	ldr	r0, [pc, #8]	; (80005bc <tm1637_SDOlow+0x28>)
 80005b2:	f001 fede 	bl	8002372 <HAL_GPIO_WritePin>
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40010800 	.word	0x40010800

080005c0 <tm1637_StartPacket>:
void tm1637_StartPacket()												//Lower SDO line while CLK line is high
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	tm1637_CLKhigh();
 80005c4:	f7ff ffa4 	bl	8000510 <tm1637_CLKhigh>

	tm1637_SDOhigh();
 80005c8:	f7ff ffce 	bl	8000568 <tm1637_SDOhigh>
	tm1637_SDOlow();
 80005cc:	f7ff ffe2 	bl	8000594 <tm1637_SDOlow>

	tm1637_CLKlow();
 80005d0:	f7ff ffb4 	bl	800053c <tm1637_CLKlow>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <tm1637_EndPacket>:
void tm1637_EndPacket()													//SDO line is pulled high while SCL line is high
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	tm1637_CLKlow();
 80005dc:	f7ff ffae 	bl	800053c <tm1637_CLKlow>
	tm1637_SDOlow();
 80005e0:	f7ff ffd8 	bl	8000594 <tm1637_SDOlow>

	tm1637_CLKhigh();
 80005e4:	f7ff ff94 	bl	8000510 <tm1637_CLKhigh>
	tm1637_SDOhigh();
 80005e8:	f7ff ffbe 	bl	8000568 <tm1637_SDOhigh>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <tm1637_DataOut>:
void tm1637_DataOut(uint8_t *tm1637_TxBuffer)							//Low level data transfer function
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]

	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
 80005fc:	e015      	b.n	800062a <tm1637_DataOut+0x3a>
	{
		tm1637_CLKlow();
 80005fe:	f7ff ff9d 	bl	800053c <tm1637_CLKlow>
		if(tm1637_TxBuffer[j] == GPIO_PIN_SET)							//Check logic level
 8000602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d102      	bne.n	8000616 <tm1637_DataOut+0x26>
		{
			tm1637_SDOhigh();
 8000610:	f7ff ffaa 	bl	8000568 <tm1637_SDOhigh>
 8000614:	e001      	b.n	800061a <tm1637_DataOut+0x2a>

		}
		else
		{
			tm1637_SDOlow();
 8000616:	f7ff ffbd 	bl	8000594 <tm1637_SDOlow>

		}
		tm1637_CLKhigh();
 800061a:	f7ff ff79 	bl	8000510 <tm1637_CLKhigh>
	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 800061e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	3301      	adds	r3, #1
 8000626:	b2db      	uxtb	r3, r3
 8000628:	73fb      	strb	r3, [r7, #15]
 800062a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800062e:	2b07      	cmp	r3, #7
 8000630:	dde5      	ble.n	80005fe <tm1637_DataOut+0xe>
	} 
}
 8000632:	bf00      	nop
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <tm1637_TxCommand>:
void tm1637_TxCommand(uint8_t *Command)
{																		//Handles high level (bit by bit) transmission operation
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	uint8_t ByteData[8] = {0};
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 800064c:	2300      	movs	r3, #0
 800064e:	75fb      	strb	r3, [r7, #23]
 8000650:	e014      	b.n	800067c <tm1637_TxCommand+0x40>
	{

		ByteData[i] = (Command[0] & (0x01 << i)) && 1;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	461a      	mov	r2, r3
 8000658:	7dfb      	ldrb	r3, [r7, #23]
 800065a:	fa42 f303 	asr.w	r3, r2, r3
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	2b00      	cmp	r3, #0
 8000664:	bf14      	ite	ne
 8000666:	2301      	movne	r3, #1
 8000668:	2300      	moveq	r3, #0
 800066a:	b2da      	uxtb	r2, r3
 800066c:	7dfb      	ldrb	r3, [r7, #23]
 800066e:	3318      	adds	r3, #24
 8000670:	443b      	add	r3, r7
 8000672:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 8000676:	7dfb      	ldrb	r3, [r7, #23]
 8000678:	3301      	adds	r3, #1
 800067a:	75fb      	strb	r3, [r7, #23]
 800067c:	7dfb      	ldrb	r3, [r7, #23]
 800067e:	2b07      	cmp	r3, #7
 8000680:	d9e7      	bls.n	8000652 <tm1637_TxCommand+0x16>

																		//Convert from byte to bit per array element
	}

	tm1637_StartPacket();												//Send start packet bit
 8000682:	f7ff ff9d 	bl	80005c0 <tm1637_StartPacket>
	tm1637_DataOut(ByteData);											//Send one byte
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ffb0 	bl	80005f0 <tm1637_DataOut>
	tm1637_CLKlow();													//Send one CLK for acknowledgment
 8000690:	f7ff ff54 	bl	800053c <tm1637_CLKlow>
	tm1637_CLKhigh();
 8000694:	f7ff ff3c 	bl	8000510 <tm1637_CLKhigh>
	tm1637_ACKcheck();													//wait for acknowledgment.
 8000698:	f000 f87e 	bl	8000798 <tm1637_ACKcheck>
	if((Command[0] & 0xC0) != (0xC0))										//Check if the received packet is not an address.
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80006a4:	2bc0      	cmp	r3, #192	; 0xc0
 80006a6:	d001      	beq.n	80006ac <tm1637_TxCommand+0x70>
	{
		tm1637_EndPacket();
 80006a8:	f7ff ff96 	bl	80005d8 <tm1637_EndPacket>
	}

}
 80006ac:	bf00      	nop
 80006ae:	3718      	adds	r7, #24
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <tm1637_TxData>:
void tm1637_TxData(uint8_t *Data, uint8_t PacketSize)
{																		//Handles high level (bit by bit) transmission operation
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	460b      	mov	r3, r1
 80006be:	70fb      	strb	r3, [r7, #3]
	uint8_t ByteData[8] = {0};
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < PacketSize; i++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	75fb      	strb	r3, [r7, #23]
 80006cc:	e02a      	b.n	8000724 <tm1637_TxData+0x70>
	{
		for(uint8_t j = 0; j < 8; j++)
 80006ce:	2300      	movs	r3, #0
 80006d0:	75bb      	strb	r3, [r7, #22]
 80006d2:	e016      	b.n	8000702 <tm1637_TxData+0x4e>
		{
			ByteData[j] = (Data[i] & (0x01 << j)) && 1;
 80006d4:	7dfb      	ldrb	r3, [r7, #23]
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	4413      	add	r3, r2
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	461a      	mov	r2, r3
 80006de:	7dbb      	ldrb	r3, [r7, #22]
 80006e0:	fa42 f303 	asr.w	r3, r2, r3
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	bf14      	ite	ne
 80006ec:	2301      	movne	r3, #1
 80006ee:	2300      	moveq	r3, #0
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	7dbb      	ldrb	r3, [r7, #22]
 80006f4:	3318      	adds	r3, #24
 80006f6:	443b      	add	r3, r7
 80006f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t j = 0; j < 8; j++)
 80006fc:	7dbb      	ldrb	r3, [r7, #22]
 80006fe:	3301      	adds	r3, #1
 8000700:	75bb      	strb	r3, [r7, #22]
 8000702:	7dbb      	ldrb	r3, [r7, #22]
 8000704:	2b07      	cmp	r3, #7
 8000706:	d9e5      	bls.n	80006d4 <tm1637_TxData+0x20>
		}
		tm1637_DataOut(ByteData);
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff6f 	bl	80005f0 <tm1637_DataOut>
		tm1637_CLKlow();
 8000712:	f7ff ff13 	bl	800053c <tm1637_CLKlow>
		tm1637_CLKhigh();
 8000716:	f7ff fefb 	bl	8000510 <tm1637_CLKhigh>
		tm1637_ACKcheck();												//Transmit byte by byte
 800071a:	f000 f83d 	bl	8000798 <tm1637_ACKcheck>
	for(uint8_t i = 0; i < PacketSize; i++)
 800071e:	7dfb      	ldrb	r3, [r7, #23]
 8000720:	3301      	adds	r3, #1
 8000722:	75fb      	strb	r3, [r7, #23]
 8000724:	7dfa      	ldrb	r2, [r7, #23]
 8000726:	78fb      	ldrb	r3, [r7, #3]
 8000728:	429a      	cmp	r2, r3
 800072a:	d3d0      	bcc.n	80006ce <tm1637_TxData+0x1a>

	}
	tm1637_EndPacket();													//Send end packet at the end of data transmission.
 800072c:	f7ff ff54 	bl	80005d8 <tm1637_EndPacket>


}
 8000730:	bf00      	nop
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <tm1637_Initialize>:
void tm1637_Initialize(uint8_t Direction)								//Since SDI line is doing both transmission and reception
{																		//the corresponding GPIO pin must be reinitialized on the run
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};								//To read ACK from TM1637 and to write data to it
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000750:	2310      	movs	r3, #16
 8000752:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2302      	movs	r3, #2
 800075a:	617b      	str	r3, [r7, #20]
	switch (Direction)													//Depending on the function input initialize the pin as input or output
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d00a      	beq.n	8000778 <tm1637_Initialize+0x40>
 8000762:	2b01      	cmp	r3, #1
 8000764:	d111      	bne.n	800078a <tm1637_Initialize+0x52>
	{
		case DISPLAY2STM:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	4619      	mov	r1, r3
 8000770:	4808      	ldr	r0, [pc, #32]	; (8000794 <tm1637_Initialize+0x5c>)
 8000772:	f001 fc63 	bl	800203c <HAL_GPIO_Init>
			break;
 8000776:	e008      	b.n	800078a <tm1637_Initialize+0x52>
		case STM2DISPLAY:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800077c:	f107 0308 	add.w	r3, r7, #8
 8000780:	4619      	mov	r1, r3
 8000782:	4804      	ldr	r0, [pc, #16]	; (8000794 <tm1637_Initialize+0x5c>)
 8000784:	f001 fc5a 	bl	800203c <HAL_GPIO_Init>
			break;
 8000788:	bf00      	nop

	}

}
 800078a:	bf00      	nop
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40011400 	.word	0x40011400

08000798 <tm1637_ACKcheck>:
void tm1637_ACKcheck()
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	//Wait for acknowledgment bit
	tm1637_Initialize(DISPLAY2STM);										//initialize pin as input
 800079c:	2001      	movs	r0, #1
 800079e:	f7ff ffcb 	bl	8000738 <tm1637_Initialize>
	tm1637_CLKlow();													//lower CLK line
 80007a2:	f7ff fecb 	bl	800053c <tm1637_CLKlow>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))					//Wait until ACK bit is received
 80007a6:	e002      	b.n	80007ae <tm1637_ACKcheck+0x16>
	tm1637_Initialize(STM2DISPLAY);										//initialize pin as output for data transfer
 80007a8:	2000      	movs	r0, #0
 80007aa:	f7ff ffc5 	bl	8000738 <tm1637_Initialize>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))					//Wait until ACK bit is received
 80007ae:	2110      	movs	r1, #16
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <tm1637_ACKcheck+0x2c>)
 80007b2:	f001 fdc7 	bl	8002344 <HAL_GPIO_ReadPin>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d1f5      	bne.n	80007a8 <tm1637_ACKcheck+0x10>
}
 80007bc:	bf00      	nop
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40010800 	.word	0x40010800

080007c8 <tm1637_DisplayInteger>:
void tm1637_DisplayInteger(uint8_t number) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
    // Chuyển đổi số nguyên thành một chuỗi ký tự
    char strNumber[4];
    sprintf(strNumber, "%04d", number); // Sử dụng %04d để đảm bảo chuỗi luôn có 4 ký tự
 80007d2:	79fa      	ldrb	r2, [r7, #7]
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	4911      	ldr	r1, [pc, #68]	; (8000820 <tm1637_DisplayInteger+0x58>)
 80007da:	4618      	mov	r0, r3
 80007dc:	f003 fcd2 	bl	8004184 <siprintf>

    // Chuyển đổi từ chuỗi ký tự thành dữ liệu hiển thị TM1637
    uint8_t displayData[4];
    displayData[2] = char2segments(strNumber[2]); // Hiển thị số thứ ba
 80007e0:	7bbb      	ldrb	r3, [r7, #14]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 f88e 	bl	8000904 <char2segments>
 80007e8:	4603      	mov	r3, r0
 80007ea:	72bb      	strb	r3, [r7, #10]
    displayData[3] = char2segments(strNumber[3]); // Hiển thị số thứ tư
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f888 	bl	8000904 <char2segments>
 80007f4:	4603      	mov	r3, r0
 80007f6:	72fb      	strb	r3, [r7, #11]
    displayData[1] = char2segments(' ');          // Số thứ nhất (khoảng trắng)
 80007f8:	2020      	movs	r0, #32
 80007fa:	f000 f883 	bl	8000904 <char2segments>
 80007fe:	4603      	mov	r3, r0
 8000800:	727b      	strb	r3, [r7, #9]
    displayData[0] = char2segments('t');          // Số thứ hai (khoảng trắng)
 8000802:	2074      	movs	r0, #116	; 0x74
 8000804:	f000 f87e 	bl	8000904 <char2segments>
 8000808:	4603      	mov	r3, r0
 800080a:	723b      	strb	r3, [r7, #8]

    // Hiển thị dữ liệu trên TM1637 với độ sáng là 7
    tm1637_DisplayHandle(7, displayData);
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	4619      	mov	r1, r3
 8000812:	2007      	movs	r0, #7
 8000814:	f000 f806 	bl	8000824 <tm1637_DisplayHandle>
}
 8000818:	bf00      	nop
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	08004b00 	.word	0x08004b00

08000824 <tm1637_DisplayHandle>:
	tm1637_TxData(EmptyBuffer, 4);
	CommandCarrier[0] = DISPLAY_OFF;
	tm1637_TxCommand(CommandCarrier);
}
uint8_t tm1637_DisplayHandle(uint8_t Brightness, uint8_t *DisplayBuffer)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	6039      	str	r1, [r7, #0]
 800082e:	71fb      	strb	r3, [r7, #7]
	//This function handles the low level protocol used to set data address of TM1637 and turn the display on
	//#param Brightness is used to set the brightness level of the display. This function accepts Brightness value between 0 and 7
	//#param *DisplayBuffer is the buffer used to map data from the RAM to the display each element corresponds to one segment in the display
	uint8_t CommandCarrier[1] = {0};
 8000830:	2300      	movs	r3, #0
 8000832:	733b      	strb	r3, [r7, #12]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 8000834:	2301      	movs	r3, #1
 8000836:	73fb      	strb	r3, [r7, #15]
	if(Brightness <= 7)												//there are 7 levels of brightness
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	2b07      	cmp	r3, #7
 800083c:	d819      	bhi.n	8000872 <tm1637_DisplayHandle+0x4e>
	{
	  CommandCarrier[0] = DATA_SET;									//Send set data command
 800083e:	2340      	movs	r3, #64	; 0x40
 8000840:	733b      	strb	r3, [r7, #12]
	  tm1637_TxCommand(CommandCarrier);
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fef8 	bl	800063c <tm1637_TxCommand>
	  CommandCarrier[0] = C0H;										//Set address
 800084c:	23c0      	movs	r3, #192	; 0xc0
 800084e:	733b      	strb	r3, [r7, #12]
	  tm1637_TxCommand(CommandCarrier);
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fef1 	bl	800063c <tm1637_TxCommand>

	  tm1637_TxData(DisplayBuffer, 4);								//Map the data stored in RAM to the display
 800085a:	2104      	movs	r1, #4
 800085c:	6838      	ldr	r0, [r7, #0]
 800085e:	f7ff ff29 	bl	80006b4 <tm1637_TxData>
	  tm1637_SetBrighness(Brightness);								//Turn on display and set brightness
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	4618      	mov	r0, r3
 8000866:	f000 f809 	bl	800087c <tm1637_SetBrighness>
		ParameterFalidation = TM1637_OK;
 800086a:	2300      	movs	r3, #0
 800086c:	73fb      	strb	r3, [r7, #15]
		return ParameterFalidation;
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	e000      	b.n	8000874 <tm1637_DisplayHandle+0x50>
	}
	return ParameterFalidation;
 8000872:	7bfb      	ldrb	r3, [r7, #15]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <tm1637_SetBrighness>:
tm1637_StatusTypedef tm1637_SetBrighness(uint8_t BrighnessLevel)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
	uint8_t BrighnessBuffer[8] = {0};
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	75bb      	strb	r3, [r7, #22]
	if(BrighnessLevel <= 7)												//there are 7 levels of brightness
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b07      	cmp	r3, #7
 8000896:	d82f      	bhi.n	80008f8 <tm1637_SetBrighness+0x7c>
	{																	//Any value above that will be ignored.
		BrighnessLevel = BrighnessLevel | DISPLAY_ON;					//Set Brightness level with display on command
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	f063 0377 	orn	r3, r3, #119	; 0x77
 800089e:	71fb      	strb	r3, [r7, #7]

		for(uint8_t i = 0; i < 8; i++)
 80008a0:	2300      	movs	r3, #0
 80008a2:	75fb      	strb	r3, [r7, #23]
 80008a4:	e012      	b.n	80008cc <tm1637_SetBrighness+0x50>
		{
			BrighnessBuffer[i] = (BrighnessLevel & (0x01 << i)) && 1;
 80008a6:	79fa      	ldrb	r2, [r7, #7]
 80008a8:	7dfb      	ldrb	r3, [r7, #23]
 80008aa:	fa42 f303 	asr.w	r3, r2, r3
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	bf14      	ite	ne
 80008b6:	2301      	movne	r3, #1
 80008b8:	2300      	moveq	r3, #0
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	7dfb      	ldrb	r3, [r7, #23]
 80008be:	3318      	adds	r3, #24
 80008c0:	443b      	add	r3, r7
 80008c2:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t i = 0; i < 8; i++)
 80008c6:	7dfb      	ldrb	r3, [r7, #23]
 80008c8:	3301      	adds	r3, #1
 80008ca:	75fb      	strb	r3, [r7, #23]
 80008cc:	7dfb      	ldrb	r3, [r7, #23]
 80008ce:	2b07      	cmp	r3, #7
 80008d0:	d9e9      	bls.n	80008a6 <tm1637_SetBrighness+0x2a>
		}
		tm1637_StartPacket();
 80008d2:	f7ff fe75 	bl	80005c0 <tm1637_StartPacket>
		tm1637_DataOut(BrighnessBuffer);
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fe88 	bl	80005f0 <tm1637_DataOut>
		tm1637_CLKlow();													//Send one CLK for acknowledgment
 80008e0:	f7ff fe2c 	bl	800053c <tm1637_CLKlow>
		tm1637_CLKhigh();
 80008e4:	f7ff fe14 	bl	8000510 <tm1637_CLKhigh>
		tm1637_ACKcheck();													//wait for acknowledgment.
 80008e8:	f7ff ff56 	bl	8000798 <tm1637_ACKcheck>
		tm1637_EndPacket();
 80008ec:	f7ff fe74 	bl	80005d8 <tm1637_EndPacket>
		ParameterFalidation = TM1637_OK;
 80008f0:	2300      	movs	r3, #0
 80008f2:	75bb      	strb	r3, [r7, #22]
		return ParameterFalidation;
 80008f4:	7dbb      	ldrb	r3, [r7, #22]
 80008f6:	e000      	b.n	80008fa <tm1637_SetBrighness+0x7e>
	}
	return ParameterFalidation;
 80008f8:	7dbb      	ldrb	r3, [r7, #22]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <char2segments>:
		  }

	  }
}

uint8_t char2segments(char c) {
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
        switch (c) {
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	3b20      	subs	r3, #32
 8000912:	2b5a      	cmp	r3, #90	; 0x5a
 8000914:	f200 811a 	bhi.w	8000b4c <char2segments+0x248>
 8000918:	a201      	add	r2, pc, #4	; (adr r2, 8000920 <char2segments+0x1c>)
 800091a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800091e:	bf00      	nop
 8000920:	08000ac5 	.word	0x08000ac5
 8000924:	08000b4d 	.word	0x08000b4d
 8000928:	08000b4d 	.word	0x08000b4d
 800092c:	08000b4d 	.word	0x08000b4d
 8000930:	08000b4d 	.word	0x08000b4d
 8000934:	08000b4d 	.word	0x08000b4d
 8000938:	08000b4d 	.word	0x08000b4d
 800093c:	08000b4d 	.word	0x08000b4d
 8000940:	08000b4d 	.word	0x08000b4d
 8000944:	08000b4d 	.word	0x08000b4d
 8000948:	08000ac1 	.word	0x08000ac1
 800094c:	08000b4d 	.word	0x08000b4d
 8000950:	08000b4d 	.word	0x08000b4d
 8000954:	08000abd 	.word	0x08000abd
 8000958:	08000b4d 	.word	0x08000b4d
 800095c:	08000b4d 	.word	0x08000b4d
 8000960:	08000a8d 	.word	0x08000a8d
 8000964:	08000a91 	.word	0x08000a91
 8000968:	08000a95 	.word	0x08000a95
 800096c:	08000a99 	.word	0x08000a99
 8000970:	08000a9d 	.word	0x08000a9d
 8000974:	08000aa1 	.word	0x08000aa1
 8000978:	08000aa5 	.word	0x08000aa5
 800097c:	08000aa9 	.word	0x08000aa9
 8000980:	08000aad 	.word	0x08000aad
 8000984:	08000ab1 	.word	0x08000ab1
 8000988:	08000b4d 	.word	0x08000b4d
 800098c:	08000b4d 	.word	0x08000b4d
 8000990:	08000b4d 	.word	0x08000b4d
 8000994:	08000b4d 	.word	0x08000b4d
 8000998:	08000b4d 	.word	0x08000b4d
 800099c:	08000b4d 	.word	0x08000b4d
 80009a0:	08000b4d 	.word	0x08000b4d
 80009a4:	08000ac9 	.word	0x08000ac9
 80009a8:	08000ad1 	.word	0x08000ad1
 80009ac:	08000ad5 	.word	0x08000ad5
 80009b0:	08000add 	.word	0x08000add
 80009b4:	08000ae1 	.word	0x08000ae1
 80009b8:	08000ae5 	.word	0x08000ae5
 80009bc:	08000ae9 	.word	0x08000ae9
 80009c0:	08000aed 	.word	0x08000aed
 80009c4:	08000af5 	.word	0x08000af5
 80009c8:	08000afd 	.word	0x08000afd
 80009cc:	08000b05 	.word	0x08000b05
 80009d0:	08000b09 	.word	0x08000b09
 80009d4:	08000b0d 	.word	0x08000b0d
 80009d8:	08000b11 	.word	0x08000b11
 80009dc:	08000b15 	.word	0x08000b15
 80009e0:	08000b19 	.word	0x08000b19
 80009e4:	08000b1d 	.word	0x08000b1d
 80009e8:	08000b25 	.word	0x08000b25
 80009ec:	08000b29 	.word	0x08000b29
 80009f0:	08000b2d 	.word	0x08000b2d
 80009f4:	08000b31 	.word	0x08000b31
 80009f8:	08000b35 	.word	0x08000b35
 80009fc:	08000b39 	.word	0x08000b39
 8000a00:	08000b41 	.word	0x08000b41
 8000a04:	08000b45 	.word	0x08000b45
 8000a08:	08000b49 	.word	0x08000b49
 8000a0c:	08000b4d 	.word	0x08000b4d
 8000a10:	08000b4d 	.word	0x08000b4d
 8000a14:	08000b4d 	.word	0x08000b4d
 8000a18:	08000ab9 	.word	0x08000ab9
 8000a1c:	08000ab5 	.word	0x08000ab5
 8000a20:	08000b4d 	.word	0x08000b4d
 8000a24:	08000acd 	.word	0x08000acd
 8000a28:	08000ad1 	.word	0x08000ad1
 8000a2c:	08000ad9 	.word	0x08000ad9
 8000a30:	08000add 	.word	0x08000add
 8000a34:	08000ae1 	.word	0x08000ae1
 8000a38:	08000ae5 	.word	0x08000ae5
 8000a3c:	08000ae9 	.word	0x08000ae9
 8000a40:	08000af1 	.word	0x08000af1
 8000a44:	08000af9 	.word	0x08000af9
 8000a48:	08000b01 	.word	0x08000b01
 8000a4c:	08000b05 	.word	0x08000b05
 8000a50:	08000b09 	.word	0x08000b09
 8000a54:	08000b0d 	.word	0x08000b0d
 8000a58:	08000b11 	.word	0x08000b11
 8000a5c:	08000b15 	.word	0x08000b15
 8000a60:	08000b19 	.word	0x08000b19
 8000a64:	08000b21 	.word	0x08000b21
 8000a68:	08000b25 	.word	0x08000b25
 8000a6c:	08000b29 	.word	0x08000b29
 8000a70:	08000b2d 	.word	0x08000b2d
 8000a74:	08000b31 	.word	0x08000b31
 8000a78:	08000b35 	.word	0x08000b35
 8000a7c:	08000b3d 	.word	0x08000b3d
 8000a80:	08000b41 	.word	0x08000b41
 8000a84:	08000b45 	.word	0x08000b45
 8000a88:	08000b49 	.word	0x08000b49
			case '0' : return 0x3f;
 8000a8c:	233f      	movs	r3, #63	; 0x3f
 8000a8e:	e05e      	b.n	8000b4e <char2segments+0x24a>
			case '1' : return 0x06;
 8000a90:	2306      	movs	r3, #6
 8000a92:	e05c      	b.n	8000b4e <char2segments+0x24a>
			case '2' : return 0x5b;
 8000a94:	235b      	movs	r3, #91	; 0x5b
 8000a96:	e05a      	b.n	8000b4e <char2segments+0x24a>
			case '3' : return 0x4f;
 8000a98:	234f      	movs	r3, #79	; 0x4f
 8000a9a:	e058      	b.n	8000b4e <char2segments+0x24a>
			case '4' : return 0x66;
 8000a9c:	2366      	movs	r3, #102	; 0x66
 8000a9e:	e056      	b.n	8000b4e <char2segments+0x24a>
			case '5' : return 0x6d;
 8000aa0:	236d      	movs	r3, #109	; 0x6d
 8000aa2:	e054      	b.n	8000b4e <char2segments+0x24a>
			case '6' : return 0x7d;
 8000aa4:	237d      	movs	r3, #125	; 0x7d
 8000aa6:	e052      	b.n	8000b4e <char2segments+0x24a>
			case '7' : return 0x07;
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	e050      	b.n	8000b4e <char2segments+0x24a>
			case '8' : return 0x7f;
 8000aac:	237f      	movs	r3, #127	; 0x7f
 8000aae:	e04e      	b.n	8000b4e <char2segments+0x24a>
			case '9' : return 0x6f;
 8000ab0:	236f      	movs	r3, #111	; 0x6f
 8000ab2:	e04c      	b.n	8000b4e <char2segments+0x24a>
            case '_' : return 0x08;
 8000ab4:	2308      	movs	r3, #8
 8000ab6:	e04a      	b.n	8000b4e <char2segments+0x24a>
            case '^' : return 0x01; // ¯
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e048      	b.n	8000b4e <char2segments+0x24a>
            case '-' : return 0x40;
 8000abc:	2340      	movs	r3, #64	; 0x40
 8000abe:	e046      	b.n	8000b4e <char2segments+0x24a>
            case '*' : return 0x63; // °
 8000ac0:	2363      	movs	r3, #99	; 0x63
 8000ac2:	e044      	b.n	8000b4e <char2segments+0x24a>
            case ' ' : return 0x00; // space
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	e042      	b.n	8000b4e <char2segments+0x24a>
            case 'A' : return 0x77; // upper case A
 8000ac8:	2377      	movs	r3, #119	; 0x77
 8000aca:	e040      	b.n	8000b4e <char2segments+0x24a>
            case 'a' : return 0x5f; // lower case a
 8000acc:	235f      	movs	r3, #95	; 0x5f
 8000ace:	e03e      	b.n	8000b4e <char2segments+0x24a>
            case 'B' :              // lower case b
            case 'b' : return 0x7c; // lower case b
 8000ad0:	237c      	movs	r3, #124	; 0x7c
 8000ad2:	e03c      	b.n	8000b4e <char2segments+0x24a>
            case 'C' : return 0x39; // upper case C
 8000ad4:	2339      	movs	r3, #57	; 0x39
 8000ad6:	e03a      	b.n	8000b4e <char2segments+0x24a>
            case 'c' : return 0x58; // lower case c
 8000ad8:	2358      	movs	r3, #88	; 0x58
 8000ada:	e038      	b.n	8000b4e <char2segments+0x24a>
            case 'D' :              // lower case d
            case 'd' : return 0x5e; // lower case d
 8000adc:	235e      	movs	r3, #94	; 0x5e
 8000ade:	e036      	b.n	8000b4e <char2segments+0x24a>
            case 'E' :              // upper case E
            case 'e' : return 0x79; // upper case E
 8000ae0:	2379      	movs	r3, #121	; 0x79
 8000ae2:	e034      	b.n	8000b4e <char2segments+0x24a>
            case 'F' :              // upper case F
            case 'f' : return 0x71; // upper case F
 8000ae4:	2371      	movs	r3, #113	; 0x71
 8000ae6:	e032      	b.n	8000b4e <char2segments+0x24a>
            case 'G' :              // upper case G
            case 'g' : return 0x35; // upper case G
 8000ae8:	2335      	movs	r3, #53	; 0x35
 8000aea:	e030      	b.n	8000b4e <char2segments+0x24a>
            case 'H' : return 0x76; // upper case H
 8000aec:	2376      	movs	r3, #118	; 0x76
 8000aee:	e02e      	b.n	8000b4e <char2segments+0x24a>
            case 'h' : return 0x74; // lower case h
 8000af0:	2374      	movs	r3, #116	; 0x74
 8000af2:	e02c      	b.n	8000b4e <char2segments+0x24a>
            case 'I' : return 0x06; // 1
 8000af4:	2306      	movs	r3, #6
 8000af6:	e02a      	b.n	8000b4e <char2segments+0x24a>
            case 'i' : return 0x04; // lower case i
 8000af8:	2304      	movs	r3, #4
 8000afa:	e028      	b.n	8000b4e <char2segments+0x24a>
            case 'J' : return 0x1e; // upper case J
 8000afc:	231e      	movs	r3, #30
 8000afe:	e026      	b.n	8000b4e <char2segments+0x24a>
            case 'j' : return 0x16; // lower case j
 8000b00:	2316      	movs	r3, #22
 8000b02:	e024      	b.n	8000b4e <char2segments+0x24a>
            case 'K' :              // upper case K
            case 'k' : return 0x75; // upper case K
 8000b04:	2375      	movs	r3, #117	; 0x75
 8000b06:	e022      	b.n	8000b4e <char2segments+0x24a>
            case 'L' :              // upper case L
            case 'l' : return 0x38; // upper case L
 8000b08:	2338      	movs	r3, #56	; 0x38
 8000b0a:	e020      	b.n	8000b4e <char2segments+0x24a>
            case 'M' :              // twice tall n
            case 'm' : return 0x37; // twice tall ∩
 8000b0c:	2337      	movs	r3, #55	; 0x37
 8000b0e:	e01e      	b.n	8000b4e <char2segments+0x24a>
            case 'N' :              // lower case n
            case 'n' : return 0x54; // lower case n
 8000b10:	2354      	movs	r3, #84	; 0x54
 8000b12:	e01c      	b.n	8000b4e <char2segments+0x24a>
            case 'O' :              // lower case o
            case 'o' : return 0x5c; // lower case o
 8000b14:	235c      	movs	r3, #92	; 0x5c
 8000b16:	e01a      	b.n	8000b4e <char2segments+0x24a>
            case 'P' :              // upper case P
            case 'p' : return 0x73; // upper case P
 8000b18:	2373      	movs	r3, #115	; 0x73
 8000b1a:	e018      	b.n	8000b4e <char2segments+0x24a>
            case 'Q' : return 0x7b; // upper case Q
 8000b1c:	237b      	movs	r3, #123	; 0x7b
 8000b1e:	e016      	b.n	8000b4e <char2segments+0x24a>
            case 'q' : return 0x67; // lower case q
 8000b20:	2367      	movs	r3, #103	; 0x67
 8000b22:	e014      	b.n	8000b4e <char2segments+0x24a>
            case 'R' :              // lower case r
            case 'r' : return 0x50; // lower case r
 8000b24:	2350      	movs	r3, #80	; 0x50
 8000b26:	e012      	b.n	8000b4e <char2segments+0x24a>
            case 'S' :              // 5
            case 's' : return 0x6d; // 5
 8000b28:	236d      	movs	r3, #109	; 0x6d
 8000b2a:	e010      	b.n	8000b4e <char2segments+0x24a>
            case 'T' :              // lower case t
            case 't' : return 0x78; // lower case t
 8000b2c:	2378      	movs	r3, #120	; 0x78
 8000b2e:	e00e      	b.n	8000b4e <char2segments+0x24a>
            case 'U' :              // lower case u
            case 'u' : return 0x1c; // lower case u
 8000b30:	231c      	movs	r3, #28
 8000b32:	e00c      	b.n	8000b4e <char2segments+0x24a>
            case 'V' :              // twice tall u
            case 'v' : return 0x3e; // twice tall u
 8000b34:	233e      	movs	r3, #62	; 0x3e
 8000b36:	e00a      	b.n	8000b4e <char2segments+0x24a>
            case 'W' : return 0x7e; // upside down A
 8000b38:	237e      	movs	r3, #126	; 0x7e
 8000b3a:	e008      	b.n	8000b4e <char2segments+0x24a>
            case 'w' : return 0x2a; // separated w
 8000b3c:	232a      	movs	r3, #42	; 0x2a
 8000b3e:	e006      	b.n	8000b4e <char2segments+0x24a>
            case 'X' :              // upper case H
            case 'x' : return 0x76; // upper case H
 8000b40:	2376      	movs	r3, #118	; 0x76
 8000b42:	e004      	b.n	8000b4e <char2segments+0x24a>
            case 'Y' :              // lower case y
            case 'y' : return 0x6e; // lower case y
 8000b44:	236e      	movs	r3, #110	; 0x6e
 8000b46:	e002      	b.n	8000b4e <char2segments+0x24a>
            case 'Z' :              // separated Z
            case 'z' : return 0x1b; // separated Z
 8000b48:	231b      	movs	r3, #27
 8000b4a:	e000      	b.n	8000b4e <char2segments+0x24a>
        }
        return 0;
 8000b4c:	2300      	movs	r3, #0
    }
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	OneWire_Reset(&OneWire); // Reset the bus
 8000b5c:	4806      	ldr	r0, [pc, #24]	; (8000b78 <DS18B20_StartAll+0x20>)
 8000b5e:	f000 fbc4 	bl	80012ea <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 8000b62:	21cc      	movs	r1, #204	; 0xcc
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <DS18B20_StartAll+0x20>)
 8000b66:	f000 fc3d 	bl	80013e4 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 8000b6a:	2144      	movs	r1, #68	; 0x44
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <DS18B20_StartAll+0x20>)
 8000b6e:	f000 fc39 	bl	80013e4 <OneWire_WriteByte>
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200000c8 	.word	0x200000c8

08000b7c <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b087      	sub	sp, #28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	6039      	str	r1, [r7, #0]
 8000b86:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount) // If read sensor is not availible
 8000b88:	4b4f      	ldr	r3, [pc, #316]	; (8000cc8 <DS18B20_Read+0x14c>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	79fa      	ldrb	r2, [r7, #7]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d301      	bcc.n	8000b96 <DS18B20_Read+0x1a>
		return 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e094      	b.n	8000cc0 <DS18B20_Read+0x144>

	uint16_t temperature;
	uint8_t resolution;
	float result;
	uint8_t i = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	74fb      	strb	r3, [r7, #19]
	uint8_t crc;

#endif

	
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	011b      	lsls	r3, r3, #4
 8000b9e:	4a4b      	ldr	r2, [pc, #300]	; (8000ccc <DS18B20_Read+0x150>)
 8000ba0:	4413      	add	r3, r2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f93e 	bl	8000e24 <DS18B20_Is>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d101      	bne.n	8000bb2 <DS18B20_Read+0x36>
		return 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e086      	b.n	8000cc0 <DS18B20_Read+0x144>

	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 8000bb2:	4847      	ldr	r0, [pc, #284]	; (8000cd0 <DS18B20_Read+0x154>)
 8000bb4:	f000 fbec 	bl	8001390 <OneWire_ReadBit>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d101      	bne.n	8000bc2 <DS18B20_Read+0x46>
		return 0; // Busy bus - conversion is not finished
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e07e      	b.n	8000cc0 <DS18B20_Read+0x144>

	OneWire_Reset(&OneWire); // Reset the bus
 8000bc2:	4843      	ldr	r0, [pc, #268]	; (8000cd0 <DS18B20_Read+0x154>)
 8000bc4:	f000 fb91 	bl	80012ea <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	011b      	lsls	r3, r3, #4
 8000bcc:	4a3f      	ldr	r2, [pc, #252]	; (8000ccc <DS18B20_Read+0x150>)
 8000bce:	4413      	add	r3, r2
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	483f      	ldr	r0, [pc, #252]	; (8000cd0 <DS18B20_Read+0x154>)
 8000bd4:	f000 fd3a 	bl	800164c <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8000bd8:	21be      	movs	r1, #190	; 0xbe
 8000bda:	483d      	ldr	r0, [pc, #244]	; (8000cd0 <DS18B20_Read+0x154>)
 8000bdc:	f000 fc02 	bl	80013e4 <OneWire_WriteByte>
	
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8000be0:	2300      	movs	r3, #0
 8000be2:	74fb      	strb	r3, [r7, #19]
 8000be4:	e00d      	b.n	8000c02 <DS18B20_Read+0x86>
		data[i] = OneWire_ReadByte(&OneWire);
 8000be6:	7cfc      	ldrb	r4, [r7, #19]
 8000be8:	4839      	ldr	r0, [pc, #228]	; (8000cd0 <DS18B20_Read+0x154>)
 8000bea:	f000 fc19 	bl	8001420 <OneWire_ReadByte>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	f104 0318 	add.w	r3, r4, #24
 8000bf6:	443b      	add	r3, r7
 8000bf8:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8000bfc:	7cfb      	ldrb	r3, [r7, #19]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	74fb      	strb	r3, [r7, #19]
 8000c02:	7cfb      	ldrb	r3, [r7, #19]
 8000c04:	2b04      	cmp	r3, #4
 8000c06:	d9ee      	bls.n	8000be6 <DS18B20_Read+0x6a>
	crc = OneWire_CRC8(data, 8); // CRC calculation

	if (crc != data[8])
		return 0; // CRC invalid
#endif
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 8000c08:	7a3b      	ldrb	r3, [r7, #8]
 8000c0a:	b21a      	sxth	r2, r3
 8000c0c:	7a7b      	ldrb	r3, [r7, #9]
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	b21b      	sxth	r3, r3
 8000c12:	4313      	orrs	r3, r2
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	823b      	strh	r3, [r7, #16]

	OneWire_Reset(&OneWire); // Reset the bus
 8000c18:	482d      	ldr	r0, [pc, #180]	; (8000cd0 <DS18B20_Read+0x154>)
 8000c1a:	f000 fb66 	bl	80012ea <OneWire_Reset>
	
	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 8000c1e:	7b3b      	ldrb	r3, [r7, #12]
 8000c20:	115b      	asrs	r3, r3, #5
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	f003 0303 	and.w	r3, r3, #3
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	3309      	adds	r3, #9
 8000c2c:	73fb      	strb	r3, [r7, #15]

	switch (resolution) // Chceck the correct value dur to resolution
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	3b09      	subs	r3, #9
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d83e      	bhi.n	8000cb4 <DS18B20_Read+0x138>
 8000c36:	a201      	add	r2, pc, #4	; (adr r2, 8000c3c <DS18B20_Read+0xc0>)
 8000c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3c:	08000c4d 	.word	0x08000c4d
 8000c40:	08000c67 	.word	0x08000c67
 8000c44:	08000c81 	.word	0x08000c81
 8000c48:	08000c9b 	.word	0x08000c9b
	{
		case DS18B20_Resolution_9bits:
			result = temperature*(float)DS18B20_STEP_9BIT;
 8000c4c:	8a3b      	ldrh	r3, [r7, #16]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fbea 	bl	8000428 <__aeabi_i2f>
 8000c54:	4603      	mov	r3, r0
 8000c56:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fa76 	bl	800014c <__aeabi_fmul>
 8000c60:	4603      	mov	r3, r0
 8000c62:	617b      	str	r3, [r7, #20]
		break;
 8000c64:	e028      	b.n	8000cb8 <DS18B20_Read+0x13c>
		case DS18B20_Resolution_10bits:
			result = temperature*(float)DS18B20_STEP_10BIT;
 8000c66:	8a3b      	ldrh	r3, [r7, #16]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fbdd 	bl	8000428 <__aeabi_i2f>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fa69 	bl	800014c <__aeabi_fmul>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	617b      	str	r3, [r7, #20]
		 break;
 8000c7e:	e01b      	b.n	8000cb8 <DS18B20_Read+0x13c>
		case DS18B20_Resolution_11bits:
			result = temperature*(float)DS18B20_STEP_11BIT;
 8000c80:	8a3b      	ldrh	r3, [r7, #16]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fbd0 	bl	8000428 <__aeabi_i2f>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fa5c 	bl	800014c <__aeabi_fmul>
 8000c94:	4603      	mov	r3, r0
 8000c96:	617b      	str	r3, [r7, #20]
		break;
 8000c98:	e00e      	b.n	8000cb8 <DS18B20_Read+0x13c>
		case DS18B20_Resolution_12bits:
			result = temperature*(float)DS18B20_STEP_12BIT;
 8000c9a:	8a3b      	ldrh	r3, [r7, #16]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fbc3 	bl	8000428 <__aeabi_i2f>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fa4f 	bl	800014c <__aeabi_fmul>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	617b      	str	r3, [r7, #20]
		 break;
 8000cb2:	e001      	b.n	8000cb8 <DS18B20_Read+0x13c>
		default: 
			result = 0xFF;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <DS18B20_Read+0x158>)
 8000cb6:	617b      	str	r3, [r7, #20]
	}
	
	*destination = result;
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	601a      	str	r2, [r3, #0]
	
	return 1; //temperature valid
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	371c      	adds	r7, #28
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd90      	pop	{r4, r7, pc}
 8000cc8:	200000dc 	.word	0x200000dc
 8000ccc:	20000088 	.word	0x20000088
 8000cd0:	200000c8 	.word	0x200000c8
 8000cd4:	437f0000 	.word	0x437f0000

08000cd8 <DS18B20_SetResolution>:
	
	return conf;
}

uint8_t DS18B20_SetResolution(uint8_t number, DS18B20_Resolution_t resolution)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	460a      	mov	r2, r1
 8000ce2:	71fb      	strb	r3, [r7, #7]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	71bb      	strb	r3, [r7, #6]
	if( number >= TempSensorCount)
 8000ce8:	4b4b      	ldr	r3, [pc, #300]	; (8000e18 <DS18B20_SetResolution+0x140>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	79fa      	ldrb	r2, [r7, #7]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d301      	bcc.n	8000cf6 <DS18B20_SetResolution+0x1e>
		return 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e08c      	b.n	8000e10 <DS18B20_SetResolution+0x138>

	uint8_t th, tl, conf;
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	011b      	lsls	r3, r3, #4
 8000cfa:	4a48      	ldr	r2, [pc, #288]	; (8000e1c <DS18B20_SetResolution+0x144>)
 8000cfc:	4413      	add	r3, r2
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 f890 	bl	8000e24 <DS18B20_Is>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <DS18B20_SetResolution+0x36>
		return 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e080      	b.n	8000e10 <DS18B20_SetResolution+0x138>
	
	OneWire_Reset(&OneWire); // Reset the bus
 8000d0e:	4844      	ldr	r0, [pc, #272]	; (8000e20 <DS18B20_SetResolution+0x148>)
 8000d10:	f000 faeb 	bl	80012ea <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	011b      	lsls	r3, r3, #4
 8000d18:	4a40      	ldr	r2, [pc, #256]	; (8000e1c <DS18B20_SetResolution+0x144>)
 8000d1a:	4413      	add	r3, r2
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4840      	ldr	r0, [pc, #256]	; (8000e20 <DS18B20_SetResolution+0x148>)
 8000d20:	f000 fc94 	bl	800164c <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8000d24:	21be      	movs	r1, #190	; 0xbe
 8000d26:	483e      	ldr	r0, [pc, #248]	; (8000e20 <DS18B20_SetResolution+0x148>)
 8000d28:	f000 fb5c 	bl	80013e4 <OneWire_WriteByte>
	
	OneWire_ReadByte(&OneWire);
 8000d2c:	483c      	ldr	r0, [pc, #240]	; (8000e20 <DS18B20_SetResolution+0x148>)
 8000d2e:	f000 fb77 	bl	8001420 <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 8000d32:	483b      	ldr	r0, [pc, #236]	; (8000e20 <DS18B20_SetResolution+0x148>)
 8000d34:	f000 fb74 	bl	8001420 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 8000d38:	4839      	ldr	r0, [pc, #228]	; (8000e20 <DS18B20_SetResolution+0x148>)
 8000d3a:	f000 fb71 	bl	8001420 <OneWire_ReadByte>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	73bb      	strb	r3, [r7, #14]
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 8000d42:	4837      	ldr	r0, [pc, #220]	; (8000e20 <DS18B20_SetResolution+0x148>)
 8000d44:	f000 fb6c 	bl	8001420 <OneWire_ReadByte>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	737b      	strb	r3, [r7, #13]
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 8000d4c:	4834      	ldr	r0, [pc, #208]	; (8000e20 <DS18B20_SetResolution+0x148>)
 8000d4e:	f000 fb67 	bl	8001420 <OneWire_ReadByte>
 8000d52:	4603      	mov	r3, r0
 8000d54:	73fb      	strb	r3, [r7, #15]
	
	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 8000d56:	79bb      	ldrb	r3, [r7, #6]
 8000d58:	2b09      	cmp	r3, #9
 8000d5a:	d108      	bne.n	8000d6e <DS18B20_SetResolution+0x96>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d62:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	f023 0320 	bic.w	r3, r3, #32
 8000d6a:	73fb      	strb	r3, [r7, #15]
 8000d6c:	e022      	b.n	8000db4 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 8000d6e:	79bb      	ldrb	r3, [r7, #6]
 8000d70:	2b0a      	cmp	r3, #10
 8000d72:	d108      	bne.n	8000d86 <DS18B20_SetResolution+0xae>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d7a:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	f043 0320 	orr.w	r3, r3, #32
 8000d82:	73fb      	strb	r3, [r7, #15]
 8000d84:	e016      	b.n	8000db4 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8000d86:	79bb      	ldrb	r3, [r7, #6]
 8000d88:	2b0b      	cmp	r3, #11
 8000d8a:	d108      	bne.n	8000d9e <DS18B20_SetResolution+0xc6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d92:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	f023 0320 	bic.w	r3, r3, #32
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	e00a      	b.n	8000db4 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8000d9e:	79bb      	ldrb	r3, [r7, #6]
 8000da0:	2b0c      	cmp	r3, #12
 8000da2:	d107      	bne.n	8000db4 <DS18B20_SetResolution+0xdc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000daa:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
 8000dae:	f043 0320 	orr.w	r3, r3, #32
 8000db2:	73fb      	strb	r3, [r7, #15]
	}
	
	OneWire_Reset(&OneWire); // Reset the bus
 8000db4:	481a      	ldr	r0, [pc, #104]	; (8000e20 <DS18B20_SetResolution+0x148>)
 8000db6:	f000 fa98 	bl	80012ea <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	011b      	lsls	r3, r3, #4
 8000dbe:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <DS18B20_SetResolution+0x144>)
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4816      	ldr	r0, [pc, #88]	; (8000e20 <DS18B20_SetResolution+0x148>)
 8000dc6:	f000 fc41 	bl	800164c <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 8000dca:	214e      	movs	r1, #78	; 0x4e
 8000dcc:	4814      	ldr	r0, [pc, #80]	; (8000e20 <DS18B20_SetResolution+0x148>)
 8000dce:	f000 fb09 	bl	80013e4 <OneWire_WriteByte>
	
	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 8000dd2:	7bbb      	ldrb	r3, [r7, #14]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4812      	ldr	r0, [pc, #72]	; (8000e20 <DS18B20_SetResolution+0x148>)
 8000dd8:	f000 fb04 	bl	80013e4 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 8000ddc:	7b7b      	ldrb	r3, [r7, #13]
 8000dde:	4619      	mov	r1, r3
 8000de0:	480f      	ldr	r0, [pc, #60]	; (8000e20 <DS18B20_SetResolution+0x148>)
 8000de2:	f000 faff 	bl	80013e4 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	4619      	mov	r1, r3
 8000dea:	480d      	ldr	r0, [pc, #52]	; (8000e20 <DS18B20_SetResolution+0x148>)
 8000dec:	f000 fafa 	bl	80013e4 <OneWire_WriteByte>
	
	OneWire_Reset(&OneWire); // Reset the bus
 8000df0:	480b      	ldr	r0, [pc, #44]	; (8000e20 <DS18B20_SetResolution+0x148>)
 8000df2:	f000 fa7a 	bl	80012ea <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	011b      	lsls	r3, r3, #4
 8000dfa:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <DS18B20_SetResolution+0x144>)
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4807      	ldr	r0, [pc, #28]	; (8000e20 <DS18B20_SetResolution+0x148>)
 8000e02:	f000 fc23 	bl	800164c <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 8000e06:	2148      	movs	r1, #72	; 0x48
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <DS18B20_SetResolution+0x148>)
 8000e0a:	f000 faeb 	bl	80013e4 <OneWire_WriteByte>
	
	return 1;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	200000dc 	.word	0x200000dc
 8000e1c:	20000088 	.word	0x20000088
 8000e20:	200000c8 	.word	0x200000c8

08000e24 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t* ROM)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b28      	cmp	r3, #40	; 0x28
 8000e32:	d101      	bne.n	8000e38 <DS18B20_Is+0x14>
		return 1;
 8000e34:	2301      	movs	r3, #1
 8000e36:	e000      	b.n	8000e3a <DS18B20_Is+0x16>
	return 0;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <DS18B20_AllDone>:

uint8_t DS18B20_AllDone(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <DS18B20_AllDone+0x10>)
 8000e4a:	f000 faa1 	bl	8001390 <OneWire_ReadBit>
 8000e4e:	4603      	mov	r3, r0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200000c8 	.word	0x200000c8

08000e58 <DS18B20_ReadAll>:

void DS18B20_ReadAll(void)
{
 8000e58:	b590      	push	{r4, r7, lr}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
	uint8_t i;

	if (DS18B20_AllDone())
 8000e5e:	f7ff fff1 	bl	8000e44 <DS18B20_AllDone>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d02e      	beq.n	8000ec6 <DS18B20_ReadAll+0x6e>
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8000e68:	2300      	movs	r3, #0
 8000e6a:	71fb      	strb	r3, [r7, #7]
 8000e6c:	e026      	b.n	8000ebc <DS18B20_ReadAll+0x64>
		{
			ds18b20[i].ValidDataFlag = 0;
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <DS18B20_ReadAll+0x78>)
 8000e72:	011b      	lsls	r3, r3, #4
 8000e74:	4413      	add	r3, r2
 8000e76:	330c      	adds	r3, #12
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	011b      	lsls	r3, r3, #4
 8000e80:	4a13      	ldr	r2, [pc, #76]	; (8000ed0 <DS18B20_ReadAll+0x78>)
 8000e82:	4413      	add	r3, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ffcd 	bl	8000e24 <DS18B20_Is>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d012      	beq.n	8000eb6 <DS18B20_ReadAll+0x5e>
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	011b      	lsls	r3, r3, #4
 8000e94:	3308      	adds	r3, #8
 8000e96:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <DS18B20_ReadAll+0x78>)
 8000e98:	441a      	add	r2, r3
 8000e9a:	79fc      	ldrb	r4, [r7, #7]
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fe6b 	bl	8000b7c <DS18B20_Read>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4a09      	ldr	r2, [pc, #36]	; (8000ed0 <DS18B20_ReadAll+0x78>)
 8000eac:	0123      	lsls	r3, r4, #4
 8000eae:	4413      	add	r3, r2
 8000eb0:	330c      	adds	r3, #12
 8000eb2:	460a      	mov	r2, r1
 8000eb4:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <DS18B20_ReadAll+0x7c>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	79fa      	ldrb	r2, [r7, #7]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d3d3      	bcc.n	8000e6e <DS18B20_ReadAll+0x16>
			}
		}
	}
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd90      	pop	{r4, r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000088 	.word	0x20000088
 8000ed4:	200000dc 	.word	0x200000dc

08000ed8 <DS18B20_Init>:
	return 1;

}

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
	uint8_t next = 0, i = 0, j;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73fb      	strb	r3, [r7, #15]
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	73bb      	strb	r3, [r7, #14]
	OneWire_Init(&OneWire, GPIOA, GPIO_PIN_1); // Init OneWire bus
 8000eea:	2202      	movs	r2, #2
 8000eec:	491f      	ldr	r1, [pc, #124]	; (8000f6c <DS18B20_Init+0x94>)
 8000eee:	4820      	ldr	r0, [pc, #128]	; (8000f70 <DS18B20_Init+0x98>)
 8000ef0:	f000 fbe8 	bl	80016c4 <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 8000ef4:	481e      	ldr	r0, [pc, #120]	; (8000f70 <DS18B20_Init+0x98>)
 8000ef6:	f000 fb8c 	bl	8001612 <OneWire_First>
 8000efa:	4603      	mov	r3, r0
 8000efc:	73fb      	strb	r3, [r7, #15]
	while(next)
 8000efe:	e018      	b.n	8000f32 <DS18B20_Init+0x5a>
	{
		TempSensorCount++;
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <DS18B20_Init+0x9c>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	3301      	adds	r3, #1
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <DS18B20_Init+0x9c>)
 8000f0a:	701a      	strb	r2, [r3, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 8000f0c:	7bbb      	ldrb	r3, [r7, #14]
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	73ba      	strb	r2, [r7, #14]
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	4a18      	ldr	r2, [pc, #96]	; (8000f78 <DS18B20_Init+0xa0>)
 8000f16:	4413      	add	r3, r2
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4815      	ldr	r0, [pc, #84]	; (8000f70 <DS18B20_Init+0x98>)
 8000f1c:	f000 fbb5 	bl	800168a <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 8000f20:	4813      	ldr	r0, [pc, #76]	; (8000f70 <DS18B20_Init+0x98>)
 8000f22:	f000 fb86 	bl	8001632 <OneWire_Next>
 8000f26:	4603      	mov	r3, r0
 8000f28:	73fb      	strb	r3, [r7, #15]
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 8000f2a:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <DS18B20_Init+0x9c>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d803      	bhi.n	8000f3a <DS18B20_Init+0x62>
	while(next)
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1e3      	bne.n	8000f00 <DS18B20_Init+0x28>
 8000f38:	e000      	b.n	8000f3c <DS18B20_Init+0x64>
			break;
 8000f3a:	bf00      	nop
	}

	for(j = 0; j < i; j++)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	737b      	strb	r3, [r7, #13]
 8000f40:	e00a      	b.n	8000f58 <DS18B20_Init+0x80>
	{
		DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 8000f42:	79fa      	ldrb	r2, [r7, #7]
 8000f44:	7b7b      	ldrb	r3, [r7, #13]
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fec5 	bl	8000cd8 <DS18B20_SetResolution>

		DS18B20_StartAll(); // Start conversion on all sensors
 8000f4e:	f7ff fe03 	bl	8000b58 <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 8000f52:	7b7b      	ldrb	r3, [r7, #13]
 8000f54:	3301      	adds	r3, #1
 8000f56:	737b      	strb	r3, [r7, #13]
 8000f58:	7b7a      	ldrb	r2, [r7, #13]
 8000f5a:	7bbb      	ldrb	r3, [r7, #14]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d3f0      	bcc.n	8000f42 <DS18B20_Init+0x6a>
	}
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40010800 	.word	0x40010800
 8000f70:	200000c8 	.word	0x200000c8
 8000f74:	200000dc 	.word	0x200000dc
 8000f78:	20000088 	.word	0x20000088

08000f7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	f107 0310 	add.w	r3, r7, #16
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f90:	4b26      	ldr	r3, [pc, #152]	; (800102c <MX_GPIO_Init+0xb0>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a25      	ldr	r2, [pc, #148]	; (800102c <MX_GPIO_Init+0xb0>)
 8000f96:	f043 0320 	orr.w	r3, r3, #32
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b23      	ldr	r3, [pc, #140]	; (800102c <MX_GPIO_Init+0xb0>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f003 0320 	and.w	r3, r3, #32
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa8:	4b20      	ldr	r3, [pc, #128]	; (800102c <MX_GPIO_Init+0xb0>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a1f      	ldr	r2, [pc, #124]	; (800102c <MX_GPIO_Init+0xb0>)
 8000fae:	f043 0304 	orr.w	r3, r3, #4
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b1d      	ldr	r3, [pc, #116]	; (800102c <MX_GPIO_Init+0xb0>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0304 	and.w	r3, r3, #4
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	; (800102c <MX_GPIO_Init+0xb0>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	4a19      	ldr	r2, [pc, #100]	; (800102c <MX_GPIO_Init+0xb0>)
 8000fc6:	f043 0308 	orr.w	r3, r3, #8
 8000fca:	6193      	str	r3, [r2, #24]
 8000fcc:	4b17      	ldr	r3, [pc, #92]	; (800102c <MX_GPIO_Init+0xb0>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f003 0308 	and.w	r3, r3, #8
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DS18B20_Pin_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2132      	movs	r1, #50	; 0x32
 8000fdc:	4814      	ldr	r0, [pc, #80]	; (8001030 <MX_GPIO_Init+0xb4>)
 8000fde:	f001 f9c8 	bl	8002372 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2104      	movs	r1, #4
 8000fe6:	4813      	ldr	r0, [pc, #76]	; (8001034 <MX_GPIO_Init+0xb8>)
 8000fe8:	f001 f9c3 	bl	8002372 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PA4 PA5 */
  GPIO_InitStruct.Pin = DS18B20_Pin_Pin|GPIO_PIN_4|GPIO_PIN_5;
 8000fec:	2332      	movs	r3, #50	; 0x32
 8000fee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	4619      	mov	r1, r3
 8001002:	480b      	ldr	r0, [pc, #44]	; (8001030 <MX_GPIO_Init+0xb4>)
 8001004:	f001 f81a 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001008:	2304      	movs	r3, #4
 800100a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2302      	movs	r3, #2
 8001016:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	4619      	mov	r1, r3
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_GPIO_Init+0xb8>)
 8001020:	f001 f80c 	bl	800203c <HAL_GPIO_Init>

}
 8001024:	bf00      	nop
 8001026:	3720      	adds	r7, #32
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40021000 	.word	0x40021000
 8001030:	40010800 	.word	0x40010800
 8001034:	40010c00 	.word	0x40010c00

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  tm1637_Segments[0] = A_SEG;
 800103e:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <main+0xc4>)
 8001040:	2201      	movs	r2, #1
 8001042:	701a      	strb	r2, [r3, #0]
  tm1637_Segments[1] = B_SEG;
 8001044:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <main+0xc4>)
 8001046:	2202      	movs	r2, #2
 8001048:	705a      	strb	r2, [r3, #1]
  tm1637_Segments[2] = C_SEG;
 800104a:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <main+0xc4>)
 800104c:	2204      	movs	r2, #4
 800104e:	709a      	strb	r2, [r3, #2]
  tm1637_Segments[3] = D_SEG;
 8001050:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <main+0xc4>)
 8001052:	2208      	movs	r2, #8
 8001054:	70da      	strb	r2, [r3, #3]
  tm1637_Segments[4] = E_SEG;
 8001056:	4b29      	ldr	r3, [pc, #164]	; (80010fc <main+0xc4>)
 8001058:	2210      	movs	r2, #16
 800105a:	711a      	strb	r2, [r3, #4]
  tm1637_Segments[5] = F_SEG;
 800105c:	4b27      	ldr	r3, [pc, #156]	; (80010fc <main+0xc4>)
 800105e:	2220      	movs	r2, #32
 8001060:	715a      	strb	r2, [r3, #5]
  tm1637_Segments[6] = G_SEG;
 8001062:	4b26      	ldr	r3, [pc, #152]	; (80010fc <main+0xc4>)
 8001064:	2240      	movs	r2, #64	; 0x40
 8001066:	719a      	strb	r2, [r3, #6]
  tm1637_Segments[7] = DP_SEG;
 8001068:	4b24      	ldr	r3, [pc, #144]	; (80010fc <main+0xc4>)
 800106a:	2280      	movs	r2, #128	; 0x80
 800106c:	71da      	strb	r2, [r3, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106e:	f000 fd9f 	bl	8001bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001072:	f000 f857 	bl	8001124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001076:	f7ff ff81 	bl	8000f7c <MX_GPIO_Init>
  MX_TIM1_Init();
 800107a:	f000 fbf9 	bl	8001870 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800107e:	f000 fcf3 	bl	8001a68 <MX_USART1_UART_Init>
  DS18B20_Init(12);
 8001082:	200c      	movs	r0, #12
 8001084:	f7ff ff28 	bl	8000ed8 <DS18B20_Init>
  MX_TIM2_Init();
 8001088:	f000 fc42 	bl	8001910 <MX_TIM2_Init>
  HAL_UART_Receive_IT(&huart1, receiveData, sizeof(receiveData));
 800108c:	2206      	movs	r2, #6
 800108e:	491c      	ldr	r1, [pc, #112]	; (8001100 <main+0xc8>)
 8001090:	481c      	ldr	r0, [pc, #112]	; (8001104 <main+0xcc>)
 8001092:	f002 fad2 	bl	800363a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001096:	481c      	ldr	r0, [pc, #112]	; (8001108 <main+0xd0>)
 8001098:	f001 fe46 	bl	8002d28 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  DS18B20_ReadAll();
 800109c:	f7ff fedc 	bl	8000e58 <DS18B20_ReadAll>
	  DS18B20_StartAll();
 80010a0:	f7ff fd5a 	bl	8000b58 <DS18B20_StartAll>
            // Định dạng chuỗi log với nhiệt độ
	  temperature = ds18b20[0].Temperature;
 80010a4:	4b19      	ldr	r3, [pc, #100]	; (800110c <main+0xd4>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fa11 	bl	80004d0 <__aeabi_f2uiz>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <main+0xd8>)
 80010b4:	701a      	strb	r2, [r3, #0]
	  sprintf(string, "%d C\n",temperature);
 80010b6:	4b16      	ldr	r3, [pc, #88]	; (8001110 <main+0xd8>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	4915      	ldr	r1, [pc, #84]	; (8001114 <main+0xdc>)
 80010be:	4816      	ldr	r0, [pc, #88]	; (8001118 <main+0xe0>)
 80010c0:	f003 f860 	bl	8004184 <siprintf>
	  uint8_t charSegments = char2segments('t');
 80010c4:	2074      	movs	r0, #116	; 0x74
 80010c6:	f7ff fc1d 	bl	8000904 <char2segments>
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]

		// Gán giá trị đoạn LED của chữ cái vào digit 1
	  CurrentDisplay[0] = charSegments;
 80010ce:	4a13      	ldr	r2, [pc, #76]	; (800111c <main+0xe4>)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	7013      	strb	r3, [r2, #0]

		// Gán giá trị đoạn LED của dấu 2 chấm vào digit 2
	  CurrentDisplay[1] = 0x01;  // Đặt giá trị cho dấu 2 chấm, có thể cần thay đổi tùy thuộc vào yêu cầu thực tế
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <main+0xe4>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	705a      	strb	r2, [r3, #1]
	  tm1637_DisplayInteger(temperature);
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <main+0xd8>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fb72 	bl	80007c8 <tm1637_DisplayInteger>
	  HAL_UART_Transmit(&huart1, (uint8_t *)string, sizeof(string), 100);
 80010e4:	2364      	movs	r3, #100	; 0x64
 80010e6:	2240      	movs	r2, #64	; 0x40
 80010e8:	490b      	ldr	r1, [pc, #44]	; (8001118 <main+0xe0>)
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <main+0xcc>)
 80010ec:	f002 fa22 	bl	8003534 <HAL_UART_Transmit>
	  HAL_Delay(delay);
 80010f0:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <main+0xe8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 fdbd 	bl	8001c74 <HAL_Delay>
  {
 80010fa:	e7cf      	b.n	800109c <main+0x64>
 80010fc:	2000012c 	.word	0x2000012c
 8001100:	200000e0 	.word	0x200000e0
 8001104:	200001c8 	.word	0x200001c8
 8001108:	20000180 	.word	0x20000180
 800110c:	20000088 	.word	0x20000088
 8001110:	200000e6 	.word	0x200000e6
 8001114:	08004b08 	.word	0x08004b08
 8001118:	200000e8 	.word	0x200000e8
 800111c:	20000128 	.word	0x20000128
 8001120:	2000000c 	.word	0x2000000c

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b090      	sub	sp, #64	; 0x40
 8001128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	f107 0318 	add.w	r3, r7, #24
 800112e:	2228      	movs	r2, #40	; 0x28
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f003 f846 	bl	80041c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001146:	2301      	movs	r3, #1
 8001148:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800114a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800114e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001154:	2301      	movs	r3, #1
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001158:	2302      	movs	r3, #2
 800115a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800115c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001160:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001162:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001166:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001168:	f107 0318 	add.w	r3, r7, #24
 800116c:	4618      	mov	r0, r3
 800116e:	f001 f931 	bl	80023d4 <HAL_RCC_OscConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001178:	f000 f84a 	bl	8001210 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117c:	230f      	movs	r3, #15
 800117e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001180:	2302      	movs	r3, #2
 8001182:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800118c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2102      	movs	r1, #2
 8001196:	4618      	mov	r0, r3
 8001198:	f001 fb9e 	bl	80028d8 <HAL_RCC_ClockConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011a2:	f000 f835 	bl	8001210 <Error_Handler>
  }
}
 80011a6:	bf00      	nop
 80011a8:	3740      	adds	r7, #64	; 0x40
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart1, (uint8_t*) logstring, sizeof(logstring), 200);
 80011b8:	23c8      	movs	r3, #200	; 0xc8
 80011ba:	220a      	movs	r2, #10
 80011bc:	490f      	ldr	r1, [pc, #60]	; (80011fc <HAL_UART_RxCpltCallback+0x4c>)
 80011be:	4810      	ldr	r0, [pc, #64]	; (8001200 <HAL_UART_RxCpltCallback+0x50>)
 80011c0:	f002 f9b8 	bl	8003534 <HAL_UART_Transmit>
   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80011c4:	2104      	movs	r1, #4
 80011c6:	480f      	ldr	r0, [pc, #60]	; (8001204 <HAL_UART_RxCpltCallback+0x54>)
 80011c8:	f001 f8eb 	bl	80023a2 <HAL_GPIO_TogglePin>
   HAL_UART_Receive_IT(&huart1, receiveData, sizeof(receiveData));
 80011cc:	2206      	movs	r2, #6
 80011ce:	490e      	ldr	r1, [pc, #56]	; (8001208 <HAL_UART_RxCpltCallback+0x58>)
 80011d0:	480b      	ldr	r0, [pc, #44]	; (8001200 <HAL_UART_RxCpltCallback+0x50>)
 80011d2:	f002 fa32 	bl	800363a <HAL_UART_Receive_IT>
   if(delay >= 9000) delay = 0;
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HAL_UART_RxCpltCallback+0x5c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f242 3227 	movw	r2, #8999	; 0x2327
 80011de:	4293      	cmp	r3, r2
 80011e0:	dd02      	ble.n	80011e8 <HAL_UART_RxCpltCallback+0x38>
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_UART_RxCpltCallback+0x5c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
   delay +=1000;
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <HAL_UART_RxCpltCallback+0x5c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80011f0:	4a06      	ldr	r2, [pc, #24]	; (800120c <HAL_UART_RxCpltCallback+0x5c>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000000 	.word	0x20000000
 8001200:	200001c8 	.word	0x200001c8
 8001204:	40010c00 	.word	0x40010c00
 8001208:	200000e0 	.word	0x200000e0
 800120c:	2000000c 	.word	0x2000000c

08001210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001214:	b672      	cpsid	i
}
 8001216:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001218:	e7fe      	b.n	8001218 <Error_Handler+0x8>
	...

0800121c <OneWire_Delay>:

//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <OneWire_Delay+0x2c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 800122e:	bf00      	nop
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <OneWire_Delay+0x2c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	429a      	cmp	r2, r3
 800123a:	d9f9      	bls.n	8001230 <OneWire_Delay+0x14>
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	20000138 	.word	0x20000138

0800124c <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 800125c:	2301      	movs	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	889b      	ldrh	r3, [r3, #4]
 8001264:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f107 0208 	add.w	r2, r7, #8
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f000 fee3 	bl	800203c <HAL_GPIO_Init>
}	
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 8001286:	2311      	movs	r3, #17
 8001288:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 800128e:	2301      	movs	r3, #1
 8001290:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	889b      	ldrh	r3, [r3, #4]
 8001296:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f107 0208 	add.w	r2, r7, #8
 80012a0:	4611      	mov	r1, r2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 feca 	bl	800203c <HAL_GPIO_Init>
}
 80012a8:	bf00      	nop
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <OneWire_OutputLow>:

//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	889b      	ldrh	r3, [r3, #4]
 80012bc:	041a      	lsls	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	611a      	str	r2, [r3, #16]
}	
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <OneWire_OutputHigh>:

void OneWire_OutputHigh(OneWire_t *onewire)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	889a      	ldrh	r2, [r3, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	611a      	str	r2, [r3, #16]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr

080012ea <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b084      	sub	sp, #16
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	OneWire_OutputLow(onewire);  // Write bus output low
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ffdc 	bl	80012b0 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ffc0 	bl	800127e <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 80012fe:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001302:	f7ff ff8b 	bl	800121c <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffa0 	bl	800124c <OneWire_BusInputDirection>
	OneWire_Delay(70);
 800130c:	2046      	movs	r0, #70	; 0x46
 800130e:	f7ff ff85 	bl	800121c <OneWire_Delay>
	
	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	889b      	ldrh	r3, [r3, #4]
 800131a:	4619      	mov	r1, r3
 800131c:	4610      	mov	r0, r2
 800131e:	f001 f811 	bl	8002344 <HAL_GPIO_ReadPin>
 8001322:	4603      	mov	r3, r0
 8001324:	73fb      	strb	r3, [r7, #15]
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 8001326:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 800132a:	f7ff ff77 	bl	800121c <OneWire_Delay>

	return i;
 800132e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	70fb      	strb	r3, [r7, #3]
	if (bit) // Send '1',
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00f      	beq.n	800136a <OneWire_WriteBit+0x32>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffb0 	bl	80012b0 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff94 	bl	800127e <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 8001356:	2006      	movs	r0, #6
 8001358:	f7ff ff60 	bl	800121c <OneWire_Delay>
		
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff75 	bl	800124c <OneWire_BusInputDirection>
		OneWire_Delay(64);
 8001362:	2040      	movs	r0, #64	; 0x40
 8001364:	f7ff ff5a 	bl	800121c <OneWire_Delay>
		OneWire_Delay(60);
		
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		OneWire_Delay(10);
	}
}
 8001368:	e00e      	b.n	8001388 <OneWire_WriteBit+0x50>
		OneWire_OutputLow(onewire); // Set the bus low
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ffa0 	bl	80012b0 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff84 	bl	800127e <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 8001376:	203c      	movs	r0, #60	; 0x3c
 8001378:	f7ff ff50 	bl	800121c <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff65 	bl	800124c <OneWire_BusInputDirection>
		OneWire_Delay(10);
 8001382:	200a      	movs	r0, #10
 8001384:	f7ff ff4a 	bl	800121c <OneWire_Delay>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0; // Default read bit state is low
 8001398:	2300      	movs	r3, #0
 800139a:	73fb      	strb	r3, [r7, #15]
	
	OneWire_OutputLow(onewire); // Set low to initiate reading
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ff87 	bl	80012b0 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ff6b 	bl	800127e <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 80013a8:	2002      	movs	r0, #2
 80013aa:	f7ff ff37 	bl	800121c <OneWire_Delay>
	
	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ff4c 	bl	800124c <OneWire_BusInputDirection>
	OneWire_Delay(10);
 80013b4:	200a      	movs	r0, #10
 80013b6:	f7ff ff31 	bl	800121c <OneWire_Delay>
	
	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	889b      	ldrh	r3, [r3, #4]
 80013c2:	4619      	mov	r1, r3
 80013c4:	4610      	mov	r0, r2
 80013c6:	f000 ffbd 	bl	8002344 <HAL_GPIO_ReadPin>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <OneWire_ReadBit+0x44>
		bit = 1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	73fb      	strb	r3, [r7, #15]
	
	OneWire_Delay(50); // Wait for end of read cycle
 80013d4:	2032      	movs	r0, #50	; 0x32
 80013d6:	f7ff ff21 	bl	800121c <OneWire_Delay>

	return bit;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 80013f0:	2308      	movs	r3, #8
 80013f2:	73fb      	strb	r3, [r7, #15]

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	4619      	mov	r1, r3
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ff9a 	bl	8001338 <OneWire_WriteBit>
		byte >>= 1;
 8001404:	78fb      	ldrb	r3, [r7, #3]
 8001406:	085b      	lsrs	r3, r3, #1
 8001408:	70fb      	strb	r3, [r7, #3]
	} while(--i);
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	3b01      	subs	r3, #1
 800140e:	73fb      	strb	r3, [r7, #15]
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1ee      	bne.n	80013f4 <OneWire_WriteByte+0x10>
}
 8001416:	bf00      	nop
 8001418:	bf00      	nop
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8001428:	2308      	movs	r3, #8
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	2300      	movs	r3, #0
 800142e:	73bb      	strb	r3, [r7, #14]

	do{
		byte >>= 1;
 8001430:	7bbb      	ldrb	r3, [r7, #14]
 8001432:	085b      	lsrs	r3, r3, #1
 8001434:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ffaa 	bl	8001390 <OneWire_ReadBit>
 800143c:	4603      	mov	r3, r0
 800143e:	01db      	lsls	r3, r3, #7
 8001440:	b25a      	sxtb	r2, r3
 8001442:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001446:	4313      	orrs	r3, r2
 8001448:	b25b      	sxtb	r3, r3
 800144a:	73bb      	strb	r3, [r7, #14]
	} while(--i);
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	3b01      	subs	r3, #1
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1eb      	bne.n	8001430 <OneWire_ReadByte+0x10>
	
	return byte;
 8001458:	7bbb      	ldrb	r3, [r7, #14]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <OneWire_ResetSearch>:

//
// 1-Wire search operations
//
void OneWire_ResetSearch(OneWire_t* onewire)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
	// Clear the search results
	onewire->LastDiscrepancy = 0;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	719a      	strb	r2, [r3, #6]
	onewire->LastDeviceFlag = 0;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	721a      	strb	r2, [r3, #8]
	onewire->LastFamilyDiscrepancy = 0;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	71da      	strb	r2, [r3, #7]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b084      	sub	sp, #16
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	460b      	mov	r3, r1
 8001490:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number;
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	id_bit_number = 1;
 8001492:	2301      	movs	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 800149e:	2301      	movs	r3, #1
 80014a0:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	733b      	strb	r3, [r7, #12]

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7a1b      	ldrb	r3, [r3, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f040 809a 	bne.w	80015e4 <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff1a 	bl	80012ea <OneWire_Reset>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00a      	beq.n	80014d2 <OneWire_Search+0x4c>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	719a      	strb	r2, [r3, #6]
			onewire->LastDeviceFlag = 0;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	721a      	strb	r2, [r3, #8]
			onewire->LastFamilyDiscrepancy = 0;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	71da      	strb	r2, [r3, #7]
			return 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e09b      	b.n	800160a <OneWire_Search+0x184>
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	4619      	mov	r1, r3
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ff84 	bl	80013e4 <OneWire_WriteByte>

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff57 	bl	8001390 <OneWire_ReadBit>
 80014e2:	4603      	mov	r3, r0
 80014e4:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ff52 	bl	8001390 <OneWire_ReadBit>
 80014ec:	4603      	mov	r3, r0
 80014ee:	723b      	strb	r3, [r7, #8]

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 80014f0:	7a7b      	ldrb	r3, [r7, #9]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d102      	bne.n	80014fc <OneWire_Search+0x76>
 80014f6:	7a3b      	ldrb	r3, [r7, #8]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d064      	beq.n	80015c6 <OneWire_Search+0x140>
			{
				break;
			}
			else
			{
				if (id_bit != cmp_id_bit)
 80014fc:	7a7a      	ldrb	r2, [r7, #9]
 80014fe:	7a3b      	ldrb	r3, [r7, #8]
 8001500:	429a      	cmp	r2, r3
 8001502:	d002      	beq.n	800150a <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // Bit write value for search
 8001504:	7a7b      	ldrb	r3, [r7, #9]
 8001506:	72bb      	strb	r3, [r7, #10]
 8001508:	e026      	b.n	8001558 <OneWire_Search+0xd2>
				}
				else // 00 - 2 devices
				{
					// Table 3. Search Path Direction
					if (id_bit_number < onewire->LastDiscrepancy)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	799b      	ldrb	r3, [r3, #6]
 800150e:	7bfa      	ldrb	r2, [r7, #15]
 8001510:	429a      	cmp	r2, r3
 8001512:	d20d      	bcs.n	8001530 <OneWire_Search+0xaa>
					{
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8001514:	7b7b      	ldrb	r3, [r7, #13]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	7a5a      	ldrb	r2, [r3, #9]
 800151c:	7afb      	ldrb	r3, [r7, #11]
 800151e:	4013      	ands	r3, r2
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	bf14      	ite	ne
 8001526:	2301      	movne	r3, #1
 8001528:	2300      	moveq	r3, #0
 800152a:	b2db      	uxtb	r3, r3
 800152c:	72bb      	strb	r3, [r7, #10]
 800152e:	e008      	b.n	8001542 <OneWire_Search+0xbc>
					}
					else
					{
						// If bit is equal to last - pick 1
						// If not - then pick 0
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	799b      	ldrb	r3, [r3, #6]
 8001534:	7bfa      	ldrb	r2, [r7, #15]
 8001536:	429a      	cmp	r2, r3
 8001538:	bf0c      	ite	eq
 800153a:	2301      	moveq	r3, #1
 800153c:	2300      	movne	r3, #0
 800153e:	b2db      	uxtb	r3, r3
 8001540:	72bb      	strb	r3, [r7, #10]
					}

					if (search_direction == 0) // If 0 was picked, write it to LastZero
 8001542:	7abb      	ldrb	r3, [r7, #10]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d107      	bne.n	8001558 <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	73bb      	strb	r3, [r7, #14]

						if (last_zero < 9) // Check for last discrepancy in family
 800154c:	7bbb      	ldrb	r3, [r7, #14]
 800154e:	2b08      	cmp	r3, #8
 8001550:	d802      	bhi.n	8001558 <OneWire_Search+0xd2>
						{
							onewire->LastFamilyDiscrepancy = last_zero;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7bba      	ldrb	r2, [r7, #14]
 8001556:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				if (search_direction == 1)
 8001558:	7abb      	ldrb	r3, [r7, #10]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d10c      	bne.n	8001578 <OneWire_Search+0xf2>
				{
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 800155e:	7b7b      	ldrb	r3, [r7, #13]
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	4413      	add	r3, r2
 8001564:	7a59      	ldrb	r1, [r3, #9]
 8001566:	7b7b      	ldrb	r3, [r7, #13]
 8001568:	7afa      	ldrb	r2, [r7, #11]
 800156a:	430a      	orrs	r2, r1
 800156c:	b2d1      	uxtb	r1, r2
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	460a      	mov	r2, r1
 8001574:	725a      	strb	r2, [r3, #9]
 8001576:	e010      	b.n	800159a <OneWire_Search+0x114>
				}
				else
				{
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 8001578:	7b7b      	ldrb	r3, [r7, #13]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	7a5b      	ldrb	r3, [r3, #9]
 8001580:	b25a      	sxtb	r2, r3
 8001582:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001586:	43db      	mvns	r3, r3
 8001588:	b25b      	sxtb	r3, r3
 800158a:	4013      	ands	r3, r2
 800158c:	b25a      	sxtb	r2, r3
 800158e:	7b7b      	ldrb	r3, [r7, #13]
 8001590:	b2d1      	uxtb	r1, r2
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	460a      	mov	r2, r1
 8001598:	725a      	strb	r2, [r3, #9]
				}
				
				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 800159a:	7abb      	ldrb	r3, [r7, #10]
 800159c:	4619      	mov	r1, r3
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff feca 	bl	8001338 <OneWire_WriteBit>

				id_bit_number++; // Next bit search - increase the id
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	3301      	adds	r3, #1
 80015a8:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 80015aa:	7afb      	ldrb	r3, [r7, #11]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	72fb      	strb	r3, [r7, #11]

				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 80015b0:	7afb      	ldrb	r3, [r7, #11]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d104      	bne.n	80015c0 <OneWire_Search+0x13a>
				{
					rom_byte_number++; // Next byte number
 80015b6:	7b7b      	ldrb	r3, [r7, #13]
 80015b8:	3301      	adds	r3, #1
 80015ba:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1; // Reset the mask - first bit
 80015bc:	2301      	movs	r3, #1
 80015be:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes
 80015c0:	7b7b      	ldrb	r3, [r7, #13]
 80015c2:	2b07      	cmp	r3, #7
 80015c4:	d98a      	bls.n	80014dc <OneWire_Search+0x56>

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	2b40      	cmp	r3, #64	; 0x40
 80015ca:	d90b      	bls.n	80015e4 <OneWire_Search+0x15e>
		{
			onewire->LastDiscrepancy = last_zero;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	7bba      	ldrb	r2, [r7, #14]
 80015d0:	719a      	strb	r2, [r3, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	799b      	ldrb	r3, [r3, #6]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <OneWire_Search+0x15a>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1; // Searching successful
 80015e0:	2301      	movs	r3, #1
 80015e2:	733b      	strb	r3, [r7, #12]
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 80015e4:	7b3b      	ldrb	r3, [r7, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <OneWire_Search+0x16c>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	7a5b      	ldrb	r3, [r3, #9]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10a      	bne.n	8001608 <OneWire_Search+0x182>
	{
		onewire->LastDiscrepancy = 0;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	719a      	strb	r2, [r3, #6]
		onewire->LastDeviceFlag = 0;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	721a      	strb	r2, [r3, #8]
		onewire->LastFamilyDiscrepancy = 0;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8001608:	7b3b      	ldrb	r3, [r7, #12]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <OneWire_First>:

//
//	Return first device on 1-Wire bus
//
uint8_t OneWire_First(OneWire_t* onewire)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
	OneWire_ResetSearch(onewire);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ff21 	bl	8001462 <OneWire_ResetSearch>

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8001620:	21f0      	movs	r1, #240	; 0xf0
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ff2f 	bl	8001486 <OneWire_Search>
 8001628:	4603      	mov	r3, r0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <OneWire_Next>:

//
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 800163a:	21f0      	movs	r1, #240	; 0xf0
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff22 	bl	8001486 <OneWire_Search>
 8001642:	4603      	mov	r3, r0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 8001656:	2155      	movs	r1, #85	; 0x55
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff fec3 	bl	80013e4 <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++)
 800165e:	2300      	movs	r3, #0
 8001660:	73fb      	strb	r3, [r7, #15]
 8001662:	e00a      	b.n	800167a <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	4413      	add	r3, r2
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff feb8 	bl	80013e4 <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	3301      	adds	r3, #1
 8001678:	73fb      	strb	r3, [r7, #15]
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	2b07      	cmp	r3, #7
 800167e:	d9f1      	bls.n	8001664 <OneWire_SelectWithPointer+0x18>
	}	
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 800168a:	b480      	push	{r7}
 800168c:	b085      	sub	sp, #20
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]
 8001698:	e00a      	b.n	80016b0 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = onewire->ROM_NO[i];
 800169a:	7bfa      	ldrb	r2, [r7, #15]
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	6839      	ldr	r1, [r7, #0]
 80016a0:	440b      	add	r3, r1
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	440a      	add	r2, r1
 80016a6:	7a52      	ldrb	r2, [r2, #9]
 80016a8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	3301      	adds	r3, #1
 80016ae:	73fb      	strb	r3, [r7, #15]
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	2b07      	cmp	r3, #7
 80016b4:	d9f1      	bls.n	800169a <OneWire_GetFullROM+0x10>
	}
}
 80016b6:	bf00      	nop
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
	...

080016c4 <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	4613      	mov	r3, r2
 80016d0:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 80016d2:	4811      	ldr	r0, [pc, #68]	; (8001718 <OneWire_Init+0x54>)
 80016d4:	f001 fade 	bl	8002c94 <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	601a      	str	r2, [r3, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	88fa      	ldrh	r2, [r7, #6]
 80016e2:	809a      	strh	r2, [r3, #4]

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f7ff fdca 	bl	800127e <OneWire_BusOutputDirection>
	OneWire_OutputHigh(onewire);
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f7ff fdef 	bl	80012ce <OneWire_OutputHigh>
	HAL_Delay(100);
 80016f0:	2064      	movs	r0, #100	; 0x64
 80016f2:	f000 fabf 	bl	8001c74 <HAL_Delay>
	OneWire_OutputLow(onewire);
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f7ff fdda 	bl	80012b0 <OneWire_OutputLow>
	HAL_Delay(100);
 80016fc:	2064      	movs	r0, #100	; 0x64
 80016fe:	f000 fab9 	bl	8001c74 <HAL_Delay>
	OneWire_OutputHigh(onewire);
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f7ff fde3 	bl	80012ce <OneWire_OutputHigh>
	HAL_Delay(200);
 8001708:	20c8      	movs	r0, #200	; 0xc8
 800170a:	f000 fab3 	bl	8001c74 <HAL_Delay>
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000138 	.word	0x20000138

0800171c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_MspInit+0x5c>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	4a14      	ldr	r2, [pc, #80]	; (8001778 <HAL_MspInit+0x5c>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6193      	str	r3, [r2, #24]
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_MspInit+0x5c>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <HAL_MspInit+0x5c>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	4a0e      	ldr	r2, [pc, #56]	; (8001778 <HAL_MspInit+0x5c>)
 8001740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001744:	61d3      	str	r3, [r2, #28]
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <HAL_MspInit+0x5c>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <HAL_MspInit+0x60>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	4a04      	ldr	r2, [pc, #16]	; (800177c <HAL_MspInit+0x60>)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176e:	bf00      	nop
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	40021000 	.word	0x40021000
 800177c:	40010000 	.word	0x40010000

08001780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <NMI_Handler+0x4>

08001786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178a:	e7fe      	b.n	800178a <HardFault_Handler+0x4>

0800178c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <MemManage_Handler+0x4>

08001792 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <BusFault_Handler+0x4>

08001798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <UsageFault_Handler+0x4>

0800179e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c6:	f000 fa39 	bl	8001c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <TIM2_IRQHandler+0x10>)
 80017d6:	f001 faf9 	bl	8002dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000180 	.word	0x20000180

080017e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <USART1_IRQHandler+0x10>)
 80017ea:	f001 ff4b 	bl	8003684 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200001c8 	.word	0x200001c8

080017f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001800:	4a14      	ldr	r2, [pc, #80]	; (8001854 <_sbrk+0x5c>)
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <_sbrk+0x60>)
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d102      	bne.n	800181a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <_sbrk+0x64>)
 8001816:	4a12      	ldr	r2, [pc, #72]	; (8001860 <_sbrk+0x68>)
 8001818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	429a      	cmp	r2, r3
 8001826:	d207      	bcs.n	8001838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001828:	f002 fcd4 	bl	80041d4 <__errno>
 800182c:	4603      	mov	r3, r0
 800182e:	220c      	movs	r2, #12
 8001830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
 8001836:	e009      	b.n	800184c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	4a05      	ldr	r2, [pc, #20]	; (800185c <_sbrk+0x64>)
 8001848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800184a:	68fb      	ldr	r3, [r7, #12]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20005000 	.word	0x20005000
 8001858:	00000400 	.word	0x00000400
 800185c:	20000134 	.word	0x20000134
 8001860:	20000360 	.word	0x20000360

08001864 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001876:	f107 0308 	add.w	r3, r7, #8
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001884:	463b      	mov	r3, r7
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800188c:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <MX_TIM1_Init+0x98>)
 800188e:	4a1f      	ldr	r2, [pc, #124]	; (800190c <MX_TIM1_Init+0x9c>)
 8001890:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8001892:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <MX_TIM1_Init+0x98>)
 8001894:	223f      	movs	r2, #63	; 0x3f
 8001896:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <MX_TIM1_Init+0x98>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <MX_TIM1_Init+0x98>)
 80018a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a6:	4b18      	ldr	r3, [pc, #96]	; (8001908 <MX_TIM1_Init+0x98>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018ac:	4b16      	ldr	r3, [pc, #88]	; (8001908 <MX_TIM1_Init+0x98>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <MX_TIM1_Init+0x98>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018b8:	4813      	ldr	r0, [pc, #76]	; (8001908 <MX_TIM1_Init+0x98>)
 80018ba:	f001 f99b 	bl	8002bf4 <HAL_TIM_Base_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80018c4:	f7ff fca4 	bl	8001210 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018ce:	f107 0308 	add.w	r3, r7, #8
 80018d2:	4619      	mov	r1, r3
 80018d4:	480c      	ldr	r0, [pc, #48]	; (8001908 <MX_TIM1_Init+0x98>)
 80018d6:	f001 fb81 	bl	8002fdc <HAL_TIM_ConfigClockSource>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80018e0:	f7ff fc96 	bl	8001210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e4:	2300      	movs	r3, #0
 80018e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018ec:	463b      	mov	r3, r7
 80018ee:	4619      	mov	r1, r3
 80018f0:	4805      	ldr	r0, [pc, #20]	; (8001908 <MX_TIM1_Init+0x98>)
 80018f2:	f001 fd5f 	bl	80033b4 <HAL_TIMEx_MasterConfigSynchronization>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80018fc:	f7ff fc88 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001900:	bf00      	nop
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000138 	.word	0x20000138
 800190c:	40012c00 	.word	0x40012c00

08001910 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001916:	f107 0308 	add.w	r3, r7, #8
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001924:	463b      	mov	r3, r7
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800192c:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <MX_TIM2_Init+0xa4>)
 800192e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001932:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3599;
 8001934:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <MX_TIM2_Init+0xa4>)
 8001936:	f640 620f 	movw	r2, #3599	; 0xe0f
 800193a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193c:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <MX_TIM2_Init+0xa4>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001942:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <MX_TIM2_Init+0xa4>)
 8001944:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001948:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194a:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <MX_TIM2_Init+0xa4>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001950:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <MX_TIM2_Init+0xa4>)
 8001952:	2200      	movs	r2, #0
 8001954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001956:	4817      	ldr	r0, [pc, #92]	; (80019b4 <MX_TIM2_Init+0xa4>)
 8001958:	f001 f94c 	bl	8002bf4 <HAL_TIM_Base_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001962:	f7ff fc55 	bl	8001210 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001966:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800196a:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001978:	f107 0308 	add.w	r3, r7, #8
 800197c:	4619      	mov	r1, r3
 800197e:	480d      	ldr	r0, [pc, #52]	; (80019b4 <MX_TIM2_Init+0xa4>)
 8001980:	f001 fb2c 	bl	8002fdc <HAL_TIM_ConfigClockSource>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800198a:	f7ff fc41 	bl	8001210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001996:	463b      	mov	r3, r7
 8001998:	4619      	mov	r1, r3
 800199a:	4806      	ldr	r0, [pc, #24]	; (80019b4 <MX_TIM2_Init+0xa4>)
 800199c:	f001 fd0a 	bl	80033b4 <HAL_TIMEx_MasterConfigSynchronization>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80019a6:	f7ff fc33 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000180 	.word	0x20000180

080019b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	; 0x28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 0318 	add.w	r3, r7, #24
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a22      	ldr	r2, [pc, #136]	; (8001a5c <HAL_TIM_Base_MspInit+0xa4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d10c      	bne.n	80019f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019d8:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <HAL_TIM_Base_MspInit+0xa8>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a20      	ldr	r2, [pc, #128]	; (8001a60 <HAL_TIM_Base_MspInit+0xa8>)
 80019de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019e2:	6193      	str	r3, [r2, #24]
 80019e4:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <HAL_TIM_Base_MspInit+0xa8>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80019f0:	e030      	b.n	8001a54 <HAL_TIM_Base_MspInit+0x9c>
  else if(tim_baseHandle->Instance==TIM2)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019fa:	d12b      	bne.n	8001a54 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019fc:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <HAL_TIM_Base_MspInit+0xa8>)
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	4a17      	ldr	r2, [pc, #92]	; (8001a60 <HAL_TIM_Base_MspInit+0xa8>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	61d3      	str	r3, [r2, #28]
 8001a08:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <HAL_TIM_Base_MspInit+0xa8>)
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_TIM_Base_MspInit+0xa8>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <HAL_TIM_Base_MspInit+0xa8>)
 8001a1a:	f043 0304 	orr.w	r3, r3, #4
 8001a1e:	6193      	str	r3, [r2, #24]
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <HAL_TIM_Base_MspInit+0xa8>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	f107 0318 	add.w	r3, r7, #24
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4809      	ldr	r0, [pc, #36]	; (8001a64 <HAL_TIM_Base_MspInit+0xac>)
 8001a40:	f000 fafc 	bl	800203c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2100      	movs	r1, #0
 8001a48:	201c      	movs	r0, #28
 8001a4a:	f000 fa0e 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a4e:	201c      	movs	r0, #28
 8001a50:	f000 fa27 	bl	8001ea2 <HAL_NVIC_EnableIRQ>
}
 8001a54:	bf00      	nop
 8001a56:	3728      	adds	r7, #40	; 0x28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40012c00 	.word	0x40012c00
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40010800 	.word	0x40010800

08001a68 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a6e:	4a12      	ldr	r2, [pc, #72]	; (8001ab8 <MX_USART1_UART_Init+0x50>)
 8001a70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a72:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a92:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a9e:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <MX_USART1_UART_Init+0x4c>)
 8001aa0:	f001 fcf8 	bl	8003494 <HAL_UART_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001aaa:	f7ff fbb1 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200001c8 	.word	0x200001c8
 8001ab8:	40013800 	.word	0x40013800

08001abc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a20      	ldr	r2, [pc, #128]	; (8001b58 <HAL_UART_MspInit+0x9c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d139      	bne.n	8001b50 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001adc:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <HAL_UART_MspInit+0xa0>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	4a1e      	ldr	r2, [pc, #120]	; (8001b5c <HAL_UART_MspInit+0xa0>)
 8001ae2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae6:	6193      	str	r3, [r2, #24]
 8001ae8:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <HAL_UART_MspInit+0xa0>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af4:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_UART_MspInit+0xa0>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	4a18      	ldr	r2, [pc, #96]	; (8001b5c <HAL_UART_MspInit+0xa0>)
 8001afa:	f043 0304 	orr.w	r3, r3, #4
 8001afe:	6193      	str	r3, [r2, #24]
 8001b00:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <HAL_UART_MspInit+0xa0>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 0310 	add.w	r3, r7, #16
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480f      	ldr	r0, [pc, #60]	; (8001b60 <HAL_UART_MspInit+0xa4>)
 8001b22:	f000 fa8b 	bl	800203c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b34:	f107 0310 	add.w	r3, r7, #16
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4809      	ldr	r0, [pc, #36]	; (8001b60 <HAL_UART_MspInit+0xa4>)
 8001b3c:	f000 fa7e 	bl	800203c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2100      	movs	r1, #0
 8001b44:	2025      	movs	r0, #37	; 0x25
 8001b46:	f000 f990 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b4a:	2025      	movs	r0, #37	; 0x25
 8001b4c:	f000 f9a9 	bl	8001ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b50:	bf00      	nop
 8001b52:	3720      	adds	r7, #32
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40013800 	.word	0x40013800
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40010800 	.word	0x40010800

08001b64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b64:	f7ff fe7e 	bl	8001864 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b68:	480b      	ldr	r0, [pc, #44]	; (8001b98 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b6a:	490c      	ldr	r1, [pc, #48]	; (8001b9c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b6c:	4a0c      	ldr	r2, [pc, #48]	; (8001ba0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b70:	e002      	b.n	8001b78 <LoopCopyDataInit>

08001b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b76:	3304      	adds	r3, #4

08001b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b7c:	d3f9      	bcc.n	8001b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7e:	4a09      	ldr	r2, [pc, #36]	; (8001ba4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b80:	4c09      	ldr	r4, [pc, #36]	; (8001ba8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b84:	e001      	b.n	8001b8a <LoopFillZerobss>

08001b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b88:	3204      	adds	r2, #4

08001b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b8c:	d3fb      	bcc.n	8001b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b8e:	f002 fb27 	bl	80041e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b92:	f7ff fa51 	bl	8001038 <main>
  bx lr
 8001b96:	4770      	bx	lr
  ldr r0, =_sdata
 8001b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b9c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001ba0:	08004b78 	.word	0x08004b78
  ldr r2, =_sbss
 8001ba4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001ba8:	2000035c 	.word	0x2000035c

08001bac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bac:	e7fe      	b.n	8001bac <ADC1_2_IRQHandler>
	...

08001bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_Init+0x28>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a07      	ldr	r2, [pc, #28]	; (8001bd8 <HAL_Init+0x28>)
 8001bba:	f043 0310 	orr.w	r3, r3, #16
 8001bbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc0:	2003      	movs	r0, #3
 8001bc2:	f000 f947 	bl	8001e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc6:	200f      	movs	r0, #15
 8001bc8:	f000 f808 	bl	8001bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bcc:	f7ff fda6 	bl	800171c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40022000 	.word	0x40022000

08001bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_InitTick+0x54>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_InitTick+0x58>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f95f 	bl	8001ebe <HAL_SYSTICK_Config>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00e      	b.n	8001c28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b0f      	cmp	r3, #15
 8001c0e:	d80a      	bhi.n	8001c26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c10:	2200      	movs	r2, #0
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295
 8001c18:	f000 f927 	bl	8001e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c1c:	4a06      	ldr	r2, [pc, #24]	; (8001c38 <HAL_InitTick+0x5c>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e000      	b.n	8001c28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000010 	.word	0x20000010
 8001c34:	20000018 	.word	0x20000018
 8001c38:	20000014 	.word	0x20000014

08001c3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_IncTick+0x1c>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_IncTick+0x20>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a03      	ldr	r2, [pc, #12]	; (8001c5c <HAL_IncTick+0x20>)
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	20000018 	.word	0x20000018
 8001c5c:	20000210 	.word	0x20000210

08001c60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return uwTick;
 8001c64:	4b02      	ldr	r3, [pc, #8]	; (8001c70 <HAL_GetTick+0x10>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	20000210 	.word	0x20000210

08001c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	f7ff fff0 	bl	8001c60 <HAL_GetTick>
 8001c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8c:	d005      	beq.n	8001c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_Delay+0x44>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c9a:	bf00      	nop
 8001c9c:	f7ff ffe0 	bl	8001c60 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d8f7      	bhi.n	8001c9c <HAL_Delay+0x28>
  {
  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000018 	.word	0x20000018

08001cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cee:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	60d3      	str	r3, [r2, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <__NVIC_GetPriorityGrouping+0x18>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	f003 0307 	and.w	r3, r3, #7
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	db0b      	blt.n	8001d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	f003 021f 	and.w	r2, r3, #31
 8001d38:	4906      	ldr	r1, [pc, #24]	; (8001d54 <__NVIC_EnableIRQ+0x34>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	2001      	movs	r0, #1
 8001d42:	fa00 f202 	lsl.w	r2, r0, r2
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	e000e100 	.word	0xe000e100

08001d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	6039      	str	r1, [r7, #0]
 8001d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	db0a      	blt.n	8001d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	490c      	ldr	r1, [pc, #48]	; (8001da4 <__NVIC_SetPriority+0x4c>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	0112      	lsls	r2, r2, #4
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d80:	e00a      	b.n	8001d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4908      	ldr	r1, [pc, #32]	; (8001da8 <__NVIC_SetPriority+0x50>)
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	3b04      	subs	r3, #4
 8001d90:	0112      	lsls	r2, r2, #4
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	440b      	add	r3, r1
 8001d96:	761a      	strb	r2, [r3, #24]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000e100 	.word	0xe000e100
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f1c3 0307 	rsb	r3, r3, #7
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	bf28      	it	cs
 8001dca:	2304      	movcs	r3, #4
 8001dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d902      	bls.n	8001ddc <NVIC_EncodePriority+0x30>
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3b03      	subs	r3, #3
 8001dda:	e000      	b.n	8001dde <NVIC_EncodePriority+0x32>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	f04f 32ff 	mov.w	r2, #4294967295
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	401a      	ands	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	43d9      	mvns	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	4313      	orrs	r3, r2
         );
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3724      	adds	r7, #36	; 0x24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e20:	d301      	bcc.n	8001e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00f      	b.n	8001e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e26:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <SysTick_Config+0x40>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2e:	210f      	movs	r1, #15
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	f7ff ff90 	bl	8001d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <SysTick_Config+0x40>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3e:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <SysTick_Config+0x40>)
 8001e40:	2207      	movs	r2, #7
 8001e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	e000e010 	.word	0xe000e010

08001e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ff2d 	bl	8001cbc <__NVIC_SetPriorityGrouping>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e7c:	f7ff ff42 	bl	8001d04 <__NVIC_GetPriorityGrouping>
 8001e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	6978      	ldr	r0, [r7, #20]
 8001e88:	f7ff ff90 	bl	8001dac <NVIC_EncodePriority>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff5f 	bl	8001d58 <__NVIC_SetPriority>
}
 8001e9a:	bf00      	nop
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff35 	bl	8001d20 <__NVIC_EnableIRQ>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ffa2 	bl	8001e10 <SysTick_Config>
 8001ecc:	4603      	mov	r3, r0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b085      	sub	sp, #20
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d008      	beq.n	8001f00 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e020      	b.n	8001f42 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 020e 	bic.w	r2, r2, #14
 8001f0e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0201 	bic.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f28:	2101      	movs	r1, #1
 8001f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr

08001f4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d005      	beq.n	8001f70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2204      	movs	r2, #4
 8001f68:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	73fb      	strb	r3, [r7, #15]
 8001f6e:	e051      	b.n	8002014 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 020e 	bic.w	r2, r2, #14
 8001f7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0201 	bic.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a22      	ldr	r2, [pc, #136]	; (8002020 <HAL_DMA_Abort_IT+0xd4>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d029      	beq.n	8001fee <HAL_DMA_Abort_IT+0xa2>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a21      	ldr	r2, [pc, #132]	; (8002024 <HAL_DMA_Abort_IT+0xd8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d022      	beq.n	8001fea <HAL_DMA_Abort_IT+0x9e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a1f      	ldr	r2, [pc, #124]	; (8002028 <HAL_DMA_Abort_IT+0xdc>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d01a      	beq.n	8001fe4 <HAL_DMA_Abort_IT+0x98>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1e      	ldr	r2, [pc, #120]	; (800202c <HAL_DMA_Abort_IT+0xe0>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d012      	beq.n	8001fde <HAL_DMA_Abort_IT+0x92>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <HAL_DMA_Abort_IT+0xe4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00a      	beq.n	8001fd8 <HAL_DMA_Abort_IT+0x8c>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1b      	ldr	r2, [pc, #108]	; (8002034 <HAL_DMA_Abort_IT+0xe8>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d102      	bne.n	8001fd2 <HAL_DMA_Abort_IT+0x86>
 8001fcc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fd0:	e00e      	b.n	8001ff0 <HAL_DMA_Abort_IT+0xa4>
 8001fd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fd6:	e00b      	b.n	8001ff0 <HAL_DMA_Abort_IT+0xa4>
 8001fd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fdc:	e008      	b.n	8001ff0 <HAL_DMA_Abort_IT+0xa4>
 8001fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe2:	e005      	b.n	8001ff0 <HAL_DMA_Abort_IT+0xa4>
 8001fe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fe8:	e002      	b.n	8001ff0 <HAL_DMA_Abort_IT+0xa4>
 8001fea:	2310      	movs	r3, #16
 8001fec:	e000      	b.n	8001ff0 <HAL_DMA_Abort_IT+0xa4>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	4a11      	ldr	r2, [pc, #68]	; (8002038 <HAL_DMA_Abort_IT+0xec>)
 8001ff2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	4798      	blx	r3
    } 
  }
  return status;
 8002014:	7bfb      	ldrb	r3, [r7, #15]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40020008 	.word	0x40020008
 8002024:	4002001c 	.word	0x4002001c
 8002028:	40020030 	.word	0x40020030
 800202c:	40020044 	.word	0x40020044
 8002030:	40020058 	.word	0x40020058
 8002034:	4002006c 	.word	0x4002006c
 8002038:	40020000 	.word	0x40020000

0800203c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800203c:	b480      	push	{r7}
 800203e:	b08b      	sub	sp, #44	; 0x2c
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002046:	2300      	movs	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800204a:	2300      	movs	r3, #0
 800204c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204e:	e169      	b.n	8002324 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002050:	2201      	movs	r2, #1
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	429a      	cmp	r2, r3
 800206a:	f040 8158 	bne.w	800231e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4a9a      	ldr	r2, [pc, #616]	; (80022dc <HAL_GPIO_Init+0x2a0>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d05e      	beq.n	8002136 <HAL_GPIO_Init+0xfa>
 8002078:	4a98      	ldr	r2, [pc, #608]	; (80022dc <HAL_GPIO_Init+0x2a0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d875      	bhi.n	800216a <HAL_GPIO_Init+0x12e>
 800207e:	4a98      	ldr	r2, [pc, #608]	; (80022e0 <HAL_GPIO_Init+0x2a4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d058      	beq.n	8002136 <HAL_GPIO_Init+0xfa>
 8002084:	4a96      	ldr	r2, [pc, #600]	; (80022e0 <HAL_GPIO_Init+0x2a4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d86f      	bhi.n	800216a <HAL_GPIO_Init+0x12e>
 800208a:	4a96      	ldr	r2, [pc, #600]	; (80022e4 <HAL_GPIO_Init+0x2a8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d052      	beq.n	8002136 <HAL_GPIO_Init+0xfa>
 8002090:	4a94      	ldr	r2, [pc, #592]	; (80022e4 <HAL_GPIO_Init+0x2a8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d869      	bhi.n	800216a <HAL_GPIO_Init+0x12e>
 8002096:	4a94      	ldr	r2, [pc, #592]	; (80022e8 <HAL_GPIO_Init+0x2ac>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d04c      	beq.n	8002136 <HAL_GPIO_Init+0xfa>
 800209c:	4a92      	ldr	r2, [pc, #584]	; (80022e8 <HAL_GPIO_Init+0x2ac>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d863      	bhi.n	800216a <HAL_GPIO_Init+0x12e>
 80020a2:	4a92      	ldr	r2, [pc, #584]	; (80022ec <HAL_GPIO_Init+0x2b0>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d046      	beq.n	8002136 <HAL_GPIO_Init+0xfa>
 80020a8:	4a90      	ldr	r2, [pc, #576]	; (80022ec <HAL_GPIO_Init+0x2b0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d85d      	bhi.n	800216a <HAL_GPIO_Init+0x12e>
 80020ae:	2b12      	cmp	r3, #18
 80020b0:	d82a      	bhi.n	8002108 <HAL_GPIO_Init+0xcc>
 80020b2:	2b12      	cmp	r3, #18
 80020b4:	d859      	bhi.n	800216a <HAL_GPIO_Init+0x12e>
 80020b6:	a201      	add	r2, pc, #4	; (adr r2, 80020bc <HAL_GPIO_Init+0x80>)
 80020b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020bc:	08002137 	.word	0x08002137
 80020c0:	08002111 	.word	0x08002111
 80020c4:	08002123 	.word	0x08002123
 80020c8:	08002165 	.word	0x08002165
 80020cc:	0800216b 	.word	0x0800216b
 80020d0:	0800216b 	.word	0x0800216b
 80020d4:	0800216b 	.word	0x0800216b
 80020d8:	0800216b 	.word	0x0800216b
 80020dc:	0800216b 	.word	0x0800216b
 80020e0:	0800216b 	.word	0x0800216b
 80020e4:	0800216b 	.word	0x0800216b
 80020e8:	0800216b 	.word	0x0800216b
 80020ec:	0800216b 	.word	0x0800216b
 80020f0:	0800216b 	.word	0x0800216b
 80020f4:	0800216b 	.word	0x0800216b
 80020f8:	0800216b 	.word	0x0800216b
 80020fc:	0800216b 	.word	0x0800216b
 8002100:	08002119 	.word	0x08002119
 8002104:	0800212d 	.word	0x0800212d
 8002108:	4a79      	ldr	r2, [pc, #484]	; (80022f0 <HAL_GPIO_Init+0x2b4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d013      	beq.n	8002136 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800210e:	e02c      	b.n	800216a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	623b      	str	r3, [r7, #32]
          break;
 8002116:	e029      	b.n	800216c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	3304      	adds	r3, #4
 800211e:	623b      	str	r3, [r7, #32]
          break;
 8002120:	e024      	b.n	800216c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	3308      	adds	r3, #8
 8002128:	623b      	str	r3, [r7, #32]
          break;
 800212a:	e01f      	b.n	800216c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	330c      	adds	r3, #12
 8002132:	623b      	str	r3, [r7, #32]
          break;
 8002134:	e01a      	b.n	800216c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d102      	bne.n	8002144 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800213e:	2304      	movs	r3, #4
 8002140:	623b      	str	r3, [r7, #32]
          break;
 8002142:	e013      	b.n	800216c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d105      	bne.n	8002158 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800214c:	2308      	movs	r3, #8
 800214e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69fa      	ldr	r2, [r7, #28]
 8002154:	611a      	str	r2, [r3, #16]
          break;
 8002156:	e009      	b.n	800216c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002158:	2308      	movs	r3, #8
 800215a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69fa      	ldr	r2, [r7, #28]
 8002160:	615a      	str	r2, [r3, #20]
          break;
 8002162:	e003      	b.n	800216c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002164:	2300      	movs	r3, #0
 8002166:	623b      	str	r3, [r7, #32]
          break;
 8002168:	e000      	b.n	800216c <HAL_GPIO_Init+0x130>
          break;
 800216a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	2bff      	cmp	r3, #255	; 0xff
 8002170:	d801      	bhi.n	8002176 <HAL_GPIO_Init+0x13a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	e001      	b.n	800217a <HAL_GPIO_Init+0x13e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3304      	adds	r3, #4
 800217a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	2bff      	cmp	r3, #255	; 0xff
 8002180:	d802      	bhi.n	8002188 <HAL_GPIO_Init+0x14c>
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	e002      	b.n	800218e <HAL_GPIO_Init+0x152>
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	3b08      	subs	r3, #8
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	210f      	movs	r1, #15
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	fa01 f303 	lsl.w	r3, r1, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	401a      	ands	r2, r3
 80021a0:	6a39      	ldr	r1, [r7, #32]
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	fa01 f303 	lsl.w	r3, r1, r3
 80021a8:	431a      	orrs	r2, r3
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 80b1 	beq.w	800231e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021bc:	4b4d      	ldr	r3, [pc, #308]	; (80022f4 <HAL_GPIO_Init+0x2b8>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	4a4c      	ldr	r2, [pc, #304]	; (80022f4 <HAL_GPIO_Init+0x2b8>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6193      	str	r3, [r2, #24]
 80021c8:	4b4a      	ldr	r3, [pc, #296]	; (80022f4 <HAL_GPIO_Init+0x2b8>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021d4:	4a48      	ldr	r2, [pc, #288]	; (80022f8 <HAL_GPIO_Init+0x2bc>)
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	089b      	lsrs	r3, r3, #2
 80021da:	3302      	adds	r3, #2
 80021dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	220f      	movs	r2, #15
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4013      	ands	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a40      	ldr	r2, [pc, #256]	; (80022fc <HAL_GPIO_Init+0x2c0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d013      	beq.n	8002228 <HAL_GPIO_Init+0x1ec>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a3f      	ldr	r2, [pc, #252]	; (8002300 <HAL_GPIO_Init+0x2c4>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d00d      	beq.n	8002224 <HAL_GPIO_Init+0x1e8>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a3e      	ldr	r2, [pc, #248]	; (8002304 <HAL_GPIO_Init+0x2c8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d007      	beq.n	8002220 <HAL_GPIO_Init+0x1e4>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a3d      	ldr	r2, [pc, #244]	; (8002308 <HAL_GPIO_Init+0x2cc>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d101      	bne.n	800221c <HAL_GPIO_Init+0x1e0>
 8002218:	2303      	movs	r3, #3
 800221a:	e006      	b.n	800222a <HAL_GPIO_Init+0x1ee>
 800221c:	2304      	movs	r3, #4
 800221e:	e004      	b.n	800222a <HAL_GPIO_Init+0x1ee>
 8002220:	2302      	movs	r3, #2
 8002222:	e002      	b.n	800222a <HAL_GPIO_Init+0x1ee>
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <HAL_GPIO_Init+0x1ee>
 8002228:	2300      	movs	r3, #0
 800222a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222c:	f002 0203 	and.w	r2, r2, #3
 8002230:	0092      	lsls	r2, r2, #2
 8002232:	4093      	lsls	r3, r2
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	4313      	orrs	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800223a:	492f      	ldr	r1, [pc, #188]	; (80022f8 <HAL_GPIO_Init+0x2bc>)
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	089b      	lsrs	r3, r3, #2
 8002240:	3302      	adds	r3, #2
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d006      	beq.n	8002262 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002254:	4b2d      	ldr	r3, [pc, #180]	; (800230c <HAL_GPIO_Init+0x2d0>)
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	492c      	ldr	r1, [pc, #176]	; (800230c <HAL_GPIO_Init+0x2d0>)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	4313      	orrs	r3, r2
 800225e:	608b      	str	r3, [r1, #8]
 8002260:	e006      	b.n	8002270 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002262:	4b2a      	ldr	r3, [pc, #168]	; (800230c <HAL_GPIO_Init+0x2d0>)
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	43db      	mvns	r3, r3
 800226a:	4928      	ldr	r1, [pc, #160]	; (800230c <HAL_GPIO_Init+0x2d0>)
 800226c:	4013      	ands	r3, r2
 800226e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d006      	beq.n	800228a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800227c:	4b23      	ldr	r3, [pc, #140]	; (800230c <HAL_GPIO_Init+0x2d0>)
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	4922      	ldr	r1, [pc, #136]	; (800230c <HAL_GPIO_Init+0x2d0>)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	60cb      	str	r3, [r1, #12]
 8002288:	e006      	b.n	8002298 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800228a:	4b20      	ldr	r3, [pc, #128]	; (800230c <HAL_GPIO_Init+0x2d0>)
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	43db      	mvns	r3, r3
 8002292:	491e      	ldr	r1, [pc, #120]	; (800230c <HAL_GPIO_Init+0x2d0>)
 8002294:	4013      	ands	r3, r2
 8002296:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d006      	beq.n	80022b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_GPIO_Init+0x2d0>)
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	4918      	ldr	r1, [pc, #96]	; (800230c <HAL_GPIO_Init+0x2d0>)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]
 80022b0:	e006      	b.n	80022c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022b2:	4b16      	ldr	r3, [pc, #88]	; (800230c <HAL_GPIO_Init+0x2d0>)
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	4914      	ldr	r1, [pc, #80]	; (800230c <HAL_GPIO_Init+0x2d0>)
 80022bc:	4013      	ands	r3, r2
 80022be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d021      	beq.n	8002310 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022cc:	4b0f      	ldr	r3, [pc, #60]	; (800230c <HAL_GPIO_Init+0x2d0>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	490e      	ldr	r1, [pc, #56]	; (800230c <HAL_GPIO_Init+0x2d0>)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	600b      	str	r3, [r1, #0]
 80022d8:	e021      	b.n	800231e <HAL_GPIO_Init+0x2e2>
 80022da:	bf00      	nop
 80022dc:	10320000 	.word	0x10320000
 80022e0:	10310000 	.word	0x10310000
 80022e4:	10220000 	.word	0x10220000
 80022e8:	10210000 	.word	0x10210000
 80022ec:	10120000 	.word	0x10120000
 80022f0:	10110000 	.word	0x10110000
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40010000 	.word	0x40010000
 80022fc:	40010800 	.word	0x40010800
 8002300:	40010c00 	.word	0x40010c00
 8002304:	40011000 	.word	0x40011000
 8002308:	40011400 	.word	0x40011400
 800230c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_GPIO_Init+0x304>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	43db      	mvns	r3, r3
 8002318:	4909      	ldr	r1, [pc, #36]	; (8002340 <HAL_GPIO_Init+0x304>)
 800231a:	4013      	ands	r3, r2
 800231c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	3301      	adds	r3, #1
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	fa22 f303 	lsr.w	r3, r2, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	f47f ae8e 	bne.w	8002050 <HAL_GPIO_Init+0x14>
  }
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	372c      	adds	r7, #44	; 0x2c
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	40010400 	.word	0x40010400

08002344 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	887b      	ldrh	r3, [r7, #2]
 8002356:	4013      	ands	r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800235c:	2301      	movs	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
 8002360:	e001      	b.n	8002366 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002366:	7bfb      	ldrb	r3, [r7, #15]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr

08002372 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	460b      	mov	r3, r1
 800237c:	807b      	strh	r3, [r7, #2]
 800237e:	4613      	mov	r3, r2
 8002380:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002382:	787b      	ldrb	r3, [r7, #1]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002388:	887a      	ldrh	r2, [r7, #2]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800238e:	e003      	b.n	8002398 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002390:	887b      	ldrh	r3, [r7, #2]
 8002392:	041a      	lsls	r2, r3, #16
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	611a      	str	r2, [r3, #16]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr

080023a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b085      	sub	sp, #20
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	460b      	mov	r3, r1
 80023ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023b4:	887a      	ldrh	r2, [r7, #2]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4013      	ands	r3, r2
 80023ba:	041a      	lsls	r2, r3, #16
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	43d9      	mvns	r1, r3
 80023c0:	887b      	ldrh	r3, [r7, #2]
 80023c2:	400b      	ands	r3, r1
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	611a      	str	r2, [r3, #16]
}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e272      	b.n	80028cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 8087 	beq.w	8002502 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023f4:	4b92      	ldr	r3, [pc, #584]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 030c 	and.w	r3, r3, #12
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d00c      	beq.n	800241a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002400:	4b8f      	ldr	r3, [pc, #572]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 030c 	and.w	r3, r3, #12
 8002408:	2b08      	cmp	r3, #8
 800240a:	d112      	bne.n	8002432 <HAL_RCC_OscConfig+0x5e>
 800240c:	4b8c      	ldr	r3, [pc, #560]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002418:	d10b      	bne.n	8002432 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241a:	4b89      	ldr	r3, [pc, #548]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d06c      	beq.n	8002500 <HAL_RCC_OscConfig+0x12c>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d168      	bne.n	8002500 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e24c      	b.n	80028cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243a:	d106      	bne.n	800244a <HAL_RCC_OscConfig+0x76>
 800243c:	4b80      	ldr	r3, [pc, #512]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a7f      	ldr	r2, [pc, #508]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	e02e      	b.n	80024a8 <HAL_RCC_OscConfig+0xd4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0x98>
 8002452:	4b7b      	ldr	r3, [pc, #492]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a7a      	ldr	r2, [pc, #488]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	4b78      	ldr	r3, [pc, #480]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a77      	ldr	r2, [pc, #476]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e01d      	b.n	80024a8 <HAL_RCC_OscConfig+0xd4>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0xbc>
 8002476:	4b72      	ldr	r3, [pc, #456]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a71      	ldr	r2, [pc, #452]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800247c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b6f      	ldr	r3, [pc, #444]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a6e      	ldr	r2, [pc, #440]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e00b      	b.n	80024a8 <HAL_RCC_OscConfig+0xd4>
 8002490:	4b6b      	ldr	r3, [pc, #428]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a6a      	ldr	r2, [pc, #424]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b68      	ldr	r3, [pc, #416]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a67      	ldr	r2, [pc, #412]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80024a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d013      	beq.n	80024d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7ff fbd6 	bl	8001c60 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b8:	f7ff fbd2 	bl	8001c60 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e200      	b.n	80028cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	4b5d      	ldr	r3, [pc, #372]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0xe4>
 80024d6:	e014      	b.n	8002502 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7ff fbc2 	bl	8001c60 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e0:	f7ff fbbe 	bl	8001c60 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e1ec      	b.n	80028cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f2:	4b53      	ldr	r3, [pc, #332]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x10c>
 80024fe:	e000      	b.n	8002502 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d063      	beq.n	80025d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800250e:	4b4c      	ldr	r3, [pc, #304]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800251a:	4b49      	ldr	r3, [pc, #292]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 030c 	and.w	r3, r3, #12
 8002522:	2b08      	cmp	r3, #8
 8002524:	d11c      	bne.n	8002560 <HAL_RCC_OscConfig+0x18c>
 8002526:	4b46      	ldr	r3, [pc, #280]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d116      	bne.n	8002560 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002532:	4b43      	ldr	r3, [pc, #268]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_RCC_OscConfig+0x176>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d001      	beq.n	800254a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e1c0      	b.n	80028cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254a:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4939      	ldr	r1, [pc, #228]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255e:	e03a      	b.n	80025d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d020      	beq.n	80025aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002568:	4b36      	ldr	r3, [pc, #216]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 800256a:	2201      	movs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256e:	f7ff fb77 	bl	8001c60 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002576:	f7ff fb73 	bl	8001c60 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e1a1      	b.n	80028cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002588:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002594:	4b2a      	ldr	r3, [pc, #168]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4927      	ldr	r1, [pc, #156]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]
 80025a8:	e015      	b.n	80025d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025aa:	4b26      	ldr	r3, [pc, #152]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7ff fb56 	bl	8001c60 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b8:	f7ff fb52 	bl	8001c60 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e180      	b.n	80028cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d03a      	beq.n	8002658 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d019      	beq.n	800261e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ea:	4b17      	ldr	r3, [pc, #92]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f0:	f7ff fb36 	bl	8001c60 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f8:	f7ff fb32 	bl	8001c60 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e160      	b.n	80028cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002616:	2001      	movs	r0, #1
 8002618:	f000 face 	bl	8002bb8 <RCC_Delay>
 800261c:	e01c      	b.n	8002658 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002624:	f7ff fb1c 	bl	8001c60 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262a:	e00f      	b.n	800264c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800262c:	f7ff fb18 	bl	8001c60 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d908      	bls.n	800264c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e146      	b.n	80028cc <HAL_RCC_OscConfig+0x4f8>
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000
 8002644:	42420000 	.word	0x42420000
 8002648:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264c:	4b92      	ldr	r3, [pc, #584]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1e9      	bne.n	800262c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80a6 	beq.w	80027b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002666:	2300      	movs	r3, #0
 8002668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800266a:	4b8b      	ldr	r3, [pc, #556]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10d      	bne.n	8002692 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002676:	4b88      	ldr	r3, [pc, #544]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	4a87      	ldr	r2, [pc, #540]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 800267c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002680:	61d3      	str	r3, [r2, #28]
 8002682:	4b85      	ldr	r3, [pc, #532]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268e:	2301      	movs	r3, #1
 8002690:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002692:	4b82      	ldr	r3, [pc, #520]	; (800289c <HAL_RCC_OscConfig+0x4c8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d118      	bne.n	80026d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269e:	4b7f      	ldr	r3, [pc, #508]	; (800289c <HAL_RCC_OscConfig+0x4c8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a7e      	ldr	r2, [pc, #504]	; (800289c <HAL_RCC_OscConfig+0x4c8>)
 80026a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026aa:	f7ff fad9 	bl	8001c60 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b2:	f7ff fad5 	bl	8001c60 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b64      	cmp	r3, #100	; 0x64
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e103      	b.n	80028cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c4:	4b75      	ldr	r3, [pc, #468]	; (800289c <HAL_RCC_OscConfig+0x4c8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d106      	bne.n	80026e6 <HAL_RCC_OscConfig+0x312>
 80026d8:	4b6f      	ldr	r3, [pc, #444]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	4a6e      	ldr	r2, [pc, #440]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6213      	str	r3, [r2, #32]
 80026e4:	e02d      	b.n	8002742 <HAL_RCC_OscConfig+0x36e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0x334>
 80026ee:	4b6a      	ldr	r3, [pc, #424]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	4a69      	ldr	r2, [pc, #420]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 80026f4:	f023 0301 	bic.w	r3, r3, #1
 80026f8:	6213      	str	r3, [r2, #32]
 80026fa:	4b67      	ldr	r3, [pc, #412]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	4a66      	ldr	r2, [pc, #408]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 8002700:	f023 0304 	bic.w	r3, r3, #4
 8002704:	6213      	str	r3, [r2, #32]
 8002706:	e01c      	b.n	8002742 <HAL_RCC_OscConfig+0x36e>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	2b05      	cmp	r3, #5
 800270e:	d10c      	bne.n	800272a <HAL_RCC_OscConfig+0x356>
 8002710:	4b61      	ldr	r3, [pc, #388]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	4a60      	ldr	r2, [pc, #384]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 8002716:	f043 0304 	orr.w	r3, r3, #4
 800271a:	6213      	str	r3, [r2, #32]
 800271c:	4b5e      	ldr	r3, [pc, #376]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	4a5d      	ldr	r2, [pc, #372]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6213      	str	r3, [r2, #32]
 8002728:	e00b      	b.n	8002742 <HAL_RCC_OscConfig+0x36e>
 800272a:	4b5b      	ldr	r3, [pc, #364]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	4a5a      	ldr	r2, [pc, #360]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	6213      	str	r3, [r2, #32]
 8002736:	4b58      	ldr	r3, [pc, #352]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4a57      	ldr	r2, [pc, #348]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 800273c:	f023 0304 	bic.w	r3, r3, #4
 8002740:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d015      	beq.n	8002776 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274a:	f7ff fa89 	bl	8001c60 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002750:	e00a      	b.n	8002768 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002752:	f7ff fa85 	bl	8001c60 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e0b1      	b.n	80028cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002768:	4b4b      	ldr	r3, [pc, #300]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0ee      	beq.n	8002752 <HAL_RCC_OscConfig+0x37e>
 8002774:	e014      	b.n	80027a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002776:	f7ff fa73 	bl	8001c60 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277c:	e00a      	b.n	8002794 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277e:	f7ff fa6f 	bl	8001c60 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f241 3288 	movw	r2, #5000	; 0x1388
 800278c:	4293      	cmp	r3, r2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e09b      	b.n	80028cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002794:	4b40      	ldr	r3, [pc, #256]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1ee      	bne.n	800277e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027a0:	7dfb      	ldrb	r3, [r7, #23]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d105      	bne.n	80027b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a6:	4b3c      	ldr	r3, [pc, #240]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	4a3b      	ldr	r2, [pc, #236]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 80027ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8087 	beq.w	80028ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027bc:	4b36      	ldr	r3, [pc, #216]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d061      	beq.n	800288c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d146      	bne.n	800285e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d0:	4b33      	ldr	r3, [pc, #204]	; (80028a0 <HAL_RCC_OscConfig+0x4cc>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d6:	f7ff fa43 	bl	8001c60 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027de:	f7ff fa3f 	bl	8001c60 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e06d      	b.n	80028cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f0:	4b29      	ldr	r3, [pc, #164]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f0      	bne.n	80027de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002804:	d108      	bne.n	8002818 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002806:	4b24      	ldr	r3, [pc, #144]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	4921      	ldr	r1, [pc, #132]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002818:	4b1f      	ldr	r3, [pc, #124]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a19      	ldr	r1, [r3, #32]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	430b      	orrs	r3, r1
 800282a:	491b      	ldr	r1, [pc, #108]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002830:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <HAL_RCC_OscConfig+0x4cc>)
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002836:	f7ff fa13 	bl	8001c60 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283e:	f7ff fa0f 	bl	8001c60 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e03d      	b.n	80028cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x46a>
 800285c:	e035      	b.n	80028ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <HAL_RCC_OscConfig+0x4cc>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7ff f9fc 	bl	8001c60 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286c:	f7ff f9f8 	bl	8001c60 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e026      	b.n	80028cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_RCC_OscConfig+0x4c4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x498>
 800288a:	e01e      	b.n	80028ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d107      	bne.n	80028a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e019      	b.n	80028cc <HAL_RCC_OscConfig+0x4f8>
 8002898:	40021000 	.word	0x40021000
 800289c:	40007000 	.word	0x40007000
 80028a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_RCC_OscConfig+0x500>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d106      	bne.n	80028c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d001      	beq.n	80028ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40021000 	.word	0x40021000

080028d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0d0      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028ec:	4b6a      	ldr	r3, [pc, #424]	; (8002a98 <HAL_RCC_ClockConfig+0x1c0>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d910      	bls.n	800291c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fa:	4b67      	ldr	r3, [pc, #412]	; (8002a98 <HAL_RCC_ClockConfig+0x1c0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 0207 	bic.w	r2, r3, #7
 8002902:	4965      	ldr	r1, [pc, #404]	; (8002a98 <HAL_RCC_ClockConfig+0x1c0>)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b63      	ldr	r3, [pc, #396]	; (8002a98 <HAL_RCC_ClockConfig+0x1c0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0b8      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d020      	beq.n	800296a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002934:	4b59      	ldr	r3, [pc, #356]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	4a58      	ldr	r2, [pc, #352]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800293e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800294c:	4b53      	ldr	r3, [pc, #332]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	4a52      	ldr	r2, [pc, #328]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002956:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002958:	4b50      	ldr	r3, [pc, #320]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	494d      	ldr	r1, [pc, #308]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	4313      	orrs	r3, r2
 8002968:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d040      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d107      	bne.n	800298e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297e:	4b47      	ldr	r3, [pc, #284]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d115      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e07f      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d107      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002996:	4b41      	ldr	r3, [pc, #260]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e073      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a6:	4b3d      	ldr	r3, [pc, #244]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e06b      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b6:	4b39      	ldr	r3, [pc, #228]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f023 0203 	bic.w	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4936      	ldr	r1, [pc, #216]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c8:	f7ff f94a 	bl	8001c60 <HAL_GetTick>
 80029cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ce:	e00a      	b.n	80029e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d0:	f7ff f946 	bl	8001c60 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	f241 3288 	movw	r2, #5000	; 0x1388
 80029de:	4293      	cmp	r3, r2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e053      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e6:	4b2d      	ldr	r3, [pc, #180]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f003 020c 	and.w	r2, r3, #12
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d1eb      	bne.n	80029d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029f8:	4b27      	ldr	r3, [pc, #156]	; (8002a98 <HAL_RCC_ClockConfig+0x1c0>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d210      	bcs.n	8002a28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a06:	4b24      	ldr	r3, [pc, #144]	; (8002a98 <HAL_RCC_ClockConfig+0x1c0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 0207 	bic.w	r2, r3, #7
 8002a0e:	4922      	ldr	r1, [pc, #136]	; (8002a98 <HAL_RCC_ClockConfig+0x1c0>)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a16:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <HAL_RCC_ClockConfig+0x1c0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e032      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a34:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	4916      	ldr	r1, [pc, #88]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d009      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a52:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	490e      	ldr	r1, [pc, #56]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a66:	f000 f821 	bl	8002aac <HAL_RCC_GetSysClockFreq>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	091b      	lsrs	r3, r3, #4
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	490a      	ldr	r1, [pc, #40]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a78:	5ccb      	ldrb	r3, [r1, r3]
 8002a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7e:	4a09      	ldr	r2, [pc, #36]	; (8002aa4 <HAL_RCC_ClockConfig+0x1cc>)
 8002a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a82:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <HAL_RCC_ClockConfig+0x1d0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff f8a8 	bl	8001bdc <HAL_InitTick>

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40022000 	.word	0x40022000
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	08004b10 	.word	0x08004b10
 8002aa4:	20000010 	.word	0x20000010
 8002aa8:	20000014 	.word	0x20000014

08002aac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ac6:	4b1e      	ldr	r3, [pc, #120]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d002      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0x30>
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d003      	beq.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x36>
 8002ada:	e027      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002adc:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ade:	613b      	str	r3, [r7, #16]
      break;
 8002ae0:	e027      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	0c9b      	lsrs	r3, r3, #18
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	4a17      	ldr	r2, [pc, #92]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002aec:	5cd3      	ldrb	r3, [r2, r3]
 8002aee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d010      	beq.n	8002b1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002afa:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x94>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	0c5b      	lsrs	r3, r3, #17
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	4a11      	ldr	r2, [pc, #68]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b06:	5cd3      	ldrb	r3, [r2, r3]
 8002b08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a0d      	ldr	r2, [pc, #52]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b0e:	fb03 f202 	mul.w	r2, r3, r2
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	e004      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a0c      	ldr	r2, [pc, #48]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b20:	fb02 f303 	mul.w	r3, r2, r3
 8002b24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	613b      	str	r3, [r7, #16]
      break;
 8002b2a:	e002      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b2c:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b2e:	613b      	str	r3, [r7, #16]
      break;
 8002b30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b32:	693b      	ldr	r3, [r7, #16]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	371c      	adds	r7, #28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40021000 	.word	0x40021000
 8002b44:	007a1200 	.word	0x007a1200
 8002b48:	08004b28 	.word	0x08004b28
 8002b4c:	08004b38 	.word	0x08004b38
 8002b50:	003d0900 	.word	0x003d0900

08002b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b58:	4b02      	ldr	r3, [pc, #8]	; (8002b64 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr
 8002b64:	20000010 	.word	0x20000010

08002b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b6c:	f7ff fff2 	bl	8002b54 <HAL_RCC_GetHCLKFreq>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	0a1b      	lsrs	r3, r3, #8
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	4903      	ldr	r1, [pc, #12]	; (8002b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b7e:	5ccb      	ldrb	r3, [r1, r3]
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	08004b20 	.word	0x08004b20

08002b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b94:	f7ff ffde 	bl	8002b54 <HAL_RCC_GetHCLKFreq>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	0adb      	lsrs	r3, r3, #11
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	4903      	ldr	r1, [pc, #12]	; (8002bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ba6:	5ccb      	ldrb	r3, [r1, r3]
 8002ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	08004b20 	.word	0x08004b20

08002bb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bc0:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <RCC_Delay+0x34>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <RCC_Delay+0x38>)
 8002bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bca:	0a5b      	lsrs	r3, r3, #9
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bd4:	bf00      	nop
  }
  while (Delay --);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1e5a      	subs	r2, r3, #1
 8002bda:	60fa      	str	r2, [r7, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f9      	bne.n	8002bd4 <RCC_Delay+0x1c>
}
 8002be0:	bf00      	nop
 8002be2:	bf00      	nop
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	20000010 	.word	0x20000010
 8002bf0:	10624dd3 	.word	0x10624dd3

08002bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e041      	b.n	8002c8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fe fecc 	bl	80019b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	4619      	mov	r1, r3
 8002c32:	4610      	mov	r0, r2
 8002c34:	f000 fac6 	bl	80031c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d001      	beq.n	8002cac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e032      	b.n	8002d12 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a18      	ldr	r2, [pc, #96]	; (8002d1c <HAL_TIM_Base_Start+0x88>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00e      	beq.n	8002cdc <HAL_TIM_Base_Start+0x48>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc6:	d009      	beq.n	8002cdc <HAL_TIM_Base_Start+0x48>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a14      	ldr	r2, [pc, #80]	; (8002d20 <HAL_TIM_Base_Start+0x8c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d004      	beq.n	8002cdc <HAL_TIM_Base_Start+0x48>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a13      	ldr	r2, [pc, #76]	; (8002d24 <HAL_TIM_Base_Start+0x90>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d111      	bne.n	8002d00 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b06      	cmp	r3, #6
 8002cec:	d010      	beq.n	8002d10 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 0201 	orr.w	r2, r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cfe:	e007      	b.n	8002d10 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0201 	orr.w	r2, r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr
 8002d1c:	40012c00 	.word	0x40012c00
 8002d20:	40000400 	.word	0x40000400
 8002d24:	40000800 	.word	0x40000800

08002d28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d001      	beq.n	8002d40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e03a      	b.n	8002db6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0201 	orr.w	r2, r2, #1
 8002d56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a18      	ldr	r2, [pc, #96]	; (8002dc0 <HAL_TIM_Base_Start_IT+0x98>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00e      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0x58>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6a:	d009      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0x58>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a14      	ldr	r2, [pc, #80]	; (8002dc4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d004      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0x58>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a13      	ldr	r2, [pc, #76]	; (8002dc8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d111      	bne.n	8002da4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b06      	cmp	r3, #6
 8002d90:	d010      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0201 	orr.w	r2, r2, #1
 8002da0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da2:	e007      	b.n	8002db4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	40000400 	.word	0x40000400
 8002dc8:	40000800 	.word	0x40000800

08002dcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d122      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d11b      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0202 	mvn.w	r2, #2
 8002df8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f9bd 	bl	800318e <HAL_TIM_IC_CaptureCallback>
 8002e14:	e005      	b.n	8002e22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f9b0 	bl	800317c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f9bf 	bl	80031a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d122      	bne.n	8002e7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d11b      	bne.n	8002e7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0204 	mvn.w	r2, #4
 8002e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2202      	movs	r2, #2
 8002e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f993 	bl	800318e <HAL_TIM_IC_CaptureCallback>
 8002e68:	e005      	b.n	8002e76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f986 	bl	800317c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f995 	bl	80031a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d122      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d11b      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0208 	mvn.w	r2, #8
 8002ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f969 	bl	800318e <HAL_TIM_IC_CaptureCallback>
 8002ebc:	e005      	b.n	8002eca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f95c 	bl	800317c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f96b 	bl	80031a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	2b10      	cmp	r3, #16
 8002edc:	d122      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0310 	and.w	r3, r3, #16
 8002ee8:	2b10      	cmp	r3, #16
 8002eea:	d11b      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0210 	mvn.w	r2, #16
 8002ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2208      	movs	r2, #8
 8002efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f93f 	bl	800318e <HAL_TIM_IC_CaptureCallback>
 8002f10:	e005      	b.n	8002f1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f932 	bl	800317c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f941 	bl	80031a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d10e      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d107      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0201 	mvn.w	r2, #1
 8002f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f90d 	bl	800316a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5a:	2b80      	cmp	r3, #128	; 0x80
 8002f5c:	d10e      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f68:	2b80      	cmp	r3, #128	; 0x80
 8002f6a:	d107      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fa83 	bl	8003482 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f86:	2b40      	cmp	r3, #64	; 0x40
 8002f88:	d10e      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f94:	2b40      	cmp	r3, #64	; 0x40
 8002f96:	d107      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f905 	bl	80031b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f003 0320 	and.w	r3, r3, #32
 8002fb2:	2b20      	cmp	r3, #32
 8002fb4:	d10e      	bne.n	8002fd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 0320 	and.w	r3, r3, #32
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	d107      	bne.n	8002fd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f06f 0220 	mvn.w	r2, #32
 8002fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fa4e 	bl	8003470 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_TIM_ConfigClockSource+0x1c>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e0b4      	b.n	8003162 <HAL_TIM_ConfigClockSource+0x186>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800301e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003030:	d03e      	beq.n	80030b0 <HAL_TIM_ConfigClockSource+0xd4>
 8003032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003036:	f200 8087 	bhi.w	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 800303a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303e:	f000 8086 	beq.w	800314e <HAL_TIM_ConfigClockSource+0x172>
 8003042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003046:	d87f      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003048:	2b70      	cmp	r3, #112	; 0x70
 800304a:	d01a      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0xa6>
 800304c:	2b70      	cmp	r3, #112	; 0x70
 800304e:	d87b      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003050:	2b60      	cmp	r3, #96	; 0x60
 8003052:	d050      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0x11a>
 8003054:	2b60      	cmp	r3, #96	; 0x60
 8003056:	d877      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003058:	2b50      	cmp	r3, #80	; 0x50
 800305a:	d03c      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0xfa>
 800305c:	2b50      	cmp	r3, #80	; 0x50
 800305e:	d873      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003060:	2b40      	cmp	r3, #64	; 0x40
 8003062:	d058      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0x13a>
 8003064:	2b40      	cmp	r3, #64	; 0x40
 8003066:	d86f      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003068:	2b30      	cmp	r3, #48	; 0x30
 800306a:	d064      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0x15a>
 800306c:	2b30      	cmp	r3, #48	; 0x30
 800306e:	d86b      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003070:	2b20      	cmp	r3, #32
 8003072:	d060      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0x15a>
 8003074:	2b20      	cmp	r3, #32
 8003076:	d867      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003078:	2b00      	cmp	r3, #0
 800307a:	d05c      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0x15a>
 800307c:	2b10      	cmp	r3, #16
 800307e:	d05a      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0x15a>
 8003080:	e062      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003092:	f000 f970 	bl	8003376 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	609a      	str	r2, [r3, #8]
      break;
 80030ae:	e04f      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030c0:	f000 f959 	bl	8003376 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030d2:	609a      	str	r2, [r3, #8]
      break;
 80030d4:	e03c      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030e2:	461a      	mov	r2, r3
 80030e4:	f000 f8d0 	bl	8003288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2150      	movs	r1, #80	; 0x50
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 f927 	bl	8003342 <TIM_ITRx_SetConfig>
      break;
 80030f4:	e02c      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003102:	461a      	mov	r2, r3
 8003104:	f000 f8ee 	bl	80032e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2160      	movs	r1, #96	; 0x60
 800310e:	4618      	mov	r0, r3
 8003110:	f000 f917 	bl	8003342 <TIM_ITRx_SetConfig>
      break;
 8003114:	e01c      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003122:	461a      	mov	r2, r3
 8003124:	f000 f8b0 	bl	8003288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2140      	movs	r1, #64	; 0x40
 800312e:	4618      	mov	r0, r3
 8003130:	f000 f907 	bl	8003342 <TIM_ITRx_SetConfig>
      break;
 8003134:	e00c      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4619      	mov	r1, r3
 8003140:	4610      	mov	r0, r2
 8003142:	f000 f8fe 	bl	8003342 <TIM_ITRx_SetConfig>
      break;
 8003146:	e003      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	73fb      	strb	r3, [r7, #15]
      break;
 800314c:	e000      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800314e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003160:	7bfb      	ldrb	r3, [r7, #15]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr

0800317c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr

0800318e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr

080031a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr

080031b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a29      	ldr	r2, [pc, #164]	; (800327c <TIM_Base_SetConfig+0xb8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00b      	beq.n	80031f4 <TIM_Base_SetConfig+0x30>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e2:	d007      	beq.n	80031f4 <TIM_Base_SetConfig+0x30>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a26      	ldr	r2, [pc, #152]	; (8003280 <TIM_Base_SetConfig+0xbc>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d003      	beq.n	80031f4 <TIM_Base_SetConfig+0x30>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a25      	ldr	r2, [pc, #148]	; (8003284 <TIM_Base_SetConfig+0xc0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d108      	bne.n	8003206 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a1c      	ldr	r2, [pc, #112]	; (800327c <TIM_Base_SetConfig+0xb8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00b      	beq.n	8003226 <TIM_Base_SetConfig+0x62>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003214:	d007      	beq.n	8003226 <TIM_Base_SetConfig+0x62>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a19      	ldr	r2, [pc, #100]	; (8003280 <TIM_Base_SetConfig+0xbc>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d003      	beq.n	8003226 <TIM_Base_SetConfig+0x62>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a18      	ldr	r2, [pc, #96]	; (8003284 <TIM_Base_SetConfig+0xc0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d108      	bne.n	8003238 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800322c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a07      	ldr	r2, [pc, #28]	; (800327c <TIM_Base_SetConfig+0xb8>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d103      	bne.n	800326c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	615a      	str	r2, [r3, #20]
}
 8003272:	bf00      	nop
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr
 800327c:	40012c00 	.word	0x40012c00
 8003280:	40000400 	.word	0x40000400
 8003284:	40000800 	.word	0x40000800

08003288 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	f023 0201 	bic.w	r2, r3, #1
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f023 030a 	bic.w	r3, r3, #10
 80032c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	621a      	str	r2, [r3, #32]
}
 80032da:	bf00      	nop
 80032dc:	371c      	adds	r7, #28
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	f023 0210 	bic.w	r2, r3, #16
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800330e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	031b      	lsls	r3, r3, #12
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003320:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	621a      	str	r2, [r3, #32]
}
 8003338:	bf00      	nop
 800333a:	371c      	adds	r7, #28
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr

08003342 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003342:	b480      	push	{r7}
 8003344:	b085      	sub	sp, #20
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003358:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4313      	orrs	r3, r2
 8003360:	f043 0307 	orr.w	r3, r3, #7
 8003364:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	609a      	str	r2, [r3, #8]
}
 800336c:	bf00      	nop
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr

08003376 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003376:	b480      	push	{r7}
 8003378:	b087      	sub	sp, #28
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	607a      	str	r2, [r7, #4]
 8003382:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003390:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	021a      	lsls	r2, r3, #8
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	431a      	orrs	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	4313      	orrs	r3, r2
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	609a      	str	r2, [r3, #8]
}
 80033aa:	bf00      	nop
 80033ac:	371c      	adds	r7, #28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e046      	b.n	800345a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a16      	ldr	r2, [pc, #88]	; (8003464 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d00e      	beq.n	800342e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003418:	d009      	beq.n	800342e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a12      	ldr	r2, [pc, #72]	; (8003468 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d004      	beq.n	800342e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a10      	ldr	r2, [pc, #64]	; (800346c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d10c      	bne.n	8003448 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003434:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	4313      	orrs	r3, r2
 800343e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr
 8003464:	40012c00 	.word	0x40012c00
 8003468:	40000400 	.word	0x40000400
 800346c:	40000800 	.word	0x40000800

08003470 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e042      	b.n	800352c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fe fafe 	bl	8001abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2224      	movs	r2, #36	; 0x24
 80034c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 fdc5 	bl	8004068 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800350c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08a      	sub	sp, #40	; 0x28
 8003538:	af02      	add	r7, sp, #8
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	4613      	mov	r3, r2
 8003542:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b20      	cmp	r3, #32
 8003552:	d16d      	bne.n	8003630 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <HAL_UART_Transmit+0x2c>
 800355a:	88fb      	ldrh	r3, [r7, #6]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e066      	b.n	8003632 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2221      	movs	r2, #33	; 0x21
 800356e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003572:	f7fe fb75 	bl	8001c60 <HAL_GetTick>
 8003576:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	88fa      	ldrh	r2, [r7, #6]
 800357c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	88fa      	ldrh	r2, [r7, #6]
 8003582:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358c:	d108      	bne.n	80035a0 <HAL_UART_Transmit+0x6c>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d104      	bne.n	80035a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	e003      	b.n	80035a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035a8:	e02a      	b.n	8003600 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2200      	movs	r2, #0
 80035b2:	2180      	movs	r1, #128	; 0x80
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 fb14 	bl	8003be2 <UART_WaitOnFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e036      	b.n	8003632 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10b      	bne.n	80035e2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	3302      	adds	r3, #2
 80035de:	61bb      	str	r3, [r7, #24]
 80035e0:	e007      	b.n	80035f2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	781a      	ldrb	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	3301      	adds	r3, #1
 80035f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1cf      	bne.n	80035aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2200      	movs	r2, #0
 8003612:	2140      	movs	r1, #64	; 0x40
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 fae4 	bl	8003be2 <UART_WaitOnFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e006      	b.n	8003632 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	e000      	b.n	8003632 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003630:	2302      	movs	r3, #2
  }
}
 8003632:	4618      	mov	r0, r3
 8003634:	3720      	adds	r7, #32
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	4613      	mov	r3, r2
 8003646:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b20      	cmp	r3, #32
 8003652:	d112      	bne.n	800367a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <HAL_UART_Receive_IT+0x26>
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e00b      	b.n	800367c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800366a:	88fb      	ldrh	r3, [r7, #6]
 800366c:	461a      	mov	r2, r3
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 fb24 	bl	8003cbe <UART_Start_Receive_IT>
 8003676:	4603      	mov	r3, r0
 8003678:	e000      	b.n	800367c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800367a:	2302      	movs	r3, #2
  }
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b0ba      	sub	sp, #232	; 0xe8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80036c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10f      	bne.n	80036ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d009      	beq.n	80036ea <HAL_UART_IRQHandler+0x66>
 80036d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fc01 	bl	8003eea <UART_Receive_IT>
      return;
 80036e8:	e25b      	b.n	8003ba2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 80de 	beq.w	80038b0 <HAL_UART_IRQHandler+0x22c>
 80036f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d106      	bne.n	800370e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003704:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 80d1 	beq.w	80038b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800370e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00b      	beq.n	8003732 <HAL_UART_IRQHandler+0xae>
 800371a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d005      	beq.n	8003732 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	f043 0201 	orr.w	r2, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00b      	beq.n	8003756 <HAL_UART_IRQHandler+0xd2>
 800373e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	f043 0202 	orr.w	r2, r3, #2
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00b      	beq.n	800377a <HAL_UART_IRQHandler+0xf6>
 8003762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	f043 0204 	orr.w	r2, r3, #4
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800377a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b00      	cmp	r3, #0
 8003784:	d011      	beq.n	80037aa <HAL_UART_IRQHandler+0x126>
 8003786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800378a:	f003 0320 	and.w	r3, r3, #32
 800378e:	2b00      	cmp	r3, #0
 8003790:	d105      	bne.n	800379e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d005      	beq.n	80037aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	f043 0208 	orr.w	r2, r3, #8
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 81f2 	beq.w	8003b98 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_UART_IRQHandler+0x14e>
 80037c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fb8c 	bl	8003eea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	bf14      	ite	ne
 80037e0:	2301      	movne	r3, #1
 80037e2:	2300      	moveq	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d103      	bne.n	80037fe <HAL_UART_IRQHandler+0x17a>
 80037f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d04f      	beq.n	800389e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fa96 	bl	8003d30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d041      	beq.n	8003896 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3314      	adds	r3, #20
 8003818:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003820:	e853 3f00 	ldrex	r3, [r3]
 8003824:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003828:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800382c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003830:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	3314      	adds	r3, #20
 800383a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800383e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003842:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003846:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800384a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003856:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1d9      	bne.n	8003812 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003862:	2b00      	cmp	r3, #0
 8003864:	d013      	beq.n	800388e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386a:	4a7e      	ldr	r2, [pc, #504]	; (8003a64 <HAL_UART_IRQHandler+0x3e0>)
 800386c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003872:	4618      	mov	r0, r3
 8003874:	f7fe fb6a 	bl	8001f4c <HAL_DMA_Abort_IT>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d016      	beq.n	80038ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003888:	4610      	mov	r0, r2
 800388a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800388c:	e00e      	b.n	80038ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f993 	bl	8003bba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003894:	e00a      	b.n	80038ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f98f 	bl	8003bba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389c:	e006      	b.n	80038ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f98b 	bl	8003bba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80038aa:	e175      	b.n	8003b98 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ac:	bf00      	nop
    return;
 80038ae:	e173      	b.n	8003b98 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	f040 814f 	bne.w	8003b58 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038be:	f003 0310 	and.w	r3, r3, #16
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 8148 	beq.w	8003b58 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8141 	beq.w	8003b58 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038d6:	2300      	movs	r3, #0
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 80b6 	beq.w	8003a68 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003908:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 8145 	beq.w	8003b9c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003916:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800391a:	429a      	cmp	r2, r3
 800391c:	f080 813e 	bcs.w	8003b9c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003926:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	2b20      	cmp	r3, #32
 8003930:	f000 8088 	beq.w	8003a44 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	330c      	adds	r3, #12
 800393a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003942:	e853 3f00 	ldrex	r3, [r3]
 8003946:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800394a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800394e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003952:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	330c      	adds	r3, #12
 800395c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003960:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003964:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003968:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800396c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003970:	e841 2300 	strex	r3, r2, [r1]
 8003974:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003978:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1d9      	bne.n	8003934 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3314      	adds	r3, #20
 8003986:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800398a:	e853 3f00 	ldrex	r3, [r3]
 800398e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003990:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003992:	f023 0301 	bic.w	r3, r3, #1
 8003996:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3314      	adds	r3, #20
 80039a0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039a4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039a8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039aa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039b0:	e841 2300 	strex	r3, r2, [r1]
 80039b4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e1      	bne.n	8003980 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3314      	adds	r3, #20
 80039c2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039c6:	e853 3f00 	ldrex	r3, [r3]
 80039ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80039cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3314      	adds	r3, #20
 80039dc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80039e0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039e8:	e841 2300 	strex	r3, r2, [r1]
 80039ec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80039ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1e3      	bne.n	80039bc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	330c      	adds	r3, #12
 8003a08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a0c:	e853 3f00 	ldrex	r3, [r3]
 8003a10:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a14:	f023 0310 	bic.w	r3, r3, #16
 8003a18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	330c      	adds	r3, #12
 8003a22:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a26:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a28:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a2e:	e841 2300 	strex	r3, r2, [r1]
 8003a32:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e3      	bne.n	8003a02 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe fa49 	bl	8001ed6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	4619      	mov	r1, r3
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f8b6 	bl	8003bcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a60:	e09c      	b.n	8003b9c <HAL_UART_IRQHandler+0x518>
 8003a62:	bf00      	nop
 8003a64:	08003df5 	.word	0x08003df5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 808e 	beq.w	8003ba0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 8089 	beq.w	8003ba0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	330c      	adds	r3, #12
 8003a94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a98:	e853 3f00 	ldrex	r3, [r3]
 8003a9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003aa4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	330c      	adds	r3, #12
 8003aae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ab2:	647a      	str	r2, [r7, #68]	; 0x44
 8003ab4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ab8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003aba:	e841 2300 	strex	r3, r2, [r1]
 8003abe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1e3      	bne.n	8003a8e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3314      	adds	r3, #20
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	e853 3f00 	ldrex	r3, [r3]
 8003ad4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	f023 0301 	bic.w	r3, r3, #1
 8003adc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3314      	adds	r3, #20
 8003ae6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003aea:	633a      	str	r2, [r7, #48]	; 0x30
 8003aec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e3      	bne.n	8003ac6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	330c      	adds	r3, #12
 8003b12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	e853 3f00 	ldrex	r3, [r3]
 8003b1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0310 	bic.w	r3, r3, #16
 8003b22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	330c      	adds	r3, #12
 8003b2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b30:	61fa      	str	r2, [r7, #28]
 8003b32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b34:	69b9      	ldr	r1, [r7, #24]
 8003b36:	69fa      	ldr	r2, [r7, #28]
 8003b38:	e841 2300 	strex	r3, r2, [r1]
 8003b3c:	617b      	str	r3, [r7, #20]
   return(result);
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1e3      	bne.n	8003b0c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b4e:	4619      	mov	r1, r3
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f83b 	bl	8003bcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b56:	e023      	b.n	8003ba0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d009      	beq.n	8003b78 <HAL_UART_IRQHandler+0x4f4>
 8003b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f953 	bl	8003e1c <UART_Transmit_IT>
    return;
 8003b76:	e014      	b.n	8003ba2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00e      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x51e>
 8003b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f992 	bl	8003eba <UART_EndTransmit_IT>
    return;
 8003b96:	e004      	b.n	8003ba2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003b98:	bf00      	nop
 8003b9a:	e002      	b.n	8003ba2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b9c:	bf00      	nop
 8003b9e:	e000      	b.n	8003ba2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003ba0:	bf00      	nop
  }
}
 8003ba2:	37e8      	adds	r7, #232	; 0xe8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr

08003bba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr

08003bcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bc80      	pop	{r7}
 8003be0:	4770      	bx	lr

08003be2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b090      	sub	sp, #64	; 0x40
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	603b      	str	r3, [r7, #0]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bf2:	e050      	b.n	8003c96 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfa:	d04c      	beq.n	8003c96 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d007      	beq.n	8003c12 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c02:	f7fe f82d 	bl	8001c60 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d241      	bcs.n	8003c96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	330c      	adds	r3, #12
 8003c18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1c:	e853 3f00 	ldrex	r3, [r3]
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	330c      	adds	r3, #12
 8003c30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c32:	637a      	str	r2, [r7, #52]	; 0x34
 8003c34:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c3a:	e841 2300 	strex	r3, r2, [r1]
 8003c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1e5      	bne.n	8003c12 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3314      	adds	r3, #20
 8003c4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	e853 3f00 	ldrex	r3, [r3]
 8003c54:	613b      	str	r3, [r7, #16]
   return(result);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f023 0301 	bic.w	r3, r3, #1
 8003c5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3314      	adds	r3, #20
 8003c64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c66:	623a      	str	r2, [r7, #32]
 8003c68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	69f9      	ldr	r1, [r7, #28]
 8003c6c:	6a3a      	ldr	r2, [r7, #32]
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e5      	bne.n	8003c46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e00f      	b.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	bf0c      	ite	eq
 8003ca6:	2301      	moveq	r3, #1
 8003ca8:	2300      	movne	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d09f      	beq.n	8003bf4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3740      	adds	r7, #64	; 0x40
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b085      	sub	sp, #20
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	88fa      	ldrh	r2, [r7, #6]
 8003cd6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	88fa      	ldrh	r2, [r7, #6]
 8003cdc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2222      	movs	r2, #34	; 0x22
 8003ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d007      	beq.n	8003d04 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d02:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695a      	ldr	r2, [r3, #20]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0220 	orr.w	r2, r2, #32
 8003d22:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr

08003d30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b095      	sub	sp, #84	; 0x54
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	330c      	adds	r3, #12
 8003d3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d42:	e853 3f00 	ldrex	r3, [r3]
 8003d46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	330c      	adds	r3, #12
 8003d56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d58:	643a      	str	r2, [r7, #64]	; 0x40
 8003d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d60:	e841 2300 	strex	r3, r2, [r1]
 8003d64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1e5      	bne.n	8003d38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3314      	adds	r3, #20
 8003d72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	e853 3f00 	ldrex	r3, [r3]
 8003d7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f023 0301 	bic.w	r3, r3, #1
 8003d82:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3314      	adds	r3, #20
 8003d8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d94:	e841 2300 	strex	r3, r2, [r1]
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e5      	bne.n	8003d6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d119      	bne.n	8003ddc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	330c      	adds	r3, #12
 8003dae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f023 0310 	bic.w	r3, r3, #16
 8003dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	330c      	adds	r3, #12
 8003dc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dc8:	61ba      	str	r2, [r7, #24]
 8003dca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	6979      	ldr	r1, [r7, #20]
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e5      	bne.n	8003da8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003dea:	bf00      	nop
 8003dec:	3754      	adds	r7, #84	; 0x54
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr

08003df4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f7ff fed3 	bl	8003bba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e14:	bf00      	nop
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b21      	cmp	r3, #33	; 0x21
 8003e2e:	d13e      	bne.n	8003eae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e38:	d114      	bne.n	8003e64 <UART_Transmit_IT+0x48>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d110      	bne.n	8003e64 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	1c9a      	adds	r2, r3, #2
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	621a      	str	r2, [r3, #32]
 8003e62:	e008      	b.n	8003e76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	1c59      	adds	r1, r3, #1
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6211      	str	r1, [r2, #32]
 8003e6e:	781a      	ldrb	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	4619      	mov	r1, r3
 8003e84:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10f      	bne.n	8003eaa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ea8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	e000      	b.n	8003eb0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003eae:	2302      	movs	r3, #2
  }
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr

08003eba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b082      	sub	sp, #8
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7ff fe64 	bl	8003ba8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b08c      	sub	sp, #48	; 0x30
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b22      	cmp	r3, #34	; 0x22
 8003efc:	f040 80ae 	bne.w	800405c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f08:	d117      	bne.n	8003f3a <UART_Receive_IT+0x50>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d113      	bne.n	8003f3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	1c9a      	adds	r2, r3, #2
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	629a      	str	r2, [r3, #40]	; 0x28
 8003f38:	e026      	b.n	8003f88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f4c:	d007      	beq.n	8003f5e <UART_Receive_IT+0x74>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10a      	bne.n	8003f6c <UART_Receive_IT+0x82>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d106      	bne.n	8003f6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f68:	701a      	strb	r2, [r3, #0]
 8003f6a:	e008      	b.n	8003f7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	4619      	mov	r1, r3
 8003f96:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d15d      	bne.n	8004058 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0220 	bic.w	r2, r2, #32
 8003faa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695a      	ldr	r2, [r3, #20]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0201 	bic.w	r2, r2, #1
 8003fca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d135      	bne.n	800404e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	330c      	adds	r3, #12
 8003fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f023 0310 	bic.w	r3, r3, #16
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	330c      	adds	r3, #12
 8004006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004008:	623a      	str	r2, [r7, #32]
 800400a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	69f9      	ldr	r1, [r7, #28]
 800400e:	6a3a      	ldr	r2, [r7, #32]
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	61bb      	str	r3, [r7, #24]
   return(result);
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e5      	bne.n	8003fe8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0310 	and.w	r3, r3, #16
 8004026:	2b10      	cmp	r3, #16
 8004028:	d10a      	bne.n	8004040 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004044:	4619      	mov	r1, r3
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7ff fdc0 	bl	8003bcc <HAL_UARTEx_RxEventCallback>
 800404c:	e002      	b.n	8004054 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fd f8ae 	bl	80011b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	e002      	b.n	800405e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	e000      	b.n	800405e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800405c:	2302      	movs	r3, #2
  }
}
 800405e:	4618      	mov	r0, r3
 8004060:	3730      	adds	r7, #48	; 0x30
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80040a2:	f023 030c 	bic.w	r3, r3, #12
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6812      	ldr	r2, [r2, #0]
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	430b      	orrs	r3, r1
 80040ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a2c      	ldr	r2, [pc, #176]	; (800417c <UART_SetConfig+0x114>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d103      	bne.n	80040d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040d0:	f7fe fd5e 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	e002      	b.n	80040de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040d8:	f7fe fd46 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 80040dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	009a      	lsls	r2, r3, #2
 80040e8:	441a      	add	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f4:	4a22      	ldr	r2, [pc, #136]	; (8004180 <UART_SetConfig+0x118>)
 80040f6:	fba2 2303 	umull	r2, r3, r2, r3
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	0119      	lsls	r1, r3, #4
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	009a      	lsls	r2, r3, #2
 8004108:	441a      	add	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	fbb2 f2f3 	udiv	r2, r2, r3
 8004114:	4b1a      	ldr	r3, [pc, #104]	; (8004180 <UART_SetConfig+0x118>)
 8004116:	fba3 0302 	umull	r0, r3, r3, r2
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	2064      	movs	r0, #100	; 0x64
 800411e:	fb00 f303 	mul.w	r3, r0, r3
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	3332      	adds	r3, #50	; 0x32
 8004128:	4a15      	ldr	r2, [pc, #84]	; (8004180 <UART_SetConfig+0x118>)
 800412a:	fba2 2303 	umull	r2, r3, r2, r3
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004134:	4419      	add	r1, r3
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	009a      	lsls	r2, r3, #2
 8004140:	441a      	add	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	fbb2 f2f3 	udiv	r2, r2, r3
 800414c:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <UART_SetConfig+0x118>)
 800414e:	fba3 0302 	umull	r0, r3, r3, r2
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	2064      	movs	r0, #100	; 0x64
 8004156:	fb00 f303 	mul.w	r3, r0, r3
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	3332      	adds	r3, #50	; 0x32
 8004160:	4a07      	ldr	r2, [pc, #28]	; (8004180 <UART_SetConfig+0x118>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	f003 020f 	and.w	r2, r3, #15
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	440a      	add	r2, r1
 8004172:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004174:	bf00      	nop
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40013800 	.word	0x40013800
 8004180:	51eb851f 	.word	0x51eb851f

08004184 <siprintf>:
 8004184:	b40e      	push	{r1, r2, r3}
 8004186:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800418a:	b500      	push	{lr}
 800418c:	b09c      	sub	sp, #112	; 0x70
 800418e:	ab1d      	add	r3, sp, #116	; 0x74
 8004190:	9002      	str	r0, [sp, #8]
 8004192:	9006      	str	r0, [sp, #24]
 8004194:	9107      	str	r1, [sp, #28]
 8004196:	9104      	str	r1, [sp, #16]
 8004198:	4808      	ldr	r0, [pc, #32]	; (80041bc <siprintf+0x38>)
 800419a:	4909      	ldr	r1, [pc, #36]	; (80041c0 <siprintf+0x3c>)
 800419c:	f853 2b04 	ldr.w	r2, [r3], #4
 80041a0:	9105      	str	r1, [sp, #20]
 80041a2:	6800      	ldr	r0, [r0, #0]
 80041a4:	a902      	add	r1, sp, #8
 80041a6:	9301      	str	r3, [sp, #4]
 80041a8:	f000 f98e 	bl	80044c8 <_svfiprintf_r>
 80041ac:	2200      	movs	r2, #0
 80041ae:	9b02      	ldr	r3, [sp, #8]
 80041b0:	701a      	strb	r2, [r3, #0]
 80041b2:	b01c      	add	sp, #112	; 0x70
 80041b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80041b8:	b003      	add	sp, #12
 80041ba:	4770      	bx	lr
 80041bc:	20000068 	.word	0x20000068
 80041c0:	ffff0208 	.word	0xffff0208

080041c4 <memset>:
 80041c4:	4603      	mov	r3, r0
 80041c6:	4402      	add	r2, r0
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d100      	bne.n	80041ce <memset+0xa>
 80041cc:	4770      	bx	lr
 80041ce:	f803 1b01 	strb.w	r1, [r3], #1
 80041d2:	e7f9      	b.n	80041c8 <memset+0x4>

080041d4 <__errno>:
 80041d4:	4b01      	ldr	r3, [pc, #4]	; (80041dc <__errno+0x8>)
 80041d6:	6818      	ldr	r0, [r3, #0]
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	20000068 	.word	0x20000068

080041e0 <__libc_init_array>:
 80041e0:	b570      	push	{r4, r5, r6, lr}
 80041e2:	2600      	movs	r6, #0
 80041e4:	4d0c      	ldr	r5, [pc, #48]	; (8004218 <__libc_init_array+0x38>)
 80041e6:	4c0d      	ldr	r4, [pc, #52]	; (800421c <__libc_init_array+0x3c>)
 80041e8:	1b64      	subs	r4, r4, r5
 80041ea:	10a4      	asrs	r4, r4, #2
 80041ec:	42a6      	cmp	r6, r4
 80041ee:	d109      	bne.n	8004204 <__libc_init_array+0x24>
 80041f0:	f000 fc7a 	bl	8004ae8 <_init>
 80041f4:	2600      	movs	r6, #0
 80041f6:	4d0a      	ldr	r5, [pc, #40]	; (8004220 <__libc_init_array+0x40>)
 80041f8:	4c0a      	ldr	r4, [pc, #40]	; (8004224 <__libc_init_array+0x44>)
 80041fa:	1b64      	subs	r4, r4, r5
 80041fc:	10a4      	asrs	r4, r4, #2
 80041fe:	42a6      	cmp	r6, r4
 8004200:	d105      	bne.n	800420e <__libc_init_array+0x2e>
 8004202:	bd70      	pop	{r4, r5, r6, pc}
 8004204:	f855 3b04 	ldr.w	r3, [r5], #4
 8004208:	4798      	blx	r3
 800420a:	3601      	adds	r6, #1
 800420c:	e7ee      	b.n	80041ec <__libc_init_array+0xc>
 800420e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004212:	4798      	blx	r3
 8004214:	3601      	adds	r6, #1
 8004216:	e7f2      	b.n	80041fe <__libc_init_array+0x1e>
 8004218:	08004b70 	.word	0x08004b70
 800421c:	08004b70 	.word	0x08004b70
 8004220:	08004b70 	.word	0x08004b70
 8004224:	08004b74 	.word	0x08004b74

08004228 <__retarget_lock_acquire_recursive>:
 8004228:	4770      	bx	lr

0800422a <__retarget_lock_release_recursive>:
 800422a:	4770      	bx	lr

0800422c <_free_r>:
 800422c:	b538      	push	{r3, r4, r5, lr}
 800422e:	4605      	mov	r5, r0
 8004230:	2900      	cmp	r1, #0
 8004232:	d040      	beq.n	80042b6 <_free_r+0x8a>
 8004234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004238:	1f0c      	subs	r4, r1, #4
 800423a:	2b00      	cmp	r3, #0
 800423c:	bfb8      	it	lt
 800423e:	18e4      	addlt	r4, r4, r3
 8004240:	f000 f8dc 	bl	80043fc <__malloc_lock>
 8004244:	4a1c      	ldr	r2, [pc, #112]	; (80042b8 <_free_r+0x8c>)
 8004246:	6813      	ldr	r3, [r2, #0]
 8004248:	b933      	cbnz	r3, 8004258 <_free_r+0x2c>
 800424a:	6063      	str	r3, [r4, #4]
 800424c:	6014      	str	r4, [r2, #0]
 800424e:	4628      	mov	r0, r5
 8004250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004254:	f000 b8d8 	b.w	8004408 <__malloc_unlock>
 8004258:	42a3      	cmp	r3, r4
 800425a:	d908      	bls.n	800426e <_free_r+0x42>
 800425c:	6820      	ldr	r0, [r4, #0]
 800425e:	1821      	adds	r1, r4, r0
 8004260:	428b      	cmp	r3, r1
 8004262:	bf01      	itttt	eq
 8004264:	6819      	ldreq	r1, [r3, #0]
 8004266:	685b      	ldreq	r3, [r3, #4]
 8004268:	1809      	addeq	r1, r1, r0
 800426a:	6021      	streq	r1, [r4, #0]
 800426c:	e7ed      	b.n	800424a <_free_r+0x1e>
 800426e:	461a      	mov	r2, r3
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	b10b      	cbz	r3, 8004278 <_free_r+0x4c>
 8004274:	42a3      	cmp	r3, r4
 8004276:	d9fa      	bls.n	800426e <_free_r+0x42>
 8004278:	6811      	ldr	r1, [r2, #0]
 800427a:	1850      	adds	r0, r2, r1
 800427c:	42a0      	cmp	r0, r4
 800427e:	d10b      	bne.n	8004298 <_free_r+0x6c>
 8004280:	6820      	ldr	r0, [r4, #0]
 8004282:	4401      	add	r1, r0
 8004284:	1850      	adds	r0, r2, r1
 8004286:	4283      	cmp	r3, r0
 8004288:	6011      	str	r1, [r2, #0]
 800428a:	d1e0      	bne.n	800424e <_free_r+0x22>
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	4408      	add	r0, r1
 8004292:	6010      	str	r0, [r2, #0]
 8004294:	6053      	str	r3, [r2, #4]
 8004296:	e7da      	b.n	800424e <_free_r+0x22>
 8004298:	d902      	bls.n	80042a0 <_free_r+0x74>
 800429a:	230c      	movs	r3, #12
 800429c:	602b      	str	r3, [r5, #0]
 800429e:	e7d6      	b.n	800424e <_free_r+0x22>
 80042a0:	6820      	ldr	r0, [r4, #0]
 80042a2:	1821      	adds	r1, r4, r0
 80042a4:	428b      	cmp	r3, r1
 80042a6:	bf01      	itttt	eq
 80042a8:	6819      	ldreq	r1, [r3, #0]
 80042aa:	685b      	ldreq	r3, [r3, #4]
 80042ac:	1809      	addeq	r1, r1, r0
 80042ae:	6021      	streq	r1, [r4, #0]
 80042b0:	6063      	str	r3, [r4, #4]
 80042b2:	6054      	str	r4, [r2, #4]
 80042b4:	e7cb      	b.n	800424e <_free_r+0x22>
 80042b6:	bd38      	pop	{r3, r4, r5, pc}
 80042b8:	20000354 	.word	0x20000354

080042bc <sbrk_aligned>:
 80042bc:	b570      	push	{r4, r5, r6, lr}
 80042be:	4e0e      	ldr	r6, [pc, #56]	; (80042f8 <sbrk_aligned+0x3c>)
 80042c0:	460c      	mov	r4, r1
 80042c2:	6831      	ldr	r1, [r6, #0]
 80042c4:	4605      	mov	r5, r0
 80042c6:	b911      	cbnz	r1, 80042ce <sbrk_aligned+0x12>
 80042c8:	f000 fbaa 	bl	8004a20 <_sbrk_r>
 80042cc:	6030      	str	r0, [r6, #0]
 80042ce:	4621      	mov	r1, r4
 80042d0:	4628      	mov	r0, r5
 80042d2:	f000 fba5 	bl	8004a20 <_sbrk_r>
 80042d6:	1c43      	adds	r3, r0, #1
 80042d8:	d00a      	beq.n	80042f0 <sbrk_aligned+0x34>
 80042da:	1cc4      	adds	r4, r0, #3
 80042dc:	f024 0403 	bic.w	r4, r4, #3
 80042e0:	42a0      	cmp	r0, r4
 80042e2:	d007      	beq.n	80042f4 <sbrk_aligned+0x38>
 80042e4:	1a21      	subs	r1, r4, r0
 80042e6:	4628      	mov	r0, r5
 80042e8:	f000 fb9a 	bl	8004a20 <_sbrk_r>
 80042ec:	3001      	adds	r0, #1
 80042ee:	d101      	bne.n	80042f4 <sbrk_aligned+0x38>
 80042f0:	f04f 34ff 	mov.w	r4, #4294967295
 80042f4:	4620      	mov	r0, r4
 80042f6:	bd70      	pop	{r4, r5, r6, pc}
 80042f8:	20000358 	.word	0x20000358

080042fc <_malloc_r>:
 80042fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004300:	1ccd      	adds	r5, r1, #3
 8004302:	f025 0503 	bic.w	r5, r5, #3
 8004306:	3508      	adds	r5, #8
 8004308:	2d0c      	cmp	r5, #12
 800430a:	bf38      	it	cc
 800430c:	250c      	movcc	r5, #12
 800430e:	2d00      	cmp	r5, #0
 8004310:	4607      	mov	r7, r0
 8004312:	db01      	blt.n	8004318 <_malloc_r+0x1c>
 8004314:	42a9      	cmp	r1, r5
 8004316:	d905      	bls.n	8004324 <_malloc_r+0x28>
 8004318:	230c      	movs	r3, #12
 800431a:	2600      	movs	r6, #0
 800431c:	603b      	str	r3, [r7, #0]
 800431e:	4630      	mov	r0, r6
 8004320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004324:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80043f8 <_malloc_r+0xfc>
 8004328:	f000 f868 	bl	80043fc <__malloc_lock>
 800432c:	f8d8 3000 	ldr.w	r3, [r8]
 8004330:	461c      	mov	r4, r3
 8004332:	bb5c      	cbnz	r4, 800438c <_malloc_r+0x90>
 8004334:	4629      	mov	r1, r5
 8004336:	4638      	mov	r0, r7
 8004338:	f7ff ffc0 	bl	80042bc <sbrk_aligned>
 800433c:	1c43      	adds	r3, r0, #1
 800433e:	4604      	mov	r4, r0
 8004340:	d155      	bne.n	80043ee <_malloc_r+0xf2>
 8004342:	f8d8 4000 	ldr.w	r4, [r8]
 8004346:	4626      	mov	r6, r4
 8004348:	2e00      	cmp	r6, #0
 800434a:	d145      	bne.n	80043d8 <_malloc_r+0xdc>
 800434c:	2c00      	cmp	r4, #0
 800434e:	d048      	beq.n	80043e2 <_malloc_r+0xe6>
 8004350:	6823      	ldr	r3, [r4, #0]
 8004352:	4631      	mov	r1, r6
 8004354:	4638      	mov	r0, r7
 8004356:	eb04 0903 	add.w	r9, r4, r3
 800435a:	f000 fb61 	bl	8004a20 <_sbrk_r>
 800435e:	4581      	cmp	r9, r0
 8004360:	d13f      	bne.n	80043e2 <_malloc_r+0xe6>
 8004362:	6821      	ldr	r1, [r4, #0]
 8004364:	4638      	mov	r0, r7
 8004366:	1a6d      	subs	r5, r5, r1
 8004368:	4629      	mov	r1, r5
 800436a:	f7ff ffa7 	bl	80042bc <sbrk_aligned>
 800436e:	3001      	adds	r0, #1
 8004370:	d037      	beq.n	80043e2 <_malloc_r+0xe6>
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	442b      	add	r3, r5
 8004376:	6023      	str	r3, [r4, #0]
 8004378:	f8d8 3000 	ldr.w	r3, [r8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d038      	beq.n	80043f2 <_malloc_r+0xf6>
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	42a2      	cmp	r2, r4
 8004384:	d12b      	bne.n	80043de <_malloc_r+0xe2>
 8004386:	2200      	movs	r2, #0
 8004388:	605a      	str	r2, [r3, #4]
 800438a:	e00f      	b.n	80043ac <_malloc_r+0xb0>
 800438c:	6822      	ldr	r2, [r4, #0]
 800438e:	1b52      	subs	r2, r2, r5
 8004390:	d41f      	bmi.n	80043d2 <_malloc_r+0xd6>
 8004392:	2a0b      	cmp	r2, #11
 8004394:	d917      	bls.n	80043c6 <_malloc_r+0xca>
 8004396:	1961      	adds	r1, r4, r5
 8004398:	42a3      	cmp	r3, r4
 800439a:	6025      	str	r5, [r4, #0]
 800439c:	bf18      	it	ne
 800439e:	6059      	strne	r1, [r3, #4]
 80043a0:	6863      	ldr	r3, [r4, #4]
 80043a2:	bf08      	it	eq
 80043a4:	f8c8 1000 	streq.w	r1, [r8]
 80043a8:	5162      	str	r2, [r4, r5]
 80043aa:	604b      	str	r3, [r1, #4]
 80043ac:	4638      	mov	r0, r7
 80043ae:	f104 060b 	add.w	r6, r4, #11
 80043b2:	f000 f829 	bl	8004408 <__malloc_unlock>
 80043b6:	f026 0607 	bic.w	r6, r6, #7
 80043ba:	1d23      	adds	r3, r4, #4
 80043bc:	1af2      	subs	r2, r6, r3
 80043be:	d0ae      	beq.n	800431e <_malloc_r+0x22>
 80043c0:	1b9b      	subs	r3, r3, r6
 80043c2:	50a3      	str	r3, [r4, r2]
 80043c4:	e7ab      	b.n	800431e <_malloc_r+0x22>
 80043c6:	42a3      	cmp	r3, r4
 80043c8:	6862      	ldr	r2, [r4, #4]
 80043ca:	d1dd      	bne.n	8004388 <_malloc_r+0x8c>
 80043cc:	f8c8 2000 	str.w	r2, [r8]
 80043d0:	e7ec      	b.n	80043ac <_malloc_r+0xb0>
 80043d2:	4623      	mov	r3, r4
 80043d4:	6864      	ldr	r4, [r4, #4]
 80043d6:	e7ac      	b.n	8004332 <_malloc_r+0x36>
 80043d8:	4634      	mov	r4, r6
 80043da:	6876      	ldr	r6, [r6, #4]
 80043dc:	e7b4      	b.n	8004348 <_malloc_r+0x4c>
 80043de:	4613      	mov	r3, r2
 80043e0:	e7cc      	b.n	800437c <_malloc_r+0x80>
 80043e2:	230c      	movs	r3, #12
 80043e4:	4638      	mov	r0, r7
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	f000 f80e 	bl	8004408 <__malloc_unlock>
 80043ec:	e797      	b.n	800431e <_malloc_r+0x22>
 80043ee:	6025      	str	r5, [r4, #0]
 80043f0:	e7dc      	b.n	80043ac <_malloc_r+0xb0>
 80043f2:	605b      	str	r3, [r3, #4]
 80043f4:	deff      	udf	#255	; 0xff
 80043f6:	bf00      	nop
 80043f8:	20000354 	.word	0x20000354

080043fc <__malloc_lock>:
 80043fc:	4801      	ldr	r0, [pc, #4]	; (8004404 <__malloc_lock+0x8>)
 80043fe:	f7ff bf13 	b.w	8004228 <__retarget_lock_acquire_recursive>
 8004402:	bf00      	nop
 8004404:	20000350 	.word	0x20000350

08004408 <__malloc_unlock>:
 8004408:	4801      	ldr	r0, [pc, #4]	; (8004410 <__malloc_unlock+0x8>)
 800440a:	f7ff bf0e 	b.w	800422a <__retarget_lock_release_recursive>
 800440e:	bf00      	nop
 8004410:	20000350 	.word	0x20000350

08004414 <__ssputs_r>:
 8004414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004418:	461f      	mov	r7, r3
 800441a:	688e      	ldr	r6, [r1, #8]
 800441c:	4682      	mov	sl, r0
 800441e:	42be      	cmp	r6, r7
 8004420:	460c      	mov	r4, r1
 8004422:	4690      	mov	r8, r2
 8004424:	680b      	ldr	r3, [r1, #0]
 8004426:	d82c      	bhi.n	8004482 <__ssputs_r+0x6e>
 8004428:	898a      	ldrh	r2, [r1, #12]
 800442a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800442e:	d026      	beq.n	800447e <__ssputs_r+0x6a>
 8004430:	6965      	ldr	r5, [r4, #20]
 8004432:	6909      	ldr	r1, [r1, #16]
 8004434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004438:	eba3 0901 	sub.w	r9, r3, r1
 800443c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004440:	1c7b      	adds	r3, r7, #1
 8004442:	444b      	add	r3, r9
 8004444:	106d      	asrs	r5, r5, #1
 8004446:	429d      	cmp	r5, r3
 8004448:	bf38      	it	cc
 800444a:	461d      	movcc	r5, r3
 800444c:	0553      	lsls	r3, r2, #21
 800444e:	d527      	bpl.n	80044a0 <__ssputs_r+0x8c>
 8004450:	4629      	mov	r1, r5
 8004452:	f7ff ff53 	bl	80042fc <_malloc_r>
 8004456:	4606      	mov	r6, r0
 8004458:	b360      	cbz	r0, 80044b4 <__ssputs_r+0xa0>
 800445a:	464a      	mov	r2, r9
 800445c:	6921      	ldr	r1, [r4, #16]
 800445e:	f000 fafd 	bl	8004a5c <memcpy>
 8004462:	89a3      	ldrh	r3, [r4, #12]
 8004464:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800446c:	81a3      	strh	r3, [r4, #12]
 800446e:	6126      	str	r6, [r4, #16]
 8004470:	444e      	add	r6, r9
 8004472:	6026      	str	r6, [r4, #0]
 8004474:	463e      	mov	r6, r7
 8004476:	6165      	str	r5, [r4, #20]
 8004478:	eba5 0509 	sub.w	r5, r5, r9
 800447c:	60a5      	str	r5, [r4, #8]
 800447e:	42be      	cmp	r6, r7
 8004480:	d900      	bls.n	8004484 <__ssputs_r+0x70>
 8004482:	463e      	mov	r6, r7
 8004484:	4632      	mov	r2, r6
 8004486:	4641      	mov	r1, r8
 8004488:	6820      	ldr	r0, [r4, #0]
 800448a:	f000 faaf 	bl	80049ec <memmove>
 800448e:	2000      	movs	r0, #0
 8004490:	68a3      	ldr	r3, [r4, #8]
 8004492:	1b9b      	subs	r3, r3, r6
 8004494:	60a3      	str	r3, [r4, #8]
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	4433      	add	r3, r6
 800449a:	6023      	str	r3, [r4, #0]
 800449c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a0:	462a      	mov	r2, r5
 80044a2:	f000 fae9 	bl	8004a78 <_realloc_r>
 80044a6:	4606      	mov	r6, r0
 80044a8:	2800      	cmp	r0, #0
 80044aa:	d1e0      	bne.n	800446e <__ssputs_r+0x5a>
 80044ac:	4650      	mov	r0, sl
 80044ae:	6921      	ldr	r1, [r4, #16]
 80044b0:	f7ff febc 	bl	800422c <_free_r>
 80044b4:	230c      	movs	r3, #12
 80044b6:	f8ca 3000 	str.w	r3, [sl]
 80044ba:	89a3      	ldrh	r3, [r4, #12]
 80044bc:	f04f 30ff 	mov.w	r0, #4294967295
 80044c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044c4:	81a3      	strh	r3, [r4, #12]
 80044c6:	e7e9      	b.n	800449c <__ssputs_r+0x88>

080044c8 <_svfiprintf_r>:
 80044c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044cc:	4698      	mov	r8, r3
 80044ce:	898b      	ldrh	r3, [r1, #12]
 80044d0:	4607      	mov	r7, r0
 80044d2:	061b      	lsls	r3, r3, #24
 80044d4:	460d      	mov	r5, r1
 80044d6:	4614      	mov	r4, r2
 80044d8:	b09d      	sub	sp, #116	; 0x74
 80044da:	d50e      	bpl.n	80044fa <_svfiprintf_r+0x32>
 80044dc:	690b      	ldr	r3, [r1, #16]
 80044de:	b963      	cbnz	r3, 80044fa <_svfiprintf_r+0x32>
 80044e0:	2140      	movs	r1, #64	; 0x40
 80044e2:	f7ff ff0b 	bl	80042fc <_malloc_r>
 80044e6:	6028      	str	r0, [r5, #0]
 80044e8:	6128      	str	r0, [r5, #16]
 80044ea:	b920      	cbnz	r0, 80044f6 <_svfiprintf_r+0x2e>
 80044ec:	230c      	movs	r3, #12
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	f04f 30ff 	mov.w	r0, #4294967295
 80044f4:	e0d0      	b.n	8004698 <_svfiprintf_r+0x1d0>
 80044f6:	2340      	movs	r3, #64	; 0x40
 80044f8:	616b      	str	r3, [r5, #20]
 80044fa:	2300      	movs	r3, #0
 80044fc:	9309      	str	r3, [sp, #36]	; 0x24
 80044fe:	2320      	movs	r3, #32
 8004500:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004504:	2330      	movs	r3, #48	; 0x30
 8004506:	f04f 0901 	mov.w	r9, #1
 800450a:	f8cd 800c 	str.w	r8, [sp, #12]
 800450e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80046b0 <_svfiprintf_r+0x1e8>
 8004512:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004516:	4623      	mov	r3, r4
 8004518:	469a      	mov	sl, r3
 800451a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800451e:	b10a      	cbz	r2, 8004524 <_svfiprintf_r+0x5c>
 8004520:	2a25      	cmp	r2, #37	; 0x25
 8004522:	d1f9      	bne.n	8004518 <_svfiprintf_r+0x50>
 8004524:	ebba 0b04 	subs.w	fp, sl, r4
 8004528:	d00b      	beq.n	8004542 <_svfiprintf_r+0x7a>
 800452a:	465b      	mov	r3, fp
 800452c:	4622      	mov	r2, r4
 800452e:	4629      	mov	r1, r5
 8004530:	4638      	mov	r0, r7
 8004532:	f7ff ff6f 	bl	8004414 <__ssputs_r>
 8004536:	3001      	adds	r0, #1
 8004538:	f000 80a9 	beq.w	800468e <_svfiprintf_r+0x1c6>
 800453c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800453e:	445a      	add	r2, fp
 8004540:	9209      	str	r2, [sp, #36]	; 0x24
 8004542:	f89a 3000 	ldrb.w	r3, [sl]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 80a1 	beq.w	800468e <_svfiprintf_r+0x1c6>
 800454c:	2300      	movs	r3, #0
 800454e:	f04f 32ff 	mov.w	r2, #4294967295
 8004552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004556:	f10a 0a01 	add.w	sl, sl, #1
 800455a:	9304      	str	r3, [sp, #16]
 800455c:	9307      	str	r3, [sp, #28]
 800455e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004562:	931a      	str	r3, [sp, #104]	; 0x68
 8004564:	4654      	mov	r4, sl
 8004566:	2205      	movs	r2, #5
 8004568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800456c:	4850      	ldr	r0, [pc, #320]	; (80046b0 <_svfiprintf_r+0x1e8>)
 800456e:	f000 fa67 	bl	8004a40 <memchr>
 8004572:	9a04      	ldr	r2, [sp, #16]
 8004574:	b9d8      	cbnz	r0, 80045ae <_svfiprintf_r+0xe6>
 8004576:	06d0      	lsls	r0, r2, #27
 8004578:	bf44      	itt	mi
 800457a:	2320      	movmi	r3, #32
 800457c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004580:	0711      	lsls	r1, r2, #28
 8004582:	bf44      	itt	mi
 8004584:	232b      	movmi	r3, #43	; 0x2b
 8004586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800458a:	f89a 3000 	ldrb.w	r3, [sl]
 800458e:	2b2a      	cmp	r3, #42	; 0x2a
 8004590:	d015      	beq.n	80045be <_svfiprintf_r+0xf6>
 8004592:	4654      	mov	r4, sl
 8004594:	2000      	movs	r0, #0
 8004596:	f04f 0c0a 	mov.w	ip, #10
 800459a:	9a07      	ldr	r2, [sp, #28]
 800459c:	4621      	mov	r1, r4
 800459e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045a2:	3b30      	subs	r3, #48	; 0x30
 80045a4:	2b09      	cmp	r3, #9
 80045a6:	d94d      	bls.n	8004644 <_svfiprintf_r+0x17c>
 80045a8:	b1b0      	cbz	r0, 80045d8 <_svfiprintf_r+0x110>
 80045aa:	9207      	str	r2, [sp, #28]
 80045ac:	e014      	b.n	80045d8 <_svfiprintf_r+0x110>
 80045ae:	eba0 0308 	sub.w	r3, r0, r8
 80045b2:	fa09 f303 	lsl.w	r3, r9, r3
 80045b6:	4313      	orrs	r3, r2
 80045b8:	46a2      	mov	sl, r4
 80045ba:	9304      	str	r3, [sp, #16]
 80045bc:	e7d2      	b.n	8004564 <_svfiprintf_r+0x9c>
 80045be:	9b03      	ldr	r3, [sp, #12]
 80045c0:	1d19      	adds	r1, r3, #4
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	9103      	str	r1, [sp, #12]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	bfbb      	ittet	lt
 80045ca:	425b      	neglt	r3, r3
 80045cc:	f042 0202 	orrlt.w	r2, r2, #2
 80045d0:	9307      	strge	r3, [sp, #28]
 80045d2:	9307      	strlt	r3, [sp, #28]
 80045d4:	bfb8      	it	lt
 80045d6:	9204      	strlt	r2, [sp, #16]
 80045d8:	7823      	ldrb	r3, [r4, #0]
 80045da:	2b2e      	cmp	r3, #46	; 0x2e
 80045dc:	d10c      	bne.n	80045f8 <_svfiprintf_r+0x130>
 80045de:	7863      	ldrb	r3, [r4, #1]
 80045e0:	2b2a      	cmp	r3, #42	; 0x2a
 80045e2:	d134      	bne.n	800464e <_svfiprintf_r+0x186>
 80045e4:	9b03      	ldr	r3, [sp, #12]
 80045e6:	3402      	adds	r4, #2
 80045e8:	1d1a      	adds	r2, r3, #4
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	9203      	str	r2, [sp, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	bfb8      	it	lt
 80045f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80045f6:	9305      	str	r3, [sp, #20]
 80045f8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80046b4 <_svfiprintf_r+0x1ec>
 80045fc:	2203      	movs	r2, #3
 80045fe:	4650      	mov	r0, sl
 8004600:	7821      	ldrb	r1, [r4, #0]
 8004602:	f000 fa1d 	bl	8004a40 <memchr>
 8004606:	b138      	cbz	r0, 8004618 <_svfiprintf_r+0x150>
 8004608:	2240      	movs	r2, #64	; 0x40
 800460a:	9b04      	ldr	r3, [sp, #16]
 800460c:	eba0 000a 	sub.w	r0, r0, sl
 8004610:	4082      	lsls	r2, r0
 8004612:	4313      	orrs	r3, r2
 8004614:	3401      	adds	r4, #1
 8004616:	9304      	str	r3, [sp, #16]
 8004618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800461c:	2206      	movs	r2, #6
 800461e:	4826      	ldr	r0, [pc, #152]	; (80046b8 <_svfiprintf_r+0x1f0>)
 8004620:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004624:	f000 fa0c 	bl	8004a40 <memchr>
 8004628:	2800      	cmp	r0, #0
 800462a:	d038      	beq.n	800469e <_svfiprintf_r+0x1d6>
 800462c:	4b23      	ldr	r3, [pc, #140]	; (80046bc <_svfiprintf_r+0x1f4>)
 800462e:	bb1b      	cbnz	r3, 8004678 <_svfiprintf_r+0x1b0>
 8004630:	9b03      	ldr	r3, [sp, #12]
 8004632:	3307      	adds	r3, #7
 8004634:	f023 0307 	bic.w	r3, r3, #7
 8004638:	3308      	adds	r3, #8
 800463a:	9303      	str	r3, [sp, #12]
 800463c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800463e:	4433      	add	r3, r6
 8004640:	9309      	str	r3, [sp, #36]	; 0x24
 8004642:	e768      	b.n	8004516 <_svfiprintf_r+0x4e>
 8004644:	460c      	mov	r4, r1
 8004646:	2001      	movs	r0, #1
 8004648:	fb0c 3202 	mla	r2, ip, r2, r3
 800464c:	e7a6      	b.n	800459c <_svfiprintf_r+0xd4>
 800464e:	2300      	movs	r3, #0
 8004650:	f04f 0c0a 	mov.w	ip, #10
 8004654:	4619      	mov	r1, r3
 8004656:	3401      	adds	r4, #1
 8004658:	9305      	str	r3, [sp, #20]
 800465a:	4620      	mov	r0, r4
 800465c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004660:	3a30      	subs	r2, #48	; 0x30
 8004662:	2a09      	cmp	r2, #9
 8004664:	d903      	bls.n	800466e <_svfiprintf_r+0x1a6>
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0c6      	beq.n	80045f8 <_svfiprintf_r+0x130>
 800466a:	9105      	str	r1, [sp, #20]
 800466c:	e7c4      	b.n	80045f8 <_svfiprintf_r+0x130>
 800466e:	4604      	mov	r4, r0
 8004670:	2301      	movs	r3, #1
 8004672:	fb0c 2101 	mla	r1, ip, r1, r2
 8004676:	e7f0      	b.n	800465a <_svfiprintf_r+0x192>
 8004678:	ab03      	add	r3, sp, #12
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	462a      	mov	r2, r5
 800467e:	4638      	mov	r0, r7
 8004680:	4b0f      	ldr	r3, [pc, #60]	; (80046c0 <_svfiprintf_r+0x1f8>)
 8004682:	a904      	add	r1, sp, #16
 8004684:	f3af 8000 	nop.w
 8004688:	1c42      	adds	r2, r0, #1
 800468a:	4606      	mov	r6, r0
 800468c:	d1d6      	bne.n	800463c <_svfiprintf_r+0x174>
 800468e:	89ab      	ldrh	r3, [r5, #12]
 8004690:	065b      	lsls	r3, r3, #25
 8004692:	f53f af2d 	bmi.w	80044f0 <_svfiprintf_r+0x28>
 8004696:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004698:	b01d      	add	sp, #116	; 0x74
 800469a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800469e:	ab03      	add	r3, sp, #12
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	462a      	mov	r2, r5
 80046a4:	4638      	mov	r0, r7
 80046a6:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <_svfiprintf_r+0x1f8>)
 80046a8:	a904      	add	r1, sp, #16
 80046aa:	f000 f87d 	bl	80047a8 <_printf_i>
 80046ae:	e7eb      	b.n	8004688 <_svfiprintf_r+0x1c0>
 80046b0:	08004b3a 	.word	0x08004b3a
 80046b4:	08004b40 	.word	0x08004b40
 80046b8:	08004b44 	.word	0x08004b44
 80046bc:	00000000 	.word	0x00000000
 80046c0:	08004415 	.word	0x08004415

080046c4 <_printf_common>:
 80046c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c8:	4616      	mov	r6, r2
 80046ca:	4699      	mov	r9, r3
 80046cc:	688a      	ldr	r2, [r1, #8]
 80046ce:	690b      	ldr	r3, [r1, #16]
 80046d0:	4607      	mov	r7, r0
 80046d2:	4293      	cmp	r3, r2
 80046d4:	bfb8      	it	lt
 80046d6:	4613      	movlt	r3, r2
 80046d8:	6033      	str	r3, [r6, #0]
 80046da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046de:	460c      	mov	r4, r1
 80046e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046e4:	b10a      	cbz	r2, 80046ea <_printf_common+0x26>
 80046e6:	3301      	adds	r3, #1
 80046e8:	6033      	str	r3, [r6, #0]
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	0699      	lsls	r1, r3, #26
 80046ee:	bf42      	ittt	mi
 80046f0:	6833      	ldrmi	r3, [r6, #0]
 80046f2:	3302      	addmi	r3, #2
 80046f4:	6033      	strmi	r3, [r6, #0]
 80046f6:	6825      	ldr	r5, [r4, #0]
 80046f8:	f015 0506 	ands.w	r5, r5, #6
 80046fc:	d106      	bne.n	800470c <_printf_common+0x48>
 80046fe:	f104 0a19 	add.w	sl, r4, #25
 8004702:	68e3      	ldr	r3, [r4, #12]
 8004704:	6832      	ldr	r2, [r6, #0]
 8004706:	1a9b      	subs	r3, r3, r2
 8004708:	42ab      	cmp	r3, r5
 800470a:	dc2b      	bgt.n	8004764 <_printf_common+0xa0>
 800470c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004710:	1e13      	subs	r3, r2, #0
 8004712:	6822      	ldr	r2, [r4, #0]
 8004714:	bf18      	it	ne
 8004716:	2301      	movne	r3, #1
 8004718:	0692      	lsls	r2, r2, #26
 800471a:	d430      	bmi.n	800477e <_printf_common+0xba>
 800471c:	4649      	mov	r1, r9
 800471e:	4638      	mov	r0, r7
 8004720:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004724:	47c0      	blx	r8
 8004726:	3001      	adds	r0, #1
 8004728:	d023      	beq.n	8004772 <_printf_common+0xae>
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	6922      	ldr	r2, [r4, #16]
 800472e:	f003 0306 	and.w	r3, r3, #6
 8004732:	2b04      	cmp	r3, #4
 8004734:	bf14      	ite	ne
 8004736:	2500      	movne	r5, #0
 8004738:	6833      	ldreq	r3, [r6, #0]
 800473a:	f04f 0600 	mov.w	r6, #0
 800473e:	bf08      	it	eq
 8004740:	68e5      	ldreq	r5, [r4, #12]
 8004742:	f104 041a 	add.w	r4, r4, #26
 8004746:	bf08      	it	eq
 8004748:	1aed      	subeq	r5, r5, r3
 800474a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800474e:	bf08      	it	eq
 8004750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004754:	4293      	cmp	r3, r2
 8004756:	bfc4      	itt	gt
 8004758:	1a9b      	subgt	r3, r3, r2
 800475a:	18ed      	addgt	r5, r5, r3
 800475c:	42b5      	cmp	r5, r6
 800475e:	d11a      	bne.n	8004796 <_printf_common+0xd2>
 8004760:	2000      	movs	r0, #0
 8004762:	e008      	b.n	8004776 <_printf_common+0xb2>
 8004764:	2301      	movs	r3, #1
 8004766:	4652      	mov	r2, sl
 8004768:	4649      	mov	r1, r9
 800476a:	4638      	mov	r0, r7
 800476c:	47c0      	blx	r8
 800476e:	3001      	adds	r0, #1
 8004770:	d103      	bne.n	800477a <_printf_common+0xb6>
 8004772:	f04f 30ff 	mov.w	r0, #4294967295
 8004776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477a:	3501      	adds	r5, #1
 800477c:	e7c1      	b.n	8004702 <_printf_common+0x3e>
 800477e:	2030      	movs	r0, #48	; 0x30
 8004780:	18e1      	adds	r1, r4, r3
 8004782:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800478c:	4422      	add	r2, r4
 800478e:	3302      	adds	r3, #2
 8004790:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004794:	e7c2      	b.n	800471c <_printf_common+0x58>
 8004796:	2301      	movs	r3, #1
 8004798:	4622      	mov	r2, r4
 800479a:	4649      	mov	r1, r9
 800479c:	4638      	mov	r0, r7
 800479e:	47c0      	blx	r8
 80047a0:	3001      	adds	r0, #1
 80047a2:	d0e6      	beq.n	8004772 <_printf_common+0xae>
 80047a4:	3601      	adds	r6, #1
 80047a6:	e7d9      	b.n	800475c <_printf_common+0x98>

080047a8 <_printf_i>:
 80047a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047ac:	7e0f      	ldrb	r7, [r1, #24]
 80047ae:	4691      	mov	r9, r2
 80047b0:	2f78      	cmp	r7, #120	; 0x78
 80047b2:	4680      	mov	r8, r0
 80047b4:	460c      	mov	r4, r1
 80047b6:	469a      	mov	sl, r3
 80047b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047be:	d807      	bhi.n	80047d0 <_printf_i+0x28>
 80047c0:	2f62      	cmp	r7, #98	; 0x62
 80047c2:	d80a      	bhi.n	80047da <_printf_i+0x32>
 80047c4:	2f00      	cmp	r7, #0
 80047c6:	f000 80d5 	beq.w	8004974 <_printf_i+0x1cc>
 80047ca:	2f58      	cmp	r7, #88	; 0x58
 80047cc:	f000 80c1 	beq.w	8004952 <_printf_i+0x1aa>
 80047d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047d8:	e03a      	b.n	8004850 <_printf_i+0xa8>
 80047da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047de:	2b15      	cmp	r3, #21
 80047e0:	d8f6      	bhi.n	80047d0 <_printf_i+0x28>
 80047e2:	a101      	add	r1, pc, #4	; (adr r1, 80047e8 <_printf_i+0x40>)
 80047e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047e8:	08004841 	.word	0x08004841
 80047ec:	08004855 	.word	0x08004855
 80047f0:	080047d1 	.word	0x080047d1
 80047f4:	080047d1 	.word	0x080047d1
 80047f8:	080047d1 	.word	0x080047d1
 80047fc:	080047d1 	.word	0x080047d1
 8004800:	08004855 	.word	0x08004855
 8004804:	080047d1 	.word	0x080047d1
 8004808:	080047d1 	.word	0x080047d1
 800480c:	080047d1 	.word	0x080047d1
 8004810:	080047d1 	.word	0x080047d1
 8004814:	0800495b 	.word	0x0800495b
 8004818:	08004881 	.word	0x08004881
 800481c:	08004915 	.word	0x08004915
 8004820:	080047d1 	.word	0x080047d1
 8004824:	080047d1 	.word	0x080047d1
 8004828:	0800497d 	.word	0x0800497d
 800482c:	080047d1 	.word	0x080047d1
 8004830:	08004881 	.word	0x08004881
 8004834:	080047d1 	.word	0x080047d1
 8004838:	080047d1 	.word	0x080047d1
 800483c:	0800491d 	.word	0x0800491d
 8004840:	682b      	ldr	r3, [r5, #0]
 8004842:	1d1a      	adds	r2, r3, #4
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	602a      	str	r2, [r5, #0]
 8004848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800484c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004850:	2301      	movs	r3, #1
 8004852:	e0a0      	b.n	8004996 <_printf_i+0x1ee>
 8004854:	6820      	ldr	r0, [r4, #0]
 8004856:	682b      	ldr	r3, [r5, #0]
 8004858:	0607      	lsls	r7, r0, #24
 800485a:	f103 0104 	add.w	r1, r3, #4
 800485e:	6029      	str	r1, [r5, #0]
 8004860:	d501      	bpl.n	8004866 <_printf_i+0xbe>
 8004862:	681e      	ldr	r6, [r3, #0]
 8004864:	e003      	b.n	800486e <_printf_i+0xc6>
 8004866:	0646      	lsls	r6, r0, #25
 8004868:	d5fb      	bpl.n	8004862 <_printf_i+0xba>
 800486a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800486e:	2e00      	cmp	r6, #0
 8004870:	da03      	bge.n	800487a <_printf_i+0xd2>
 8004872:	232d      	movs	r3, #45	; 0x2d
 8004874:	4276      	negs	r6, r6
 8004876:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800487a:	230a      	movs	r3, #10
 800487c:	4859      	ldr	r0, [pc, #356]	; (80049e4 <_printf_i+0x23c>)
 800487e:	e012      	b.n	80048a6 <_printf_i+0xfe>
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	6820      	ldr	r0, [r4, #0]
 8004884:	1d19      	adds	r1, r3, #4
 8004886:	6029      	str	r1, [r5, #0]
 8004888:	0605      	lsls	r5, r0, #24
 800488a:	d501      	bpl.n	8004890 <_printf_i+0xe8>
 800488c:	681e      	ldr	r6, [r3, #0]
 800488e:	e002      	b.n	8004896 <_printf_i+0xee>
 8004890:	0641      	lsls	r1, r0, #25
 8004892:	d5fb      	bpl.n	800488c <_printf_i+0xe4>
 8004894:	881e      	ldrh	r6, [r3, #0]
 8004896:	2f6f      	cmp	r7, #111	; 0x6f
 8004898:	bf0c      	ite	eq
 800489a:	2308      	moveq	r3, #8
 800489c:	230a      	movne	r3, #10
 800489e:	4851      	ldr	r0, [pc, #324]	; (80049e4 <_printf_i+0x23c>)
 80048a0:	2100      	movs	r1, #0
 80048a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048a6:	6865      	ldr	r5, [r4, #4]
 80048a8:	2d00      	cmp	r5, #0
 80048aa:	bfa8      	it	ge
 80048ac:	6821      	ldrge	r1, [r4, #0]
 80048ae:	60a5      	str	r5, [r4, #8]
 80048b0:	bfa4      	itt	ge
 80048b2:	f021 0104 	bicge.w	r1, r1, #4
 80048b6:	6021      	strge	r1, [r4, #0]
 80048b8:	b90e      	cbnz	r6, 80048be <_printf_i+0x116>
 80048ba:	2d00      	cmp	r5, #0
 80048bc:	d04b      	beq.n	8004956 <_printf_i+0x1ae>
 80048be:	4615      	mov	r5, r2
 80048c0:	fbb6 f1f3 	udiv	r1, r6, r3
 80048c4:	fb03 6711 	mls	r7, r3, r1, r6
 80048c8:	5dc7      	ldrb	r7, [r0, r7]
 80048ca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048ce:	4637      	mov	r7, r6
 80048d0:	42bb      	cmp	r3, r7
 80048d2:	460e      	mov	r6, r1
 80048d4:	d9f4      	bls.n	80048c0 <_printf_i+0x118>
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d10b      	bne.n	80048f2 <_printf_i+0x14a>
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	07de      	lsls	r6, r3, #31
 80048de:	d508      	bpl.n	80048f2 <_printf_i+0x14a>
 80048e0:	6923      	ldr	r3, [r4, #16]
 80048e2:	6861      	ldr	r1, [r4, #4]
 80048e4:	4299      	cmp	r1, r3
 80048e6:	bfde      	ittt	le
 80048e8:	2330      	movle	r3, #48	; 0x30
 80048ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048f2:	1b52      	subs	r2, r2, r5
 80048f4:	6122      	str	r2, [r4, #16]
 80048f6:	464b      	mov	r3, r9
 80048f8:	4621      	mov	r1, r4
 80048fa:	4640      	mov	r0, r8
 80048fc:	f8cd a000 	str.w	sl, [sp]
 8004900:	aa03      	add	r2, sp, #12
 8004902:	f7ff fedf 	bl	80046c4 <_printf_common>
 8004906:	3001      	adds	r0, #1
 8004908:	d14a      	bne.n	80049a0 <_printf_i+0x1f8>
 800490a:	f04f 30ff 	mov.w	r0, #4294967295
 800490e:	b004      	add	sp, #16
 8004910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	f043 0320 	orr.w	r3, r3, #32
 800491a:	6023      	str	r3, [r4, #0]
 800491c:	2778      	movs	r7, #120	; 0x78
 800491e:	4832      	ldr	r0, [pc, #200]	; (80049e8 <_printf_i+0x240>)
 8004920:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	6829      	ldr	r1, [r5, #0]
 8004928:	061f      	lsls	r7, r3, #24
 800492a:	f851 6b04 	ldr.w	r6, [r1], #4
 800492e:	d402      	bmi.n	8004936 <_printf_i+0x18e>
 8004930:	065f      	lsls	r7, r3, #25
 8004932:	bf48      	it	mi
 8004934:	b2b6      	uxthmi	r6, r6
 8004936:	07df      	lsls	r7, r3, #31
 8004938:	bf48      	it	mi
 800493a:	f043 0320 	orrmi.w	r3, r3, #32
 800493e:	6029      	str	r1, [r5, #0]
 8004940:	bf48      	it	mi
 8004942:	6023      	strmi	r3, [r4, #0]
 8004944:	b91e      	cbnz	r6, 800494e <_printf_i+0x1a6>
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	f023 0320 	bic.w	r3, r3, #32
 800494c:	6023      	str	r3, [r4, #0]
 800494e:	2310      	movs	r3, #16
 8004950:	e7a6      	b.n	80048a0 <_printf_i+0xf8>
 8004952:	4824      	ldr	r0, [pc, #144]	; (80049e4 <_printf_i+0x23c>)
 8004954:	e7e4      	b.n	8004920 <_printf_i+0x178>
 8004956:	4615      	mov	r5, r2
 8004958:	e7bd      	b.n	80048d6 <_printf_i+0x12e>
 800495a:	682b      	ldr	r3, [r5, #0]
 800495c:	6826      	ldr	r6, [r4, #0]
 800495e:	1d18      	adds	r0, r3, #4
 8004960:	6961      	ldr	r1, [r4, #20]
 8004962:	6028      	str	r0, [r5, #0]
 8004964:	0635      	lsls	r5, r6, #24
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	d501      	bpl.n	800496e <_printf_i+0x1c6>
 800496a:	6019      	str	r1, [r3, #0]
 800496c:	e002      	b.n	8004974 <_printf_i+0x1cc>
 800496e:	0670      	lsls	r0, r6, #25
 8004970:	d5fb      	bpl.n	800496a <_printf_i+0x1c2>
 8004972:	8019      	strh	r1, [r3, #0]
 8004974:	2300      	movs	r3, #0
 8004976:	4615      	mov	r5, r2
 8004978:	6123      	str	r3, [r4, #16]
 800497a:	e7bc      	b.n	80048f6 <_printf_i+0x14e>
 800497c:	682b      	ldr	r3, [r5, #0]
 800497e:	2100      	movs	r1, #0
 8004980:	1d1a      	adds	r2, r3, #4
 8004982:	602a      	str	r2, [r5, #0]
 8004984:	681d      	ldr	r5, [r3, #0]
 8004986:	6862      	ldr	r2, [r4, #4]
 8004988:	4628      	mov	r0, r5
 800498a:	f000 f859 	bl	8004a40 <memchr>
 800498e:	b108      	cbz	r0, 8004994 <_printf_i+0x1ec>
 8004990:	1b40      	subs	r0, r0, r5
 8004992:	6060      	str	r0, [r4, #4]
 8004994:	6863      	ldr	r3, [r4, #4]
 8004996:	6123      	str	r3, [r4, #16]
 8004998:	2300      	movs	r3, #0
 800499a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800499e:	e7aa      	b.n	80048f6 <_printf_i+0x14e>
 80049a0:	462a      	mov	r2, r5
 80049a2:	4649      	mov	r1, r9
 80049a4:	4640      	mov	r0, r8
 80049a6:	6923      	ldr	r3, [r4, #16]
 80049a8:	47d0      	blx	sl
 80049aa:	3001      	adds	r0, #1
 80049ac:	d0ad      	beq.n	800490a <_printf_i+0x162>
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	079b      	lsls	r3, r3, #30
 80049b2:	d413      	bmi.n	80049dc <_printf_i+0x234>
 80049b4:	68e0      	ldr	r0, [r4, #12]
 80049b6:	9b03      	ldr	r3, [sp, #12]
 80049b8:	4298      	cmp	r0, r3
 80049ba:	bfb8      	it	lt
 80049bc:	4618      	movlt	r0, r3
 80049be:	e7a6      	b.n	800490e <_printf_i+0x166>
 80049c0:	2301      	movs	r3, #1
 80049c2:	4632      	mov	r2, r6
 80049c4:	4649      	mov	r1, r9
 80049c6:	4640      	mov	r0, r8
 80049c8:	47d0      	blx	sl
 80049ca:	3001      	adds	r0, #1
 80049cc:	d09d      	beq.n	800490a <_printf_i+0x162>
 80049ce:	3501      	adds	r5, #1
 80049d0:	68e3      	ldr	r3, [r4, #12]
 80049d2:	9903      	ldr	r1, [sp, #12]
 80049d4:	1a5b      	subs	r3, r3, r1
 80049d6:	42ab      	cmp	r3, r5
 80049d8:	dcf2      	bgt.n	80049c0 <_printf_i+0x218>
 80049da:	e7eb      	b.n	80049b4 <_printf_i+0x20c>
 80049dc:	2500      	movs	r5, #0
 80049de:	f104 0619 	add.w	r6, r4, #25
 80049e2:	e7f5      	b.n	80049d0 <_printf_i+0x228>
 80049e4:	08004b4b 	.word	0x08004b4b
 80049e8:	08004b5c 	.word	0x08004b5c

080049ec <memmove>:
 80049ec:	4288      	cmp	r0, r1
 80049ee:	b510      	push	{r4, lr}
 80049f0:	eb01 0402 	add.w	r4, r1, r2
 80049f4:	d902      	bls.n	80049fc <memmove+0x10>
 80049f6:	4284      	cmp	r4, r0
 80049f8:	4623      	mov	r3, r4
 80049fa:	d807      	bhi.n	8004a0c <memmove+0x20>
 80049fc:	1e43      	subs	r3, r0, #1
 80049fe:	42a1      	cmp	r1, r4
 8004a00:	d008      	beq.n	8004a14 <memmove+0x28>
 8004a02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a0a:	e7f8      	b.n	80049fe <memmove+0x12>
 8004a0c:	4601      	mov	r1, r0
 8004a0e:	4402      	add	r2, r0
 8004a10:	428a      	cmp	r2, r1
 8004a12:	d100      	bne.n	8004a16 <memmove+0x2a>
 8004a14:	bd10      	pop	{r4, pc}
 8004a16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a1e:	e7f7      	b.n	8004a10 <memmove+0x24>

08004a20 <_sbrk_r>:
 8004a20:	b538      	push	{r3, r4, r5, lr}
 8004a22:	2300      	movs	r3, #0
 8004a24:	4d05      	ldr	r5, [pc, #20]	; (8004a3c <_sbrk_r+0x1c>)
 8004a26:	4604      	mov	r4, r0
 8004a28:	4608      	mov	r0, r1
 8004a2a:	602b      	str	r3, [r5, #0]
 8004a2c:	f7fc fee4 	bl	80017f8 <_sbrk>
 8004a30:	1c43      	adds	r3, r0, #1
 8004a32:	d102      	bne.n	8004a3a <_sbrk_r+0x1a>
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	b103      	cbz	r3, 8004a3a <_sbrk_r+0x1a>
 8004a38:	6023      	str	r3, [r4, #0]
 8004a3a:	bd38      	pop	{r3, r4, r5, pc}
 8004a3c:	2000034c 	.word	0x2000034c

08004a40 <memchr>:
 8004a40:	4603      	mov	r3, r0
 8004a42:	b510      	push	{r4, lr}
 8004a44:	b2c9      	uxtb	r1, r1
 8004a46:	4402      	add	r2, r0
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	d101      	bne.n	8004a52 <memchr+0x12>
 8004a4e:	2000      	movs	r0, #0
 8004a50:	e003      	b.n	8004a5a <memchr+0x1a>
 8004a52:	7804      	ldrb	r4, [r0, #0]
 8004a54:	3301      	adds	r3, #1
 8004a56:	428c      	cmp	r4, r1
 8004a58:	d1f6      	bne.n	8004a48 <memchr+0x8>
 8004a5a:	bd10      	pop	{r4, pc}

08004a5c <memcpy>:
 8004a5c:	440a      	add	r2, r1
 8004a5e:	4291      	cmp	r1, r2
 8004a60:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a64:	d100      	bne.n	8004a68 <memcpy+0xc>
 8004a66:	4770      	bx	lr
 8004a68:	b510      	push	{r4, lr}
 8004a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a6e:	4291      	cmp	r1, r2
 8004a70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a74:	d1f9      	bne.n	8004a6a <memcpy+0xe>
 8004a76:	bd10      	pop	{r4, pc}

08004a78 <_realloc_r>:
 8004a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a7c:	4680      	mov	r8, r0
 8004a7e:	4614      	mov	r4, r2
 8004a80:	460e      	mov	r6, r1
 8004a82:	b921      	cbnz	r1, 8004a8e <_realloc_r+0x16>
 8004a84:	4611      	mov	r1, r2
 8004a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a8a:	f7ff bc37 	b.w	80042fc <_malloc_r>
 8004a8e:	b92a      	cbnz	r2, 8004a9c <_realloc_r+0x24>
 8004a90:	f7ff fbcc 	bl	800422c <_free_r>
 8004a94:	4625      	mov	r5, r4
 8004a96:	4628      	mov	r0, r5
 8004a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a9c:	f000 f81b 	bl	8004ad6 <_malloc_usable_size_r>
 8004aa0:	4284      	cmp	r4, r0
 8004aa2:	4607      	mov	r7, r0
 8004aa4:	d802      	bhi.n	8004aac <_realloc_r+0x34>
 8004aa6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004aaa:	d812      	bhi.n	8004ad2 <_realloc_r+0x5a>
 8004aac:	4621      	mov	r1, r4
 8004aae:	4640      	mov	r0, r8
 8004ab0:	f7ff fc24 	bl	80042fc <_malloc_r>
 8004ab4:	4605      	mov	r5, r0
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	d0ed      	beq.n	8004a96 <_realloc_r+0x1e>
 8004aba:	42bc      	cmp	r4, r7
 8004abc:	4622      	mov	r2, r4
 8004abe:	4631      	mov	r1, r6
 8004ac0:	bf28      	it	cs
 8004ac2:	463a      	movcs	r2, r7
 8004ac4:	f7ff ffca 	bl	8004a5c <memcpy>
 8004ac8:	4631      	mov	r1, r6
 8004aca:	4640      	mov	r0, r8
 8004acc:	f7ff fbae 	bl	800422c <_free_r>
 8004ad0:	e7e1      	b.n	8004a96 <_realloc_r+0x1e>
 8004ad2:	4635      	mov	r5, r6
 8004ad4:	e7df      	b.n	8004a96 <_realloc_r+0x1e>

08004ad6 <_malloc_usable_size_r>:
 8004ad6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ada:	1f18      	subs	r0, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	bfbc      	itt	lt
 8004ae0:	580b      	ldrlt	r3, [r1, r0]
 8004ae2:	18c0      	addlt	r0, r0, r3
 8004ae4:	4770      	bx	lr
	...

08004ae8 <_init>:
 8004ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aea:	bf00      	nop
 8004aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aee:	bc08      	pop	{r3}
 8004af0:	469e      	mov	lr, r3
 8004af2:	4770      	bx	lr

08004af4 <_fini>:
 8004af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af6:	bf00      	nop
 8004af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004afa:	bc08      	pop	{r3}
 8004afc:	469e      	mov	lr, r3
 8004afe:	4770      	bx	lr
