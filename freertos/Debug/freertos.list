
freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d04  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08007e14  08007e14  00017e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f1c  08007f1c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08007f1c  08007f1c  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f1c  08007f1c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f1c  08007f1c  00017f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f20  08007f20  00017f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007f24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e28  2000006c  08007f90  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e94  08007f90  00021e94  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bfcb  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000048b6  00000000  00000000  0003c0a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001928  00000000  00000000  00040960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000138e  00000000  00000000  00042288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b33a  00000000  00000000  00043616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000214ee  00000000  00000000  0005e950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000977a6  00000000  00000000  0007fe3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d88  00000000  00000000  001175e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  0011e36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08007dfc 	.word	0x08007dfc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08007dfc 	.word	0x08007dfc

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_frsub>:
 80002b8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__addsf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_fsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c4 <__addsf3>:
 80002c4:	0042      	lsls	r2, r0, #1
 80002c6:	bf1f      	itttt	ne
 80002c8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002cc:	ea92 0f03 	teqne	r2, r3
 80002d0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d8:	d06a      	beq.n	80003b0 <__addsf3+0xec>
 80002da:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002de:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002e2:	bfc1      	itttt	gt
 80002e4:	18d2      	addgt	r2, r2, r3
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	4048      	eorgt	r0, r1
 80002ea:	4041      	eorgt	r1, r0
 80002ec:	bfb8      	it	lt
 80002ee:	425b      	neglt	r3, r3
 80002f0:	2b19      	cmp	r3, #25
 80002f2:	bf88      	it	hi
 80002f4:	4770      	bxhi	lr
 80002f6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000302:	bf18      	it	ne
 8000304:	4240      	negne	r0, r0
 8000306:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800030a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000312:	bf18      	it	ne
 8000314:	4249      	negne	r1, r1
 8000316:	ea92 0f03 	teq	r2, r3
 800031a:	d03f      	beq.n	800039c <__addsf3+0xd8>
 800031c:	f1a2 0201 	sub.w	r2, r2, #1
 8000320:	fa41 fc03 	asr.w	ip, r1, r3
 8000324:	eb10 000c 	adds.w	r0, r0, ip
 8000328:	f1c3 0320 	rsb	r3, r3, #32
 800032c:	fa01 f103 	lsl.w	r1, r1, r3
 8000330:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000334:	d502      	bpl.n	800033c <__addsf3+0x78>
 8000336:	4249      	negs	r1, r1
 8000338:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800033c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000340:	d313      	bcc.n	800036a <__addsf3+0xa6>
 8000342:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000346:	d306      	bcc.n	8000356 <__addsf3+0x92>
 8000348:	0840      	lsrs	r0, r0, #1
 800034a:	ea4f 0131 	mov.w	r1, r1, rrx
 800034e:	f102 0201 	add.w	r2, r2, #1
 8000352:	2afe      	cmp	r2, #254	; 0xfe
 8000354:	d251      	bcs.n	80003fa <__addsf3+0x136>
 8000356:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800035a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035e:	bf08      	it	eq
 8000360:	f020 0001 	biceq.w	r0, r0, #1
 8000364:	ea40 0003 	orr.w	r0, r0, r3
 8000368:	4770      	bx	lr
 800036a:	0049      	lsls	r1, r1, #1
 800036c:	eb40 0000 	adc.w	r0, r0, r0
 8000370:	3a01      	subs	r2, #1
 8000372:	bf28      	it	cs
 8000374:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000378:	d2ed      	bcs.n	8000356 <__addsf3+0x92>
 800037a:	fab0 fc80 	clz	ip, r0
 800037e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000382:	ebb2 020c 	subs.w	r2, r2, ip
 8000386:	fa00 f00c 	lsl.w	r0, r0, ip
 800038a:	bfaa      	itet	ge
 800038c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000390:	4252      	neglt	r2, r2
 8000392:	4318      	orrge	r0, r3
 8000394:	bfbc      	itt	lt
 8000396:	40d0      	lsrlt	r0, r2
 8000398:	4318      	orrlt	r0, r3
 800039a:	4770      	bx	lr
 800039c:	f092 0f00 	teq	r2, #0
 80003a0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a4:	bf06      	itte	eq
 80003a6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003aa:	3201      	addeq	r2, #1
 80003ac:	3b01      	subne	r3, #1
 80003ae:	e7b5      	b.n	800031c <__addsf3+0x58>
 80003b0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b8:	bf18      	it	ne
 80003ba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003be:	d021      	beq.n	8000404 <__addsf3+0x140>
 80003c0:	ea92 0f03 	teq	r2, r3
 80003c4:	d004      	beq.n	80003d0 <__addsf3+0x10c>
 80003c6:	f092 0f00 	teq	r2, #0
 80003ca:	bf08      	it	eq
 80003cc:	4608      	moveq	r0, r1
 80003ce:	4770      	bx	lr
 80003d0:	ea90 0f01 	teq	r0, r1
 80003d4:	bf1c      	itt	ne
 80003d6:	2000      	movne	r0, #0
 80003d8:	4770      	bxne	lr
 80003da:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003de:	d104      	bne.n	80003ea <__addsf3+0x126>
 80003e0:	0040      	lsls	r0, r0, #1
 80003e2:	bf28      	it	cs
 80003e4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e8:	4770      	bx	lr
 80003ea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ee:	bf3c      	itt	cc
 80003f0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f4:	4770      	bxcc	lr
 80003f6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003fa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000402:	4770      	bx	lr
 8000404:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000408:	bf16      	itet	ne
 800040a:	4608      	movne	r0, r1
 800040c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000410:	4601      	movne	r1, r0
 8000412:	0242      	lsls	r2, r0, #9
 8000414:	bf06      	itte	eq
 8000416:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800041a:	ea90 0f01 	teqeq	r0, r1
 800041e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000422:	4770      	bx	lr

08000424 <__aeabi_ui2f>:
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	e004      	b.n	8000434 <__aeabi_i2f+0x8>
 800042a:	bf00      	nop

0800042c <__aeabi_i2f>:
 800042c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	ea5f 0c00 	movs.w	ip, r0
 8000438:	bf08      	it	eq
 800043a:	4770      	bxeq	lr
 800043c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000440:	4601      	mov	r1, r0
 8000442:	f04f 0000 	mov.w	r0, #0
 8000446:	e01c      	b.n	8000482 <__aeabi_l2f+0x2a>

08000448 <__aeabi_ul2f>:
 8000448:	ea50 0201 	orrs.w	r2, r0, r1
 800044c:	bf08      	it	eq
 800044e:	4770      	bxeq	lr
 8000450:	f04f 0300 	mov.w	r3, #0
 8000454:	e00a      	b.n	800046c <__aeabi_l2f+0x14>
 8000456:	bf00      	nop

08000458 <__aeabi_l2f>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000464:	d502      	bpl.n	800046c <__aeabi_l2f+0x14>
 8000466:	4240      	negs	r0, r0
 8000468:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800046c:	ea5f 0c01 	movs.w	ip, r1
 8000470:	bf02      	ittt	eq
 8000472:	4684      	moveq	ip, r0
 8000474:	4601      	moveq	r1, r0
 8000476:	2000      	moveq	r0, #0
 8000478:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800047c:	bf08      	it	eq
 800047e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000482:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000486:	fabc f28c 	clz	r2, ip
 800048a:	3a08      	subs	r2, #8
 800048c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000490:	db10      	blt.n	80004b4 <__aeabi_l2f+0x5c>
 8000492:	fa01 fc02 	lsl.w	ip, r1, r2
 8000496:	4463      	add	r3, ip
 8000498:	fa00 fc02 	lsl.w	ip, r0, r2
 800049c:	f1c2 0220 	rsb	r2, r2, #32
 80004a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a4:	fa20 f202 	lsr.w	r2, r0, r2
 80004a8:	eb43 0002 	adc.w	r0, r3, r2
 80004ac:	bf08      	it	eq
 80004ae:	f020 0001 	biceq.w	r0, r0, #1
 80004b2:	4770      	bx	lr
 80004b4:	f102 0220 	add.w	r2, r2, #32
 80004b8:	fa01 fc02 	lsl.w	ip, r1, r2
 80004bc:	f1c2 0220 	rsb	r2, r2, #32
 80004c0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c4:	fa21 f202 	lsr.w	r2, r1, r2
 80004c8:	eb43 0002 	adc.w	r0, r3, r2
 80004cc:	bf08      	it	eq
 80004ce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_f2uiz>:
 80004d4:	0042      	lsls	r2, r0, #1
 80004d6:	d20e      	bcs.n	80004f6 <__aeabi_f2uiz+0x22>
 80004d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004dc:	d30b      	bcc.n	80004f6 <__aeabi_f2uiz+0x22>
 80004de:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004e2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e6:	d409      	bmi.n	80004fc <__aeabi_f2uiz+0x28>
 80004e8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004f0:	fa23 f002 	lsr.w	r0, r3, r2
 80004f4:	4770      	bx	lr
 80004f6:	f04f 0000 	mov.w	r0, #0
 80004fa:	4770      	bx	lr
 80004fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000500:	d101      	bne.n	8000506 <__aeabi_f2uiz+0x32>
 8000502:	0242      	lsls	r2, r0, #9
 8000504:	d102      	bne.n	800050c <__aeabi_f2uiz+0x38>
 8000506:	f04f 30ff 	mov.w	r0, #4294967295
 800050a:	4770      	bx	lr
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <tm1637_CLKhigh>:

extern uint32_t Timer1;
extern uint8_t CurrentDisplay[4];
extern uint8_t tm1637_Segments[8];
void tm1637_CLKhigh()
{																	  	//SCL high period
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);		  	//Setting SCL frequency
 8000518:	2201      	movs	r2, #1
 800051a:	2110      	movs	r1, #16
 800051c:	4807      	ldr	r0, [pc, #28]	; (800053c <tm1637_CLKhigh+0x28>)
 800051e:	f002 fa7c 	bl	8002a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000522:	2201      	movs	r2, #1
 8000524:	2110      	movs	r1, #16
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <tm1637_CLKhigh+0x28>)
 8000528:	f002 fa77 	bl	8002a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	2110      	movs	r1, #16
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <tm1637_CLKhigh+0x28>)
 8000532:	f002 fa72 	bl	8002a1a <HAL_GPIO_WritePin>
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40010800 	.word	0x40010800

08000540 <tm1637_CLKlow>:
void tm1637_CLKlow()
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);		//SCL low period
 8000544:	2200      	movs	r2, #0
 8000546:	2110      	movs	r1, #16
 8000548:	4807      	ldr	r0, [pc, #28]	; (8000568 <tm1637_CLKlow+0x28>)
 800054a:	f002 fa66 	bl	8002a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2110      	movs	r1, #16
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <tm1637_CLKlow+0x28>)
 8000554:	f002 fa61 	bl	8002a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2110      	movs	r1, #16
 800055c:	4802      	ldr	r0, [pc, #8]	; (8000568 <tm1637_CLKlow+0x28>)
 800055e:	f002 fa5c 	bl	8002a1a <HAL_GPIO_WritePin>
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40010800 	.word	0x40010800

0800056c <tm1637_SDOhigh>:
void tm1637_SDOhigh()
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);			//SDO high period
 8000570:	2201      	movs	r2, #1
 8000572:	2120      	movs	r1, #32
 8000574:	4807      	ldr	r0, [pc, #28]	; (8000594 <tm1637_SDOhigh+0x28>)
 8000576:	f002 fa50 	bl	8002a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800057a:	2201      	movs	r2, #1
 800057c:	2120      	movs	r1, #32
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <tm1637_SDOhigh+0x28>)
 8000580:	f002 fa4b 	bl	8002a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	2120      	movs	r1, #32
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <tm1637_SDOhigh+0x28>)
 800058a:	f002 fa46 	bl	8002a1a <HAL_GPIO_WritePin>
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40010800 	.word	0x40010800

08000598 <tm1637_SDOlow>:
void tm1637_SDOlow()
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);			//SDO low period
 800059c:	2200      	movs	r2, #0
 800059e:	2120      	movs	r1, #32
 80005a0:	4807      	ldr	r0, [pc, #28]	; (80005c0 <tm1637_SDOlow+0x28>)
 80005a2:	f002 fa3a 	bl	8002a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2120      	movs	r1, #32
 80005aa:	4805      	ldr	r0, [pc, #20]	; (80005c0 <tm1637_SDOlow+0x28>)
 80005ac:	f002 fa35 	bl	8002a1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2120      	movs	r1, #32
 80005b4:	4802      	ldr	r0, [pc, #8]	; (80005c0 <tm1637_SDOlow+0x28>)
 80005b6:	f002 fa30 	bl	8002a1a <HAL_GPIO_WritePin>
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40010800 	.word	0x40010800

080005c4 <tm1637_StartPacket>:
void tm1637_StartPacket()												//Lower SDO line while CLK line is high
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	tm1637_CLKhigh();
 80005c8:	f7ff ffa4 	bl	8000514 <tm1637_CLKhigh>

	tm1637_SDOhigh();
 80005cc:	f7ff ffce 	bl	800056c <tm1637_SDOhigh>
	tm1637_SDOlow();
 80005d0:	f7ff ffe2 	bl	8000598 <tm1637_SDOlow>

	tm1637_CLKlow();
 80005d4:	f7ff ffb4 	bl	8000540 <tm1637_CLKlow>
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <tm1637_EndPacket>:
void tm1637_EndPacket()													//SDO line is pulled high while SCL line is high
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	tm1637_CLKlow();
 80005e0:	f7ff ffae 	bl	8000540 <tm1637_CLKlow>
	tm1637_SDOlow();
 80005e4:	f7ff ffd8 	bl	8000598 <tm1637_SDOlow>

	tm1637_CLKhigh();
 80005e8:	f7ff ff94 	bl	8000514 <tm1637_CLKhigh>
	tm1637_SDOhigh();
 80005ec:	f7ff ffbe 	bl	800056c <tm1637_SDOhigh>
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <tm1637_DataOut>:
void tm1637_DataOut(uint8_t *tm1637_TxBuffer)							//Low level data transfer function
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]

	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e015      	b.n	800062e <tm1637_DataOut+0x3a>
	{
		tm1637_CLKlow();
 8000602:	f7ff ff9d 	bl	8000540 <tm1637_CLKlow>
		if(tm1637_TxBuffer[j] == GPIO_PIN_SET)							//Check logic level
 8000606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d102      	bne.n	800061a <tm1637_DataOut+0x26>
		{
			tm1637_SDOhigh();
 8000614:	f7ff ffaa 	bl	800056c <tm1637_SDOhigh>
 8000618:	e001      	b.n	800061e <tm1637_DataOut+0x2a>

		}
		else
		{
			tm1637_SDOlow();
 800061a:	f7ff ffbd 	bl	8000598 <tm1637_SDOlow>

		}
		tm1637_CLKhigh();
 800061e:	f7ff ff79 	bl	8000514 <tm1637_CLKhigh>
	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 8000622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000626:	b2db      	uxtb	r3, r3
 8000628:	3301      	adds	r3, #1
 800062a:	b2db      	uxtb	r3, r3
 800062c:	73fb      	strb	r3, [r7, #15]
 800062e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000632:	2b07      	cmp	r3, #7
 8000634:	dde5      	ble.n	8000602 <tm1637_DataOut+0xe>
	} 
}
 8000636:	bf00      	nop
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <tm1637_TxCommand>:
void tm1637_TxCommand(uint8_t *Command)
{																		//Handles high level (bit by bit) transmission operation
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	uint8_t ByteData[8] = {0};
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 8000650:	2300      	movs	r3, #0
 8000652:	75fb      	strb	r3, [r7, #23]
 8000654:	e014      	b.n	8000680 <tm1637_TxCommand+0x40>
	{

		ByteData[i] = (Command[0] & (0x01 << i)) && 1;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	461a      	mov	r2, r3
 800065c:	7dfb      	ldrb	r3, [r7, #23]
 800065e:	fa42 f303 	asr.w	r3, r2, r3
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	2b00      	cmp	r3, #0
 8000668:	bf14      	ite	ne
 800066a:	2301      	movne	r3, #1
 800066c:	2300      	moveq	r3, #0
 800066e:	b2da      	uxtb	r2, r3
 8000670:	7dfb      	ldrb	r3, [r7, #23]
 8000672:	3318      	adds	r3, #24
 8000674:	443b      	add	r3, r7
 8000676:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 800067a:	7dfb      	ldrb	r3, [r7, #23]
 800067c:	3301      	adds	r3, #1
 800067e:	75fb      	strb	r3, [r7, #23]
 8000680:	7dfb      	ldrb	r3, [r7, #23]
 8000682:	2b07      	cmp	r3, #7
 8000684:	d9e7      	bls.n	8000656 <tm1637_TxCommand+0x16>

																		//Convert from byte to bit per array element
	}

	tm1637_StartPacket();												//Send start packet bit
 8000686:	f7ff ff9d 	bl	80005c4 <tm1637_StartPacket>
	tm1637_DataOut(ByteData);											//Send one byte
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ffb0 	bl	80005f4 <tm1637_DataOut>
	tm1637_CLKlow();													//Send one CLK for acknowledgment
 8000694:	f7ff ff54 	bl	8000540 <tm1637_CLKlow>
	tm1637_CLKhigh();
 8000698:	f7ff ff3c 	bl	8000514 <tm1637_CLKhigh>
	tm1637_ACKcheck();													//wait for acknowledgment.
 800069c:	f000 f87e 	bl	800079c <tm1637_ACKcheck>
	if((Command[0] & 0xC0) != (0xC0))										//Check if the received packet is not an address.
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80006a8:	2bc0      	cmp	r3, #192	; 0xc0
 80006aa:	d001      	beq.n	80006b0 <tm1637_TxCommand+0x70>
	{
		tm1637_EndPacket();
 80006ac:	f7ff ff96 	bl	80005dc <tm1637_EndPacket>
	}

}
 80006b0:	bf00      	nop
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <tm1637_TxData>:
void tm1637_TxData(uint8_t *Data, uint8_t PacketSize)
{																		//Handles high level (bit by bit) transmission operation
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
	uint8_t ByteData[8] = {0};
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	2300      	movs	r3, #0
 80006ca:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < PacketSize; i++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	75fb      	strb	r3, [r7, #23]
 80006d0:	e02a      	b.n	8000728 <tm1637_TxData+0x70>
	{
		for(uint8_t j = 0; j < 8; j++)
 80006d2:	2300      	movs	r3, #0
 80006d4:	75bb      	strb	r3, [r7, #22]
 80006d6:	e016      	b.n	8000706 <tm1637_TxData+0x4e>
		{
			ByteData[j] = (Data[i] & (0x01 << j)) && 1;
 80006d8:	7dfb      	ldrb	r3, [r7, #23]
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	461a      	mov	r2, r3
 80006e2:	7dbb      	ldrb	r3, [r7, #22]
 80006e4:	fa42 f303 	asr.w	r3, r2, r3
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	bf14      	ite	ne
 80006f0:	2301      	movne	r3, #1
 80006f2:	2300      	moveq	r3, #0
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	7dbb      	ldrb	r3, [r7, #22]
 80006f8:	3318      	adds	r3, #24
 80006fa:	443b      	add	r3, r7
 80006fc:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t j = 0; j < 8; j++)
 8000700:	7dbb      	ldrb	r3, [r7, #22]
 8000702:	3301      	adds	r3, #1
 8000704:	75bb      	strb	r3, [r7, #22]
 8000706:	7dbb      	ldrb	r3, [r7, #22]
 8000708:	2b07      	cmp	r3, #7
 800070a:	d9e5      	bls.n	80006d8 <tm1637_TxData+0x20>
		}
		tm1637_DataOut(ByteData);
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff6f 	bl	80005f4 <tm1637_DataOut>
		tm1637_CLKlow();
 8000716:	f7ff ff13 	bl	8000540 <tm1637_CLKlow>
		tm1637_CLKhigh();
 800071a:	f7ff fefb 	bl	8000514 <tm1637_CLKhigh>
		tm1637_ACKcheck();												//Transmit byte by byte
 800071e:	f000 f83d 	bl	800079c <tm1637_ACKcheck>
	for(uint8_t i = 0; i < PacketSize; i++)
 8000722:	7dfb      	ldrb	r3, [r7, #23]
 8000724:	3301      	adds	r3, #1
 8000726:	75fb      	strb	r3, [r7, #23]
 8000728:	7dfa      	ldrb	r2, [r7, #23]
 800072a:	78fb      	ldrb	r3, [r7, #3]
 800072c:	429a      	cmp	r2, r3
 800072e:	d3d0      	bcc.n	80006d2 <tm1637_TxData+0x1a>

	}
	tm1637_EndPacket();													//Send end packet at the end of data transmission.
 8000730:	f7ff ff54 	bl	80005dc <tm1637_EndPacket>


}
 8000734:	bf00      	nop
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <tm1637_Initialize>:
void tm1637_Initialize(uint8_t Direction)								//Since SDI line is doing both transmission and reception
{																		//the corresponding GPIO pin must be reinitialized on the run
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};								//To read ACK from TM1637 and to write data to it
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000754:	2310      	movs	r3, #16
 8000756:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2302      	movs	r3, #2
 800075e:	617b      	str	r3, [r7, #20]
	switch (Direction)													//Depending on the function input initialize the pin as input or output
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d00a      	beq.n	800077c <tm1637_Initialize+0x40>
 8000766:	2b01      	cmp	r3, #1
 8000768:	d111      	bne.n	800078e <tm1637_Initialize+0x52>
	{
		case DISPLAY2STM:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800076e:	f107 0308 	add.w	r3, r7, #8
 8000772:	4619      	mov	r1, r3
 8000774:	4808      	ldr	r0, [pc, #32]	; (8000798 <tm1637_Initialize+0x5c>)
 8000776:	f001 ffb5 	bl	80026e4 <HAL_GPIO_Init>
			break;
 800077a:	e008      	b.n	800078e <tm1637_Initialize+0x52>
		case STM2DISPLAY:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	4619      	mov	r1, r3
 8000786:	4804      	ldr	r0, [pc, #16]	; (8000798 <tm1637_Initialize+0x5c>)
 8000788:	f001 ffac 	bl	80026e4 <HAL_GPIO_Init>
			break;
 800078c:	bf00      	nop

	}

}
 800078e:	bf00      	nop
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40011400 	.word	0x40011400

0800079c <tm1637_ACKcheck>:
void tm1637_ACKcheck()
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	//Wait for acknowledgment bit
	tm1637_Initialize(DISPLAY2STM);										//initialize pin as input
 80007a0:	2001      	movs	r0, #1
 80007a2:	f7ff ffcb 	bl	800073c <tm1637_Initialize>
	tm1637_CLKlow();													//lower CLK line
 80007a6:	f7ff fecb 	bl	8000540 <tm1637_CLKlow>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))					//Wait until ACK bit is received
 80007aa:	e002      	b.n	80007b2 <tm1637_ACKcheck+0x16>
	tm1637_Initialize(STM2DISPLAY);										//initialize pin as output for data transfer
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff ffc5 	bl	800073c <tm1637_Initialize>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))					//Wait until ACK bit is received
 80007b2:	2110      	movs	r1, #16
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <tm1637_ACKcheck+0x2c>)
 80007b6:	f002 f919 	bl	80029ec <HAL_GPIO_ReadPin>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d1f5      	bne.n	80007ac <tm1637_ACKcheck+0x10>
}
 80007c0:	bf00      	nop
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40010800 	.word	0x40010800

080007cc <tm1637_DisplayInteger>:
void tm1637_DisplayInteger(uint8_t number) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
    // Chuyển đổi số nguyên thành một chuỗi ký tự
    char strNumber[4];
    sprintf(strNumber, "%d", number);
 80007d6:	79fa      	ldrb	r2, [r7, #7]
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	4913      	ldr	r1, [pc, #76]	; (800082c <tm1637_DisplayInteger+0x60>)
 80007de:	4618      	mov	r0, r3
 80007e0:	f006 fe5a 	bl	8007498 <siprintf>

    // Chuyển đổi từ chuỗi ký tự thành dữ liệu hiển thị TM1637
    uint8_t displayData[4];
    for (int i = 0; i < 4; i++) {
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	e012      	b.n	8000810 <tm1637_DisplayInteger+0x44>
        displayData[i] = char2segments(strNumber[i]);
 80007ea:	f107 0210 	add.w	r2, r7, #16
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 f88b 	bl	8000910 <char2segments>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4619      	mov	r1, r3
 80007fe:	f107 020c 	add.w	r2, r7, #12
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	4413      	add	r3, r2
 8000806:	460a      	mov	r2, r1
 8000808:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	3301      	adds	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	2b03      	cmp	r3, #3
 8000814:	dde9      	ble.n	80007ea <tm1637_DisplayInteger+0x1e>
    }

    // Hiển thị dữ liệu trên TM1637 với độ sáng là 7
    tm1637_DisplayHandle(7, displayData);
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4619      	mov	r1, r3
 800081c:	2007      	movs	r0, #7
 800081e:	f000 f807 	bl	8000830 <tm1637_DisplayHandle>
}
 8000822:	bf00      	nop
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	08007e14 	.word	0x08007e14

08000830 <tm1637_DisplayHandle>:
	tm1637_TxData(EmptyBuffer, 4);
	CommandCarrier[0] = DISPLAY_OFF;
	tm1637_TxCommand(CommandCarrier);
}
uint8_t tm1637_DisplayHandle(uint8_t Brightness, uint8_t *DisplayBuffer)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	71fb      	strb	r3, [r7, #7]
	//This function handles the low level protocol used to set data address of TM1637 and turn the display on
	//#param Brightness is used to set the brightness level of the display. This function accepts Brightness value between 0 and 7
	//#param *DisplayBuffer is the buffer used to map data from the RAM to the display each element corresponds to one segment in the display
	uint8_t CommandCarrier[1] = {0};
 800083c:	2300      	movs	r3, #0
 800083e:	733b      	strb	r3, [r7, #12]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 8000840:	2301      	movs	r3, #1
 8000842:	73fb      	strb	r3, [r7, #15]
	if(Brightness <= 7)												//there are 7 levels of brightness
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b07      	cmp	r3, #7
 8000848:	d819      	bhi.n	800087e <tm1637_DisplayHandle+0x4e>
	{
	  CommandCarrier[0] = DATA_SET;									//Send set data command
 800084a:	2340      	movs	r3, #64	; 0x40
 800084c:	733b      	strb	r3, [r7, #12]
	  tm1637_TxCommand(CommandCarrier);
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fef4 	bl	8000640 <tm1637_TxCommand>
	  CommandCarrier[0] = C0H;										//Set address
 8000858:	23c0      	movs	r3, #192	; 0xc0
 800085a:	733b      	strb	r3, [r7, #12]
	  tm1637_TxCommand(CommandCarrier);
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff feed 	bl	8000640 <tm1637_TxCommand>

	  tm1637_TxData(DisplayBuffer, 4);								//Map the data stored in RAM to the display
 8000866:	2104      	movs	r1, #4
 8000868:	6838      	ldr	r0, [r7, #0]
 800086a:	f7ff ff25 	bl	80006b8 <tm1637_TxData>
	  tm1637_SetBrighness(Brightness);								//Turn on display and set brightness
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	4618      	mov	r0, r3
 8000872:	f000 f809 	bl	8000888 <tm1637_SetBrighness>
		ParameterFalidation = TM1637_OK;
 8000876:	2300      	movs	r3, #0
 8000878:	73fb      	strb	r3, [r7, #15]
		return ParameterFalidation;
 800087a:	7bfb      	ldrb	r3, [r7, #15]
 800087c:	e000      	b.n	8000880 <tm1637_DisplayHandle+0x50>
	}
	return ParameterFalidation;
 800087e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <tm1637_SetBrighness>:
tm1637_StatusTypedef tm1637_SetBrighness(uint8_t BrighnessLevel)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
	uint8_t BrighnessBuffer[8] = {0};
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	75bb      	strb	r3, [r7, #22]
	if(BrighnessLevel <= 7)												//there are 7 levels of brightness
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b07      	cmp	r3, #7
 80008a2:	d82f      	bhi.n	8000904 <tm1637_SetBrighness+0x7c>
	{																	//Any value above that will be ignored.
		BrighnessLevel = BrighnessLevel | DISPLAY_ON;					//Set Brightness level with display on command
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	f063 0377 	orn	r3, r3, #119	; 0x77
 80008aa:	71fb      	strb	r3, [r7, #7]

		for(uint8_t i = 0; i < 8; i++)
 80008ac:	2300      	movs	r3, #0
 80008ae:	75fb      	strb	r3, [r7, #23]
 80008b0:	e012      	b.n	80008d8 <tm1637_SetBrighness+0x50>
		{
			BrighnessBuffer[i] = (BrighnessLevel & (0x01 << i)) && 1;
 80008b2:	79fa      	ldrb	r2, [r7, #7]
 80008b4:	7dfb      	ldrb	r3, [r7, #23]
 80008b6:	fa42 f303 	asr.w	r3, r2, r3
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	2b00      	cmp	r3, #0
 80008c0:	bf14      	ite	ne
 80008c2:	2301      	movne	r3, #1
 80008c4:	2300      	moveq	r3, #0
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	7dfb      	ldrb	r3, [r7, #23]
 80008ca:	3318      	adds	r3, #24
 80008cc:	443b      	add	r3, r7
 80008ce:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t i = 0; i < 8; i++)
 80008d2:	7dfb      	ldrb	r3, [r7, #23]
 80008d4:	3301      	adds	r3, #1
 80008d6:	75fb      	strb	r3, [r7, #23]
 80008d8:	7dfb      	ldrb	r3, [r7, #23]
 80008da:	2b07      	cmp	r3, #7
 80008dc:	d9e9      	bls.n	80008b2 <tm1637_SetBrighness+0x2a>
		}
		tm1637_StartPacket();
 80008de:	f7ff fe71 	bl	80005c4 <tm1637_StartPacket>
		tm1637_DataOut(BrighnessBuffer);
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fe84 	bl	80005f4 <tm1637_DataOut>
		tm1637_CLKlow();													//Send one CLK for acknowledgment
 80008ec:	f7ff fe28 	bl	8000540 <tm1637_CLKlow>
		tm1637_CLKhigh();
 80008f0:	f7ff fe10 	bl	8000514 <tm1637_CLKhigh>
		tm1637_ACKcheck();													//wait for acknowledgment.
 80008f4:	f7ff ff52 	bl	800079c <tm1637_ACKcheck>
		tm1637_EndPacket();
 80008f8:	f7ff fe70 	bl	80005dc <tm1637_EndPacket>
		ParameterFalidation = TM1637_OK;
 80008fc:	2300      	movs	r3, #0
 80008fe:	75bb      	strb	r3, [r7, #22]
		return ParameterFalidation;
 8000900:	7dbb      	ldrb	r3, [r7, #22]
 8000902:	e000      	b.n	8000906 <tm1637_SetBrighness+0x7e>
	}
	return ParameterFalidation;
 8000904:	7dbb      	ldrb	r3, [r7, #22]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <char2segments>:
		  }

	  }
}

uint8_t char2segments(char c) {
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
        switch (c) {
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	3b20      	subs	r3, #32
 800091e:	2b5a      	cmp	r3, #90	; 0x5a
 8000920:	f200 811a 	bhi.w	8000b58 <char2segments+0x248>
 8000924:	a201      	add	r2, pc, #4	; (adr r2, 800092c <char2segments+0x1c>)
 8000926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800092a:	bf00      	nop
 800092c:	08000ad1 	.word	0x08000ad1
 8000930:	08000b59 	.word	0x08000b59
 8000934:	08000b59 	.word	0x08000b59
 8000938:	08000b59 	.word	0x08000b59
 800093c:	08000b59 	.word	0x08000b59
 8000940:	08000b59 	.word	0x08000b59
 8000944:	08000b59 	.word	0x08000b59
 8000948:	08000b59 	.word	0x08000b59
 800094c:	08000b59 	.word	0x08000b59
 8000950:	08000b59 	.word	0x08000b59
 8000954:	08000acd 	.word	0x08000acd
 8000958:	08000b59 	.word	0x08000b59
 800095c:	08000b59 	.word	0x08000b59
 8000960:	08000ac9 	.word	0x08000ac9
 8000964:	08000b59 	.word	0x08000b59
 8000968:	08000b59 	.word	0x08000b59
 800096c:	08000a99 	.word	0x08000a99
 8000970:	08000a9d 	.word	0x08000a9d
 8000974:	08000aa1 	.word	0x08000aa1
 8000978:	08000aa5 	.word	0x08000aa5
 800097c:	08000aa9 	.word	0x08000aa9
 8000980:	08000aad 	.word	0x08000aad
 8000984:	08000ab1 	.word	0x08000ab1
 8000988:	08000ab5 	.word	0x08000ab5
 800098c:	08000ab9 	.word	0x08000ab9
 8000990:	08000abd 	.word	0x08000abd
 8000994:	08000b59 	.word	0x08000b59
 8000998:	08000b59 	.word	0x08000b59
 800099c:	08000b59 	.word	0x08000b59
 80009a0:	08000b59 	.word	0x08000b59
 80009a4:	08000b59 	.word	0x08000b59
 80009a8:	08000b59 	.word	0x08000b59
 80009ac:	08000b59 	.word	0x08000b59
 80009b0:	08000ad5 	.word	0x08000ad5
 80009b4:	08000add 	.word	0x08000add
 80009b8:	08000ae1 	.word	0x08000ae1
 80009bc:	08000ae9 	.word	0x08000ae9
 80009c0:	08000aed 	.word	0x08000aed
 80009c4:	08000af1 	.word	0x08000af1
 80009c8:	08000af5 	.word	0x08000af5
 80009cc:	08000af9 	.word	0x08000af9
 80009d0:	08000b01 	.word	0x08000b01
 80009d4:	08000b09 	.word	0x08000b09
 80009d8:	08000b11 	.word	0x08000b11
 80009dc:	08000b15 	.word	0x08000b15
 80009e0:	08000b19 	.word	0x08000b19
 80009e4:	08000b1d 	.word	0x08000b1d
 80009e8:	08000b21 	.word	0x08000b21
 80009ec:	08000b25 	.word	0x08000b25
 80009f0:	08000b29 	.word	0x08000b29
 80009f4:	08000b31 	.word	0x08000b31
 80009f8:	08000b35 	.word	0x08000b35
 80009fc:	08000b39 	.word	0x08000b39
 8000a00:	08000b3d 	.word	0x08000b3d
 8000a04:	08000b41 	.word	0x08000b41
 8000a08:	08000b45 	.word	0x08000b45
 8000a0c:	08000b4d 	.word	0x08000b4d
 8000a10:	08000b51 	.word	0x08000b51
 8000a14:	08000b55 	.word	0x08000b55
 8000a18:	08000b59 	.word	0x08000b59
 8000a1c:	08000b59 	.word	0x08000b59
 8000a20:	08000b59 	.word	0x08000b59
 8000a24:	08000ac5 	.word	0x08000ac5
 8000a28:	08000ac1 	.word	0x08000ac1
 8000a2c:	08000b59 	.word	0x08000b59
 8000a30:	08000ad9 	.word	0x08000ad9
 8000a34:	08000add 	.word	0x08000add
 8000a38:	08000ae5 	.word	0x08000ae5
 8000a3c:	08000ae9 	.word	0x08000ae9
 8000a40:	08000aed 	.word	0x08000aed
 8000a44:	08000af1 	.word	0x08000af1
 8000a48:	08000af5 	.word	0x08000af5
 8000a4c:	08000afd 	.word	0x08000afd
 8000a50:	08000b05 	.word	0x08000b05
 8000a54:	08000b0d 	.word	0x08000b0d
 8000a58:	08000b11 	.word	0x08000b11
 8000a5c:	08000b15 	.word	0x08000b15
 8000a60:	08000b19 	.word	0x08000b19
 8000a64:	08000b1d 	.word	0x08000b1d
 8000a68:	08000b21 	.word	0x08000b21
 8000a6c:	08000b25 	.word	0x08000b25
 8000a70:	08000b2d 	.word	0x08000b2d
 8000a74:	08000b31 	.word	0x08000b31
 8000a78:	08000b35 	.word	0x08000b35
 8000a7c:	08000b39 	.word	0x08000b39
 8000a80:	08000b3d 	.word	0x08000b3d
 8000a84:	08000b41 	.word	0x08000b41
 8000a88:	08000b49 	.word	0x08000b49
 8000a8c:	08000b4d 	.word	0x08000b4d
 8000a90:	08000b51 	.word	0x08000b51
 8000a94:	08000b55 	.word	0x08000b55
			case '0' : return 0x3f;
 8000a98:	233f      	movs	r3, #63	; 0x3f
 8000a9a:	e05e      	b.n	8000b5a <char2segments+0x24a>
			case '1' : return 0x06;
 8000a9c:	2306      	movs	r3, #6
 8000a9e:	e05c      	b.n	8000b5a <char2segments+0x24a>
			case '2' : return 0x5b;
 8000aa0:	235b      	movs	r3, #91	; 0x5b
 8000aa2:	e05a      	b.n	8000b5a <char2segments+0x24a>
			case '3' : return 0x4f;
 8000aa4:	234f      	movs	r3, #79	; 0x4f
 8000aa6:	e058      	b.n	8000b5a <char2segments+0x24a>
			case '4' : return 0x66;
 8000aa8:	2366      	movs	r3, #102	; 0x66
 8000aaa:	e056      	b.n	8000b5a <char2segments+0x24a>
			case '5' : return 0x6d;
 8000aac:	236d      	movs	r3, #109	; 0x6d
 8000aae:	e054      	b.n	8000b5a <char2segments+0x24a>
			case '6' : return 0x7d;
 8000ab0:	237d      	movs	r3, #125	; 0x7d
 8000ab2:	e052      	b.n	8000b5a <char2segments+0x24a>
			case '7' : return 0x07;
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	e050      	b.n	8000b5a <char2segments+0x24a>
			case '8' : return 0x7f;
 8000ab8:	237f      	movs	r3, #127	; 0x7f
 8000aba:	e04e      	b.n	8000b5a <char2segments+0x24a>
			case '9' : return 0x6f;
 8000abc:	236f      	movs	r3, #111	; 0x6f
 8000abe:	e04c      	b.n	8000b5a <char2segments+0x24a>
            case '_' : return 0x08;
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	e04a      	b.n	8000b5a <char2segments+0x24a>
            case '^' : return 0x01; // ¯
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e048      	b.n	8000b5a <char2segments+0x24a>
            case '-' : return 0x40;
 8000ac8:	2340      	movs	r3, #64	; 0x40
 8000aca:	e046      	b.n	8000b5a <char2segments+0x24a>
            case '*' : return 0x63; // °
 8000acc:	2363      	movs	r3, #99	; 0x63
 8000ace:	e044      	b.n	8000b5a <char2segments+0x24a>
            case ' ' : return 0x00; // space
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e042      	b.n	8000b5a <char2segments+0x24a>
            case 'A' : return 0x77; // upper case A
 8000ad4:	2377      	movs	r3, #119	; 0x77
 8000ad6:	e040      	b.n	8000b5a <char2segments+0x24a>
            case 'a' : return 0x5f; // lower case a
 8000ad8:	235f      	movs	r3, #95	; 0x5f
 8000ada:	e03e      	b.n	8000b5a <char2segments+0x24a>
            case 'B' :              // lower case b
            case 'b' : return 0x7c; // lower case b
 8000adc:	237c      	movs	r3, #124	; 0x7c
 8000ade:	e03c      	b.n	8000b5a <char2segments+0x24a>
            case 'C' : return 0x39; // upper case C
 8000ae0:	2339      	movs	r3, #57	; 0x39
 8000ae2:	e03a      	b.n	8000b5a <char2segments+0x24a>
            case 'c' : return 0x58; // lower case c
 8000ae4:	2358      	movs	r3, #88	; 0x58
 8000ae6:	e038      	b.n	8000b5a <char2segments+0x24a>
            case 'D' :              // lower case d
            case 'd' : return 0x5e; // lower case d
 8000ae8:	235e      	movs	r3, #94	; 0x5e
 8000aea:	e036      	b.n	8000b5a <char2segments+0x24a>
            case 'E' :              // upper case E
            case 'e' : return 0x79; // upper case E
 8000aec:	2379      	movs	r3, #121	; 0x79
 8000aee:	e034      	b.n	8000b5a <char2segments+0x24a>
            case 'F' :              // upper case F
            case 'f' : return 0x71; // upper case F
 8000af0:	2371      	movs	r3, #113	; 0x71
 8000af2:	e032      	b.n	8000b5a <char2segments+0x24a>
            case 'G' :              // upper case G
            case 'g' : return 0x35; // upper case G
 8000af4:	2335      	movs	r3, #53	; 0x35
 8000af6:	e030      	b.n	8000b5a <char2segments+0x24a>
            case 'H' : return 0x76; // upper case H
 8000af8:	2376      	movs	r3, #118	; 0x76
 8000afa:	e02e      	b.n	8000b5a <char2segments+0x24a>
            case 'h' : return 0x74; // lower case h
 8000afc:	2374      	movs	r3, #116	; 0x74
 8000afe:	e02c      	b.n	8000b5a <char2segments+0x24a>
            case 'I' : return 0x06; // 1
 8000b00:	2306      	movs	r3, #6
 8000b02:	e02a      	b.n	8000b5a <char2segments+0x24a>
            case 'i' : return 0x04; // lower case i
 8000b04:	2304      	movs	r3, #4
 8000b06:	e028      	b.n	8000b5a <char2segments+0x24a>
            case 'J' : return 0x1e; // upper case J
 8000b08:	231e      	movs	r3, #30
 8000b0a:	e026      	b.n	8000b5a <char2segments+0x24a>
            case 'j' : return 0x16; // lower case j
 8000b0c:	2316      	movs	r3, #22
 8000b0e:	e024      	b.n	8000b5a <char2segments+0x24a>
            case 'K' :              // upper case K
            case 'k' : return 0x75; // upper case K
 8000b10:	2375      	movs	r3, #117	; 0x75
 8000b12:	e022      	b.n	8000b5a <char2segments+0x24a>
            case 'L' :              // upper case L
            case 'l' : return 0x38; // upper case L
 8000b14:	2338      	movs	r3, #56	; 0x38
 8000b16:	e020      	b.n	8000b5a <char2segments+0x24a>
            case 'M' :              // twice tall n
            case 'm' : return 0x37; // twice tall ∩
 8000b18:	2337      	movs	r3, #55	; 0x37
 8000b1a:	e01e      	b.n	8000b5a <char2segments+0x24a>
            case 'N' :              // lower case n
            case 'n' : return 0x54; // lower case n
 8000b1c:	2354      	movs	r3, #84	; 0x54
 8000b1e:	e01c      	b.n	8000b5a <char2segments+0x24a>
            case 'O' :              // lower case o
            case 'o' : return 0x5c; // lower case o
 8000b20:	235c      	movs	r3, #92	; 0x5c
 8000b22:	e01a      	b.n	8000b5a <char2segments+0x24a>
            case 'P' :              // upper case P
            case 'p' : return 0x73; // upper case P
 8000b24:	2373      	movs	r3, #115	; 0x73
 8000b26:	e018      	b.n	8000b5a <char2segments+0x24a>
            case 'Q' : return 0x7b; // upper case Q
 8000b28:	237b      	movs	r3, #123	; 0x7b
 8000b2a:	e016      	b.n	8000b5a <char2segments+0x24a>
            case 'q' : return 0x67; // lower case q
 8000b2c:	2367      	movs	r3, #103	; 0x67
 8000b2e:	e014      	b.n	8000b5a <char2segments+0x24a>
            case 'R' :              // lower case r
            case 'r' : return 0x50; // lower case r
 8000b30:	2350      	movs	r3, #80	; 0x50
 8000b32:	e012      	b.n	8000b5a <char2segments+0x24a>
            case 'S' :              // 5
            case 's' : return 0x6d; // 5
 8000b34:	236d      	movs	r3, #109	; 0x6d
 8000b36:	e010      	b.n	8000b5a <char2segments+0x24a>
            case 'T' :              // lower case t
            case 't' : return 0x78; // lower case t
 8000b38:	2378      	movs	r3, #120	; 0x78
 8000b3a:	e00e      	b.n	8000b5a <char2segments+0x24a>
            case 'U' :              // lower case u
            case 'u' : return 0x1c; // lower case u
 8000b3c:	231c      	movs	r3, #28
 8000b3e:	e00c      	b.n	8000b5a <char2segments+0x24a>
            case 'V' :              // twice tall u
            case 'v' : return 0x3e; // twice tall u
 8000b40:	233e      	movs	r3, #62	; 0x3e
 8000b42:	e00a      	b.n	8000b5a <char2segments+0x24a>
            case 'W' : return 0x7e; // upside down A
 8000b44:	237e      	movs	r3, #126	; 0x7e
 8000b46:	e008      	b.n	8000b5a <char2segments+0x24a>
            case 'w' : return 0x2a; // separated w
 8000b48:	232a      	movs	r3, #42	; 0x2a
 8000b4a:	e006      	b.n	8000b5a <char2segments+0x24a>
            case 'X' :              // upper case H
            case 'x' : return 0x76; // upper case H
 8000b4c:	2376      	movs	r3, #118	; 0x76
 8000b4e:	e004      	b.n	8000b5a <char2segments+0x24a>
            case 'Y' :              // lower case y
            case 'y' : return 0x6e; // lower case y
 8000b50:	236e      	movs	r3, #110	; 0x6e
 8000b52:	e002      	b.n	8000b5a <char2segments+0x24a>
            case 'Z' :              // separated Z
            case 'z' : return 0x1b; // separated Z
 8000b54:	231b      	movs	r3, #27
 8000b56:	e000      	b.n	8000b5a <char2segments+0x24a>
        }
        return 0;
 8000b58:	2300      	movs	r3, #0
    }
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr

08000b64 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <Ringbuf_init+0x38>)
 8000b6a:	4a0d      	ldr	r2, [pc, #52]	; (8000ba0 <Ringbuf_init+0x3c>)
 8000b6c:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <Ringbuf_init+0x40>)
 8000b70:	4a0d      	ldr	r2, [pc, #52]	; (8000ba8 <Ringbuf_init+0x44>)
 8000b72:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000b74:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <Ringbuf_init+0x48>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	695a      	ldr	r2, [r3, #20]
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <Ringbuf_init+0x48>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f042 0201 	orr.w	r2, r2, #1
 8000b82:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <Ringbuf_init+0x48>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	68da      	ldr	r2, [r3, #12]
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <Ringbuf_init+0x48>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f042 0220 	orr.w	r2, r2, #32
 8000b92:	60da      	str	r2, [r3, #12]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	20000118 	.word	0x20000118
 8000ba0:	20000088 	.word	0x20000088
 8000ba4:	2000011c 	.word	0x2000011c
 8000ba8:	200000d0 	.word	0x200000d0
 8000bac:	20000330 	.word	0x20000330

08000bb0 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000bc6:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d007      	beq.n	8000be2 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	683a      	ldr	r2, [r7, #0]
 8000bd8:	79f9      	ldrb	r1, [r7, #7]
 8000bda:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr

08000bec <Uart_isr>:
{
	while(*s) Uart_write(*s++);
}

void Uart_isr (UART_HandleTypeDef *huart)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	f003 0320 	and.w	r3, r3, #32
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d013      	beq.n	8000c36 <Uart_isr+0x4a>
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	f003 0320 	and.w	r3, r3, #32
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d00e      	beq.n	8000c36 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <Uart_isr+0xac>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ffbe 	bl	8000bb0 <store_char>
        return;
 8000c34:	e02c      	b.n	8000c90 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d027      	beq.n	8000c90 <Uart_isr+0xa4>
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d022      	beq.n	8000c90 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <Uart_isr+0xb0>)
 8000c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <Uart_isr+0xb0>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d108      	bne.n	8000c68 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	68da      	ldr	r2, [r3, #12]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c64:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8000c66:	e012      	b.n	8000c8e <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <Uart_isr+0xb0>)
 8000c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6c:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <Uart_isr+0xb0>)
 8000c6e:	5cd3      	ldrb	r3, [r2, r3]
 8000c70:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <Uart_isr+0xb0>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	3301      	adds	r3, #1
 8000c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c7c:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <Uart_isr+0xb0>)
 8000c7e:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	7bba      	ldrb	r2, [r7, #14]
 8000c8c:	605a      	str	r2, [r3, #4]
    	return;
 8000c8e:	bf00      	nop
    }
}
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000118 	.word	0x20000118
 8000c9c:	200000d0 	.word	0x200000d0

08000ca0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <MX_DMA_Init+0x48>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	4a0f      	ldr	r2, [pc, #60]	; (8000ce8 <MX_DMA_Init+0x48>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6153      	str	r3, [r2, #20]
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <MX_DMA_Init+0x48>)
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2105      	movs	r1, #5
 8000cc2:	200e      	movs	r0, #14
 8000cc4:	f001 facf 	bl	8002266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000cc8:	200e      	movs	r0, #14
 8000cca:	f001 fae8 	bl	800229e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2105      	movs	r1, #5
 8000cd2:	200f      	movs	r0, #15
 8000cd4:	f001 fac7 	bl	8002266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000cd8:	200f      	movs	r0, #15
 8000cda:	f001 fae0 	bl	800229e <HAL_NVIC_EnableIRQ>

}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000

08000cec <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	OneWire_Reset(&OneWire); // Reset the bus
 8000cf0:	4806      	ldr	r0, [pc, #24]	; (8000d0c <DS18B20_StartAll+0x20>)
 8000cf2:	f000 fc74 	bl	80015de <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 8000cf6:	21cc      	movs	r1, #204	; 0xcc
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <DS18B20_StartAll+0x20>)
 8000cfa:	f000 fced 	bl	80016d8 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 8000cfe:	2144      	movs	r1, #68	; 0x44
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <DS18B20_StartAll+0x20>)
 8000d02:	f000 fce9 	bl	80016d8 <OneWire_WriteByte>
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000160 	.word	0x20000160

08000d10 <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount) // If read sensor is not availible
 8000d1c:	4b4f      	ldr	r3, [pc, #316]	; (8000e5c <DS18B20_Read+0x14c>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	79fa      	ldrb	r2, [r7, #7]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d301      	bcc.n	8000d2a <DS18B20_Read+0x1a>
		return 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e094      	b.n	8000e54 <DS18B20_Read+0x144>

	uint16_t temperature;
	uint8_t resolution;
	float result;
	uint8_t i = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	74fb      	strb	r3, [r7, #19]
	uint8_t crc;

#endif

	
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	011b      	lsls	r3, r3, #4
 8000d32:	4a4b      	ldr	r2, [pc, #300]	; (8000e60 <DS18B20_Read+0x150>)
 8000d34:	4413      	add	r3, r2
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f93e 	bl	8000fb8 <DS18B20_Is>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <DS18B20_Read+0x36>
		return 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e086      	b.n	8000e54 <DS18B20_Read+0x144>

	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 8000d46:	4847      	ldr	r0, [pc, #284]	; (8000e64 <DS18B20_Read+0x154>)
 8000d48:	f000 fc9c 	bl	8001684 <OneWire_ReadBit>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <DS18B20_Read+0x46>
		return 0; // Busy bus - conversion is not finished
 8000d52:	2300      	movs	r3, #0
 8000d54:	e07e      	b.n	8000e54 <DS18B20_Read+0x144>

	OneWire_Reset(&OneWire); // Reset the bus
 8000d56:	4843      	ldr	r0, [pc, #268]	; (8000e64 <DS18B20_Read+0x154>)
 8000d58:	f000 fc41 	bl	80015de <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	4a3f      	ldr	r2, [pc, #252]	; (8000e60 <DS18B20_Read+0x150>)
 8000d62:	4413      	add	r3, r2
 8000d64:	4619      	mov	r1, r3
 8000d66:	483f      	ldr	r0, [pc, #252]	; (8000e64 <DS18B20_Read+0x154>)
 8000d68:	f000 fdea 	bl	8001940 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8000d6c:	21be      	movs	r1, #190	; 0xbe
 8000d6e:	483d      	ldr	r0, [pc, #244]	; (8000e64 <DS18B20_Read+0x154>)
 8000d70:	f000 fcb2 	bl	80016d8 <OneWire_WriteByte>
	
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8000d74:	2300      	movs	r3, #0
 8000d76:	74fb      	strb	r3, [r7, #19]
 8000d78:	e00d      	b.n	8000d96 <DS18B20_Read+0x86>
		data[i] = OneWire_ReadByte(&OneWire);
 8000d7a:	7cfc      	ldrb	r4, [r7, #19]
 8000d7c:	4839      	ldr	r0, [pc, #228]	; (8000e64 <DS18B20_Read+0x154>)
 8000d7e:	f000 fcc9 	bl	8001714 <OneWire_ReadByte>
 8000d82:	4603      	mov	r3, r0
 8000d84:	461a      	mov	r2, r3
 8000d86:	f104 0318 	add.w	r3, r4, #24
 8000d8a:	443b      	add	r3, r7
 8000d8c:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 8000d90:	7cfb      	ldrb	r3, [r7, #19]
 8000d92:	3301      	adds	r3, #1
 8000d94:	74fb      	strb	r3, [r7, #19]
 8000d96:	7cfb      	ldrb	r3, [r7, #19]
 8000d98:	2b04      	cmp	r3, #4
 8000d9a:	d9ee      	bls.n	8000d7a <DS18B20_Read+0x6a>
	crc = OneWire_CRC8(data, 8); // CRC calculation

	if (crc != data[8])
		return 0; // CRC invalid
#endif
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 8000d9c:	7a3b      	ldrb	r3, [r7, #8]
 8000d9e:	b21a      	sxth	r2, r3
 8000da0:	7a7b      	ldrb	r3, [r7, #9]
 8000da2:	021b      	lsls	r3, r3, #8
 8000da4:	b21b      	sxth	r3, r3
 8000da6:	4313      	orrs	r3, r2
 8000da8:	b21b      	sxth	r3, r3
 8000daa:	823b      	strh	r3, [r7, #16]

	OneWire_Reset(&OneWire); // Reset the bus
 8000dac:	482d      	ldr	r0, [pc, #180]	; (8000e64 <DS18B20_Read+0x154>)
 8000dae:	f000 fc16 	bl	80015de <OneWire_Reset>
	
	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 8000db2:	7b3b      	ldrb	r3, [r7, #12]
 8000db4:	115b      	asrs	r3, r3, #5
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	3309      	adds	r3, #9
 8000dc0:	73fb      	strb	r3, [r7, #15]

	switch (resolution) // Chceck the correct value dur to resolution
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	3b09      	subs	r3, #9
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d83e      	bhi.n	8000e48 <DS18B20_Read+0x138>
 8000dca:	a201      	add	r2, pc, #4	; (adr r2, 8000dd0 <DS18B20_Read+0xc0>)
 8000dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd0:	08000de1 	.word	0x08000de1
 8000dd4:	08000dfb 	.word	0x08000dfb
 8000dd8:	08000e15 	.word	0x08000e15
 8000ddc:	08000e2f 	.word	0x08000e2f
	{
		case DS18B20_Resolution_9bits:
			result = temperature*(float)DS18B20_STEP_9BIT;
 8000de0:	8a3b      	ldrh	r3, [r7, #16]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fb22 	bl	800042c <__aeabi_i2f>
 8000de8:	4603      	mov	r3, r0
 8000dea:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff f9ae 	bl	8000150 <__aeabi_fmul>
 8000df4:	4603      	mov	r3, r0
 8000df6:	617b      	str	r3, [r7, #20]
		break;
 8000df8:	e028      	b.n	8000e4c <DS18B20_Read+0x13c>
		case DS18B20_Resolution_10bits:
			result = temperature*(float)DS18B20_STEP_10BIT;
 8000dfa:	8a3b      	ldrh	r3, [r7, #16]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fb15 	bl	800042c <__aeabi_i2f>
 8000e02:	4603      	mov	r3, r0
 8000e04:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff f9a1 	bl	8000150 <__aeabi_fmul>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	617b      	str	r3, [r7, #20]
		 break;
 8000e12:	e01b      	b.n	8000e4c <DS18B20_Read+0x13c>
		case DS18B20_Resolution_11bits:
			result = temperature*(float)DS18B20_STEP_11BIT;
 8000e14:	8a3b      	ldrh	r3, [r7, #16]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fb08 	bl	800042c <__aeabi_i2f>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff f994 	bl	8000150 <__aeabi_fmul>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	617b      	str	r3, [r7, #20]
		break;
 8000e2c:	e00e      	b.n	8000e4c <DS18B20_Read+0x13c>
		case DS18B20_Resolution_12bits:
			result = temperature*(float)DS18B20_STEP_12BIT;
 8000e2e:	8a3b      	ldrh	r3, [r7, #16]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fafb 	bl	800042c <__aeabi_i2f>
 8000e36:	4603      	mov	r3, r0
 8000e38:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff f987 	bl	8000150 <__aeabi_fmul>
 8000e42:	4603      	mov	r3, r0
 8000e44:	617b      	str	r3, [r7, #20]
		 break;
 8000e46:	e001      	b.n	8000e4c <DS18B20_Read+0x13c>
		default: 
			result = 0xFF;
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <DS18B20_Read+0x158>)
 8000e4a:	617b      	str	r3, [r7, #20]
	}
	
	*destination = result;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	601a      	str	r2, [r3, #0]
	
	return 1; //temperature valid
 8000e52:	2301      	movs	r3, #1
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	371c      	adds	r7, #28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd90      	pop	{r4, r7, pc}
 8000e5c:	20000174 	.word	0x20000174
 8000e60:	20000120 	.word	0x20000120
 8000e64:	20000160 	.word	0x20000160
 8000e68:	437f0000 	.word	0x437f0000

08000e6c <DS18B20_SetResolution>:
	
	return conf;
}

uint8_t DS18B20_SetResolution(uint8_t number, DS18B20_Resolution_t resolution)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	460a      	mov	r2, r1
 8000e76:	71fb      	strb	r3, [r7, #7]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	71bb      	strb	r3, [r7, #6]
	if( number >= TempSensorCount)
 8000e7c:	4b4b      	ldr	r3, [pc, #300]	; (8000fac <DS18B20_SetResolution+0x140>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	79fa      	ldrb	r2, [r7, #7]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d301      	bcc.n	8000e8a <DS18B20_SetResolution+0x1e>
		return 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	e08c      	b.n	8000fa4 <DS18B20_SetResolution+0x138>

	uint8_t th, tl, conf;
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	011b      	lsls	r3, r3, #4
 8000e8e:	4a48      	ldr	r2, [pc, #288]	; (8000fb0 <DS18B20_SetResolution+0x144>)
 8000e90:	4413      	add	r3, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f890 	bl	8000fb8 <DS18B20_Is>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <DS18B20_SetResolution+0x36>
		return 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e080      	b.n	8000fa4 <DS18B20_SetResolution+0x138>
	
	OneWire_Reset(&OneWire); // Reset the bus
 8000ea2:	4844      	ldr	r0, [pc, #272]	; (8000fb4 <DS18B20_SetResolution+0x148>)
 8000ea4:	f000 fb9b 	bl	80015de <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	4a40      	ldr	r2, [pc, #256]	; (8000fb0 <DS18B20_SetResolution+0x144>)
 8000eae:	4413      	add	r3, r2
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4840      	ldr	r0, [pc, #256]	; (8000fb4 <DS18B20_SetResolution+0x148>)
 8000eb4:	f000 fd44 	bl	8001940 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8000eb8:	21be      	movs	r1, #190	; 0xbe
 8000eba:	483e      	ldr	r0, [pc, #248]	; (8000fb4 <DS18B20_SetResolution+0x148>)
 8000ebc:	f000 fc0c 	bl	80016d8 <OneWire_WriteByte>
	
	OneWire_ReadByte(&OneWire);
 8000ec0:	483c      	ldr	r0, [pc, #240]	; (8000fb4 <DS18B20_SetResolution+0x148>)
 8000ec2:	f000 fc27 	bl	8001714 <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 8000ec6:	483b      	ldr	r0, [pc, #236]	; (8000fb4 <DS18B20_SetResolution+0x148>)
 8000ec8:	f000 fc24 	bl	8001714 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 8000ecc:	4839      	ldr	r0, [pc, #228]	; (8000fb4 <DS18B20_SetResolution+0x148>)
 8000ece:	f000 fc21 	bl	8001714 <OneWire_ReadByte>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73bb      	strb	r3, [r7, #14]
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 8000ed6:	4837      	ldr	r0, [pc, #220]	; (8000fb4 <DS18B20_SetResolution+0x148>)
 8000ed8:	f000 fc1c 	bl	8001714 <OneWire_ReadByte>
 8000edc:	4603      	mov	r3, r0
 8000ede:	737b      	strb	r3, [r7, #13]
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 8000ee0:	4834      	ldr	r0, [pc, #208]	; (8000fb4 <DS18B20_SetResolution+0x148>)
 8000ee2:	f000 fc17 	bl	8001714 <OneWire_ReadByte>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	73fb      	strb	r3, [r7, #15]
	
	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 8000eea:	79bb      	ldrb	r3, [r7, #6]
 8000eec:	2b09      	cmp	r3, #9
 8000eee:	d108      	bne.n	8000f02 <DS18B20_SetResolution+0x96>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ef6:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	f023 0320 	bic.w	r3, r3, #32
 8000efe:	73fb      	strb	r3, [r7, #15]
 8000f00:	e022      	b.n	8000f48 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	2b0a      	cmp	r3, #10
 8000f06:	d108      	bne.n	8000f1a <DS18B20_SetResolution+0xae>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f0e:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	f043 0320 	orr.w	r3, r3, #32
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e016      	b.n	8000f48 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8000f1a:	79bb      	ldrb	r3, [r7, #6]
 8000f1c:	2b0b      	cmp	r3, #11
 8000f1e:	d108      	bne.n	8000f32 <DS18B20_SetResolution+0xc6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f26:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	f023 0320 	bic.w	r3, r3, #32
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	e00a      	b.n	8000f48 <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8000f32:	79bb      	ldrb	r3, [r7, #6]
 8000f34:	2b0c      	cmp	r3, #12
 8000f36:	d107      	bne.n	8000f48 <DS18B20_SetResolution+0xdc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f3e:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	f043 0320 	orr.w	r3, r3, #32
 8000f46:	73fb      	strb	r3, [r7, #15]
	}
	
	OneWire_Reset(&OneWire); // Reset the bus
 8000f48:	481a      	ldr	r0, [pc, #104]	; (8000fb4 <DS18B20_SetResolution+0x148>)
 8000f4a:	f000 fb48 	bl	80015de <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	011b      	lsls	r3, r3, #4
 8000f52:	4a17      	ldr	r2, [pc, #92]	; (8000fb0 <DS18B20_SetResolution+0x144>)
 8000f54:	4413      	add	r3, r2
 8000f56:	4619      	mov	r1, r3
 8000f58:	4816      	ldr	r0, [pc, #88]	; (8000fb4 <DS18B20_SetResolution+0x148>)
 8000f5a:	f000 fcf1 	bl	8001940 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 8000f5e:	214e      	movs	r1, #78	; 0x4e
 8000f60:	4814      	ldr	r0, [pc, #80]	; (8000fb4 <DS18B20_SetResolution+0x148>)
 8000f62:	f000 fbb9 	bl	80016d8 <OneWire_WriteByte>
	
	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 8000f66:	7bbb      	ldrb	r3, [r7, #14]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4812      	ldr	r0, [pc, #72]	; (8000fb4 <DS18B20_SetResolution+0x148>)
 8000f6c:	f000 fbb4 	bl	80016d8 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 8000f70:	7b7b      	ldrb	r3, [r7, #13]
 8000f72:	4619      	mov	r1, r3
 8000f74:	480f      	ldr	r0, [pc, #60]	; (8000fb4 <DS18B20_SetResolution+0x148>)
 8000f76:	f000 fbaf 	bl	80016d8 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <DS18B20_SetResolution+0x148>)
 8000f80:	f000 fbaa 	bl	80016d8 <OneWire_WriteByte>
	
	OneWire_Reset(&OneWire); // Reset the bus
 8000f84:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <DS18B20_SetResolution+0x148>)
 8000f86:	f000 fb2a 	bl	80015de <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	011b      	lsls	r3, r3, #4
 8000f8e:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <DS18B20_SetResolution+0x144>)
 8000f90:	4413      	add	r3, r2
 8000f92:	4619      	mov	r1, r3
 8000f94:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <DS18B20_SetResolution+0x148>)
 8000f96:	f000 fcd3 	bl	8001940 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 8000f9a:	2148      	movs	r1, #72	; 0x48
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <DS18B20_SetResolution+0x148>)
 8000f9e:	f000 fb9b 	bl	80016d8 <OneWire_WriteByte>
	
	return 1;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000174 	.word	0x20000174
 8000fb0:	20000120 	.word	0x20000120
 8000fb4:	20000160 	.word	0x20000160

08000fb8 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t* ROM)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b28      	cmp	r3, #40	; 0x28
 8000fc6:	d101      	bne.n	8000fcc <DS18B20_Is+0x14>
		return 1;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e000      	b.n	8000fce <DS18B20_Is+0x16>
	return 0;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr

08000fd8 <DS18B20_AllDone>:

uint8_t DS18B20_AllDone(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <DS18B20_AllDone+0x10>)
 8000fde:	f000 fb51 	bl	8001684 <OneWire_ReadBit>
 8000fe2:	4603      	mov	r3, r0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000160 	.word	0x20000160

08000fec <DS18B20_ReadAll>:

void DS18B20_ReadAll(void)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
	uint8_t i;

	if (DS18B20_AllDone())
 8000ff2:	f7ff fff1 	bl	8000fd8 <DS18B20_AllDone>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d02e      	beq.n	800105a <DS18B20_ReadAll+0x6e>
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	71fb      	strb	r3, [r7, #7]
 8001000:	e026      	b.n	8001050 <DS18B20_ReadAll+0x64>
		{
			ds18b20[i].ValidDataFlag = 0;
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	4a17      	ldr	r2, [pc, #92]	; (8001064 <DS18B20_ReadAll+0x78>)
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	4413      	add	r3, r2
 800100a:	330c      	adds	r3, #12
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	011b      	lsls	r3, r3, #4
 8001014:	4a13      	ldr	r2, [pc, #76]	; (8001064 <DS18B20_ReadAll+0x78>)
 8001016:	4413      	add	r3, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ffcd 	bl	8000fb8 <DS18B20_Is>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d012      	beq.n	800104a <DS18B20_ReadAll+0x5e>
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	011b      	lsls	r3, r3, #4
 8001028:	3308      	adds	r3, #8
 800102a:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <DS18B20_ReadAll+0x78>)
 800102c:	441a      	add	r2, r3
 800102e:	79fc      	ldrb	r4, [r7, #7]
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fe6b 	bl	8000d10 <DS18B20_Read>
 800103a:	4603      	mov	r3, r0
 800103c:	4619      	mov	r1, r3
 800103e:	4a09      	ldr	r2, [pc, #36]	; (8001064 <DS18B20_ReadAll+0x78>)
 8001040:	0123      	lsls	r3, r4, #4
 8001042:	4413      	add	r3, r2
 8001044:	330c      	adds	r3, #12
 8001046:	460a      	mov	r2, r1
 8001048:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	3301      	adds	r3, #1
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <DS18B20_ReadAll+0x7c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	79fa      	ldrb	r2, [r7, #7]
 8001056:	429a      	cmp	r2, r3
 8001058:	d3d3      	bcc.n	8001002 <DS18B20_ReadAll+0x16>
			}
		}
	}
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	bd90      	pop	{r4, r7, pc}
 8001062:	bf00      	nop
 8001064:	20000120 	.word	0x20000120
 8001068:	20000174 	.word	0x20000174

0800106c <DS18B20_Init>:
	return 1;

}

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
	uint8_t next = 0, i = 0, j;
 8001076:	2300      	movs	r3, #0
 8001078:	73fb      	strb	r3, [r7, #15]
 800107a:	2300      	movs	r3, #0
 800107c:	73bb      	strb	r3, [r7, #14]
	OneWire_Init(&OneWire, GPIOA, GPIO_PIN_1); // Init OneWire bus
 800107e:	2202      	movs	r2, #2
 8001080:	491f      	ldr	r1, [pc, #124]	; (8001100 <DS18B20_Init+0x94>)
 8001082:	4820      	ldr	r0, [pc, #128]	; (8001104 <DS18B20_Init+0x98>)
 8001084:	f000 fc98 	bl	80019b8 <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 8001088:	481e      	ldr	r0, [pc, #120]	; (8001104 <DS18B20_Init+0x98>)
 800108a:	f000 fc3c 	bl	8001906 <OneWire_First>
 800108e:	4603      	mov	r3, r0
 8001090:	73fb      	strb	r3, [r7, #15]
	while(next)
 8001092:	e018      	b.n	80010c6 <DS18B20_Init+0x5a>
	{
		TempSensorCount++;
 8001094:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <DS18B20_Init+0x9c>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <DS18B20_Init+0x9c>)
 800109e:	701a      	strb	r2, [r3, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 80010a0:	7bbb      	ldrb	r3, [r7, #14]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	73ba      	strb	r2, [r7, #14]
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	4a18      	ldr	r2, [pc, #96]	; (800110c <DS18B20_Init+0xa0>)
 80010aa:	4413      	add	r3, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	4815      	ldr	r0, [pc, #84]	; (8001104 <DS18B20_Init+0x98>)
 80010b0:	f000 fc65 	bl	800197e <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 80010b4:	4813      	ldr	r0, [pc, #76]	; (8001104 <DS18B20_Init+0x98>)
 80010b6:	f000 fc36 	bl	8001926 <OneWire_Next>
 80010ba:	4603      	mov	r3, r0
 80010bc:	73fb      	strb	r3, [r7, #15]
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <DS18B20_Init+0x9c>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d803      	bhi.n	80010ce <DS18B20_Init+0x62>
	while(next)
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1e3      	bne.n	8001094 <DS18B20_Init+0x28>
 80010cc:	e000      	b.n	80010d0 <DS18B20_Init+0x64>
			break;
 80010ce:	bf00      	nop
	}

	for(j = 0; j < i; j++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	737b      	strb	r3, [r7, #13]
 80010d4:	e00a      	b.n	80010ec <DS18B20_Init+0x80>
	{
		DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 80010d6:	79fa      	ldrb	r2, [r7, #7]
 80010d8:	7b7b      	ldrb	r3, [r7, #13]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fec5 	bl	8000e6c <DS18B20_SetResolution>

		DS18B20_StartAll(); // Start conversion on all sensors
 80010e2:	f7ff fe03 	bl	8000cec <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 80010e6:	7b7b      	ldrb	r3, [r7, #13]
 80010e8:	3301      	adds	r3, #1
 80010ea:	737b      	strb	r3, [r7, #13]
 80010ec:	7b7a      	ldrb	r2, [r7, #13]
 80010ee:	7bbb      	ldrb	r3, [r7, #14]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d3f0      	bcc.n	80010d6 <DS18B20_Init+0x6a>
	}
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40010800 	.word	0x40010800
 8001104:	20000160 	.word	0x20000160
 8001108:	20000174 	.word	0x20000174
 800110c:	20000120 	.word	0x20000120

08001110 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task1 */
  task1Handle = osThreadNew(task1function, NULL, &task1_attributes);
 8001114:	4a0c      	ldr	r2, [pc, #48]	; (8001148 <MX_FREERTOS_Init+0x38>)
 8001116:	2100      	movs	r1, #0
 8001118:	480c      	ldr	r0, [pc, #48]	; (800114c <MX_FREERTOS_Init+0x3c>)
 800111a:	f003 fd49 	bl	8004bb0 <osThreadNew>
 800111e:	4603      	mov	r3, r0
 8001120:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <MX_FREERTOS_Init+0x40>)
 8001122:	6013      	str	r3, [r2, #0]

  /* creation of task2 */
  task2Handle = osThreadNew(task2function, NULL, &task2_attributes);
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <MX_FREERTOS_Init+0x44>)
 8001126:	2100      	movs	r1, #0
 8001128:	480b      	ldr	r0, [pc, #44]	; (8001158 <MX_FREERTOS_Init+0x48>)
 800112a:	f003 fd41 	bl	8004bb0 <osThreadNew>
 800112e:	4603      	mov	r3, r0
 8001130:	4a0a      	ldr	r2, [pc, #40]	; (800115c <MX_FREERTOS_Init+0x4c>)
 8001132:	6013      	str	r3, [r2, #0]

  /* creation of task3 */
  task3Handle = osThreadNew(StartTask03, NULL, &task3_attributes);
 8001134:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <MX_FREERTOS_Init+0x50>)
 8001136:	2100      	movs	r1, #0
 8001138:	480a      	ldr	r0, [pc, #40]	; (8001164 <MX_FREERTOS_Init+0x54>)
 800113a:	f003 fd39 	bl	8004bb0 <osThreadNew>
 800113e:	4603      	mov	r3, r0
 8001140:	4a09      	ldr	r2, [pc, #36]	; (8001168 <MX_FREERTOS_Init+0x58>)
 8001142:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	08007e50 	.word	0x08007e50
 800114c:	0800116d 	.word	0x0800116d
 8001150:	200001b8 	.word	0x200001b8
 8001154:	08007e74 	.word	0x08007e74
 8001158:	08001195 	.word	0x08001195
 800115c:	200001bc 	.word	0x200001bc
 8001160:	08007e98 	.word	0x08007e98
 8001164:	080011b1 	.word	0x080011b1
 8001168:	200001c0 	.word	0x200001c0

0800116c <task1function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task1function */
void task1function(void *argument)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task1function */
  /* Infinite loop */
 for(;;)
 {
	 HAL_UART_Transmit(&huart1, (uint8_t *)logString, sizeof(logString), 1000);
 8001174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001178:	220c      	movs	r2, #12
 800117a:	4904      	ldr	r1, [pc, #16]	; (800118c <task1function+0x20>)
 800117c:	4804      	ldr	r0, [pc, #16]	; (8001190 <task1function+0x24>)
 800117e:	f002 fe81 	bl	8003e84 <HAL_UART_Transmit>
	 osDelay(1000);
 8001182:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001186:	f003 fdbd 	bl	8004d04 <osDelay>
	 HAL_UART_Transmit(&huart1, (uint8_t *)logString, sizeof(logString), 1000);
 800118a:	e7f3      	b.n	8001174 <task1function+0x8>
 800118c:	20000000 	.word	0x20000000
 8001190:	20000330 	.word	0x20000330

08001194 <task2function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task2function */
void task2function(void *argument)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task2function */
  /* Infinite loop */
//  extern UART_HandleTypeDef huart1;
  for(;;)
  {
      DS18B20_ReadAll();
 800119c:	f7ff ff26 	bl	8000fec <DS18B20_ReadAll>
      DS18B20_StartAll();
 80011a0:	f7ff fda4 	bl	8000cec <DS18B20_StartAll>
      osDelay(1000);
 80011a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011a8:	f003 fdac 	bl	8004d04 <osDelay>
      DS18B20_ReadAll();
 80011ac:	e7f6      	b.n	800119c <task2function+0x8>
	...

080011b0 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
   for(;;)
  {
      temperature = ds18b20[0].Temperature;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <StartTask03+0x48>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f989 	bl	80004d4 <__aeabi_f2uiz>
 80011c2:	4603      	mov	r3, r0
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <StartTask03+0x4c>)
 80011c8:	701a      	strb	r2, [r3, #0]
      sprintf(string, "%d C\n",temperature);
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <StartTask03+0x4c>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	490b      	ldr	r1, [pc, #44]	; (8001200 <StartTask03+0x50>)
 80011d2:	480c      	ldr	r0, [pc, #48]	; (8001204 <StartTask03+0x54>)
 80011d4:	f006 f960 	bl	8007498 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)string, sizeof(string), 100);
 80011d8:	2364      	movs	r3, #100	; 0x64
 80011da:	2240      	movs	r2, #64	; 0x40
 80011dc:	4909      	ldr	r1, [pc, #36]	; (8001204 <StartTask03+0x54>)
 80011de:	480a      	ldr	r0, [pc, #40]	; (8001208 <StartTask03+0x58>)
 80011e0:	f002 fe50 	bl	8003e84 <HAL_UART_Transmit>
      tm1637_DisplayInteger(temperature);
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <StartTask03+0x4c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff faef 	bl	80007cc <tm1637_DisplayInteger>
      osDelay(1000);
 80011ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011f2:	f003 fd87 	bl	8004d04 <osDelay>
  {
 80011f6:	e7df      	b.n	80011b8 <StartTask03+0x8>
 80011f8:	20000120 	.word	0x20000120
 80011fc:	20000175 	.word	0x20000175
 8001200:	08007e30 	.word	0x08007e30
 8001204:	20000178 	.word	0x20000178
 8001208:	20000330 	.word	0x20000330

0800120c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001220:	4b26      	ldr	r3, [pc, #152]	; (80012bc <MX_GPIO_Init+0xb0>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4a25      	ldr	r2, [pc, #148]	; (80012bc <MX_GPIO_Init+0xb0>)
 8001226:	f043 0320 	orr.w	r3, r3, #32
 800122a:	6193      	str	r3, [r2, #24]
 800122c:	4b23      	ldr	r3, [pc, #140]	; (80012bc <MX_GPIO_Init+0xb0>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	f003 0320 	and.w	r3, r3, #32
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001238:	4b20      	ldr	r3, [pc, #128]	; (80012bc <MX_GPIO_Init+0xb0>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	4a1f      	ldr	r2, [pc, #124]	; (80012bc <MX_GPIO_Init+0xb0>)
 800123e:	f043 0304 	orr.w	r3, r3, #4
 8001242:	6193      	str	r3, [r2, #24]
 8001244:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <MX_GPIO_Init+0xb0>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <MX_GPIO_Init+0xb0>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	4a19      	ldr	r2, [pc, #100]	; (80012bc <MX_GPIO_Init+0xb0>)
 8001256:	f043 0308 	orr.w	r3, r3, #8
 800125a:	6193      	str	r3, [r2, #24]
 800125c:	4b17      	ldr	r3, [pc, #92]	; (80012bc <MX_GPIO_Init+0xb0>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f003 0308 	and.w	r3, r3, #8
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DS18B20_Pin_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	2132      	movs	r1, #50	; 0x32
 800126c:	4814      	ldr	r0, [pc, #80]	; (80012c0 <MX_GPIO_Init+0xb4>)
 800126e:	f001 fbd4 	bl	8002a1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	2104      	movs	r1, #4
 8001276:	4813      	ldr	r0, [pc, #76]	; (80012c4 <MX_GPIO_Init+0xb8>)
 8001278:	f001 fbcf 	bl	8002a1a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PA4 PA5 */
  GPIO_InitStruct.Pin = DS18B20_Pin_Pin|GPIO_PIN_4|GPIO_PIN_5;
 800127c:	2332      	movs	r3, #50	; 0x32
 800127e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001280:	2301      	movs	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2302      	movs	r3, #2
 800128a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4619      	mov	r1, r3
 8001292:	480b      	ldr	r0, [pc, #44]	; (80012c0 <MX_GPIO_Init+0xb4>)
 8001294:	f001 fa26 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001298:	2304      	movs	r3, #4
 800129a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2301      	movs	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2302      	movs	r3, #2
 80012a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	4619      	mov	r1, r3
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MX_GPIO_Init+0xb8>)
 80012b0:	f001 fa18 	bl	80026e4 <HAL_GPIO_Init>

}
 80012b4:	bf00      	nop
 80012b6:	3720      	adds	r7, #32
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40010800 	.word	0x40010800
 80012c4:	40010c00 	.word	0x40010c00

080012c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_I2C1_Init+0x50>)
 80012ce:	4a13      	ldr	r2, [pc, #76]	; (800131c <MX_I2C1_Init+0x54>)
 80012d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_I2C1_Init+0x50>)
 80012d4:	4a12      	ldr	r2, [pc, #72]	; (8001320 <MX_I2C1_Init+0x58>)
 80012d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_I2C1_Init+0x50>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_I2C1_Init+0x50>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_I2C1_Init+0x50>)
 80012e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <MX_I2C1_Init+0x50>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_I2C1_Init+0x50>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <MX_I2C1_Init+0x50>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_I2C1_Init+0x50>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_I2C1_Init+0x50>)
 8001306:	f001 fba1 	bl	8002a4c <HAL_I2C_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001310:	f000 f8f8 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200001c4 	.word	0x200001c4
 800131c:	40005400 	.word	0x40005400
 8001320:	000186a0 	.word	0x000186a0

08001324 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a15      	ldr	r2, [pc, #84]	; (8001394 <HAL_I2C_MspInit+0x70>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d123      	bne.n	800138c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <HAL_I2C_MspInit+0x74>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a13      	ldr	r2, [pc, #76]	; (8001398 <HAL_I2C_MspInit+0x74>)
 800134a:	f043 0308 	orr.w	r3, r3, #8
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_I2C_MspInit+0x74>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800135c:	23c0      	movs	r3, #192	; 0xc0
 800135e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001360:	2312      	movs	r3, #18
 8001362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001364:	2303      	movs	r3, #3
 8001366:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	4619      	mov	r1, r3
 800136e:	480b      	ldr	r0, [pc, #44]	; (800139c <HAL_I2C_MspInit+0x78>)
 8001370:	f001 f9b8 	bl	80026e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <HAL_I2C_MspInit+0x74>)
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	4a07      	ldr	r2, [pc, #28]	; (8001398 <HAL_I2C_MspInit+0x74>)
 800137a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800137e:	61d3      	str	r3, [r2, #28]
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_I2C_MspInit+0x74>)
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800138c:	bf00      	nop
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40005400 	.word	0x40005400
 8001398:	40021000 	.word	0x40021000
 800139c:	40010c00 	.word	0x40010c00

080013a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    //DP is connected to the second digit MSB
  tm1637_Segments[0] = A_SEG;
 80013a4:	4b25      	ldr	r3, [pc, #148]	; (800143c <main+0x9c>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
  tm1637_Segments[1] = B_SEG;
 80013aa:	4b24      	ldr	r3, [pc, #144]	; (800143c <main+0x9c>)
 80013ac:	2202      	movs	r2, #2
 80013ae:	705a      	strb	r2, [r3, #1]
  tm1637_Segments[2] = C_SEG;
 80013b0:	4b22      	ldr	r3, [pc, #136]	; (800143c <main+0x9c>)
 80013b2:	2204      	movs	r2, #4
 80013b4:	709a      	strb	r2, [r3, #2]
  tm1637_Segments[3] = D_SEG;
 80013b6:	4b21      	ldr	r3, [pc, #132]	; (800143c <main+0x9c>)
 80013b8:	2208      	movs	r2, #8
 80013ba:	70da      	strb	r2, [r3, #3]
  tm1637_Segments[4] = E_SEG;
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <main+0x9c>)
 80013be:	2210      	movs	r2, #16
 80013c0:	711a      	strb	r2, [r3, #4]
  tm1637_Segments[5] = F_SEG;
 80013c2:	4b1e      	ldr	r3, [pc, #120]	; (800143c <main+0x9c>)
 80013c4:	2220      	movs	r2, #32
 80013c6:	715a      	strb	r2, [r3, #5]
  tm1637_Segments[6] = G_SEG;
 80013c8:	4b1c      	ldr	r3, [pc, #112]	; (800143c <main+0x9c>)
 80013ca:	2240      	movs	r2, #64	; 0x40
 80013cc:	719a      	strb	r2, [r3, #6]
  tm1637_Segments[7] = DP_SEG;
 80013ce:	4b1b      	ldr	r3, [pc, #108]	; (800143c <main+0x9c>)
 80013d0:	2280      	movs	r2, #128	; 0x80
 80013d2:	71da      	strb	r2, [r3, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d4:	f000 fe3c 	bl	8002050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d8:	f000 f83c 	bl	8001454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013dc:	f7ff ff16 	bl	800120c <MX_GPIO_Init>
  MX_DMA_Init();
 80013e0:	f7ff fc5e 	bl	8000ca0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80013e4:	f000 fd38 	bl	8001e58 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80013e8:	f000 fc94 	bl	8001d14 <MX_TIM2_Init>
  MX_TIM1_Init();
 80013ec:	f000 fc42 	bl	8001c74 <MX_TIM1_Init>
  MX_I2C1_Init();
 80013f0:	f7ff ff6a 	bl	80012c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  DS18B20_Init(DS18B20_Resolution_12bits);
 80013f4:	200c      	movs	r0, #12
 80013f6:	f7ff fe39 	bl	800106c <DS18B20_Init>
  HAL_UART_Receive_IT(&huart1, receivedMessage, 20);
 80013fa:	2214      	movs	r2, #20
 80013fc:	4910      	ldr	r1, [pc, #64]	; (8001440 <main+0xa0>)
 80013fe:	4811      	ldr	r0, [pc, #68]	; (8001444 <main+0xa4>)
 8001400:	f002 fdc3 	bl	8003f8a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001404:	4810      	ldr	r0, [pc, #64]	; (8001448 <main+0xa8>)
 8001406:	f002 f93f 	bl	8003688 <HAL_TIM_Base_Start_IT>
  Ringbuf_init ();
 800140a:	f7ff fbab 	bl	8000b64 <Ringbuf_init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2104      	movs	r1, #4
 8001412:	480e      	ldr	r0, [pc, #56]	; (800144c <main+0xac>)
 8001414:	f001 fb01 	bl	8002a1a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001418:	2201      	movs	r2, #1
 800141a:	2110      	movs	r1, #16
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <main+0xb0>)
 800141e:	f001 fafc 	bl	8002a1a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001422:	2201      	movs	r2, #1
 8001424:	2120      	movs	r1, #32
 8001426:	480a      	ldr	r0, [pc, #40]	; (8001450 <main+0xb0>)
 8001428:	f001 faf7 	bl	8002a1a <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800142c:	f003 fb5a 	bl	8004ae4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001430:	f7ff fe6e 	bl	8001110 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001434:	f003 fb88 	bl	8004b48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001438:	e7fe      	b.n	8001438 <main+0x98>
 800143a:	bf00      	nop
 800143c:	2000024c 	.word	0x2000024c
 8001440:	20000218 	.word	0x20000218
 8001444:	20000330 	.word	0x20000330
 8001448:	200002e8 	.word	0x200002e8
 800144c:	40010c00 	.word	0x40010c00
 8001450:	40010800 	.word	0x40010800

08001454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b090      	sub	sp, #64	; 0x40
 8001458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145a:	f107 0318 	add.w	r3, r7, #24
 800145e:	2228      	movs	r2, #40	; 0x28
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f006 f838 	bl	80074d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001476:	2301      	movs	r3, #1
 8001478:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800147a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800147e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001484:	2301      	movs	r3, #1
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001488:	2302      	movs	r3, #2
 800148a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800148c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001490:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001492:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001496:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001498:	f107 0318 	add.w	r3, r7, #24
 800149c:	4618      	mov	r0, r3
 800149e:	f001 fc19 	bl	8002cd4 <HAL_RCC_OscConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80014a8:	f000 f82c 	bl	8001504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ac:	230f      	movs	r3, #15
 80014ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b0:	2302      	movs	r3, #2
 80014b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2102      	movs	r1, #2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f001 fe86 	bl	80031d8 <HAL_RCC_ClockConfig>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80014d2:	f000 f817 	bl	8001504 <Error_Handler>
  }
}
 80014d6:	bf00      	nop
 80014d8:	3740      	adds	r7, #64	; 0x40
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d101      	bne.n	80014f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014f2:	f000 fdc3 	bl	800207c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40000400 	.word	0x40000400

08001504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001508:	b672      	cpsid	i
}
 800150a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800150c:	e7fe      	b.n	800150c <Error_Handler+0x8>
	...

08001510 <OneWire_Delay>:

//
//	Delay function for constant 1-Wire timings
//
void OneWire_Delay(uint16_t us)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <OneWire_Delay+0x2c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2200      	movs	r2, #0
 8001520:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= us);
 8001522:	bf00      	nop
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <OneWire_Delay+0x2c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800152a:	88fb      	ldrh	r3, [r7, #6]
 800152c:	429a      	cmp	r2, r3
 800152e:	d9f9      	bls.n	8001524 <OneWire_Delay+0x14>
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	200002a0 	.word	0x200002a0

08001540 <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8001550:	2301      	movs	r3, #1
 8001552:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	889b      	ldrh	r3, [r3, #4]
 8001558:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f107 0208 	add.w	r2, r7, #8
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f001 f8bd 	bl	80026e4 <HAL_GPIO_Init>
}	
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 800157a:	2311      	movs	r3, #17
 800157c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 8001582:	2301      	movs	r3, #1
 8001584:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	889b      	ldrh	r3, [r3, #4]
 800158a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f107 0208 	add.w	r2, r7, #8
 8001594:	4611      	mov	r1, r2
 8001596:	4618      	mov	r0, r3
 8001598:	f001 f8a4 	bl	80026e4 <HAL_GPIO_Init>
}
 800159c:	bf00      	nop
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <OneWire_OutputLow>:

//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	889b      	ldrh	r3, [r3, #4]
 80015b0:	041a      	lsls	r2, r3, #16
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	611a      	str	r2, [r3, #16]
}	
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr

080015c2 <OneWire_OutputHigh>:

void OneWire_OutputHigh(OneWire_t *onewire)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	889a      	ldrh	r2, [r3, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	611a      	str	r2, [r3, #16]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr

080015de <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b084      	sub	sp, #16
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	OneWire_OutputLow(onewire);  // Write bus output low
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ffdc 	bl	80015a4 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ffc0 	bl	8001572 <OneWire_BusOutputDirection>
	OneWire_Delay(480); // Wait 480 us for reset
 80015f2:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80015f6:	f7ff ff8b 	bl	8001510 <OneWire_Delay>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ffa0 	bl	8001540 <OneWire_BusInputDirection>
	OneWire_Delay(70);
 8001600:	2046      	movs	r0, #70	; 0x46
 8001602:	f7ff ff85 	bl	8001510 <OneWire_Delay>
	
	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	889b      	ldrh	r3, [r3, #4]
 800160e:	4619      	mov	r1, r3
 8001610:	4610      	mov	r0, r2
 8001612:	f001 f9eb 	bl	80029ec <HAL_GPIO_ReadPin>
 8001616:	4603      	mov	r3, r0
 8001618:	73fb      	strb	r3, [r7, #15]
															 // if it's high - no device is presence on the bus
	OneWire_Delay(410);
 800161a:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 800161e:	f7ff ff77 	bl	8001510 <OneWire_Delay>

	return i;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	70fb      	strb	r3, [r7, #3]
	if (bit) // Send '1',
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00f      	beq.n	800165e <OneWire_WriteBit+0x32>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ffb0 	bl	80015a4 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff94 	bl	8001572 <OneWire_BusOutputDirection>
		OneWire_Delay(6);
 800164a:	2006      	movs	r0, #6
 800164c:	f7ff ff60 	bl	8001510 <OneWire_Delay>
		
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff75 	bl	8001540 <OneWire_BusInputDirection>
		OneWire_Delay(64);
 8001656:	2040      	movs	r0, #64	; 0x40
 8001658:	f7ff ff5a 	bl	8001510 <OneWire_Delay>
		OneWire_Delay(60);
		
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		OneWire_Delay(10);
	}
}
 800165c:	e00e      	b.n	800167c <OneWire_WriteBit+0x50>
		OneWire_OutputLow(onewire); // Set the bus low
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ffa0 	bl	80015a4 <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ff84 	bl	8001572 <OneWire_BusOutputDirection>
		OneWire_Delay(60);
 800166a:	203c      	movs	r0, #60	; 0x3c
 800166c:	f7ff ff50 	bl	8001510 <OneWire_Delay>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff65 	bl	8001540 <OneWire_BusInputDirection>
		OneWire_Delay(10);
 8001676:	200a      	movs	r0, #10
 8001678:	f7ff ff4a 	bl	8001510 <OneWire_Delay>
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0; // Default read bit state is low
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]
	
	OneWire_OutputLow(onewire); // Set low to initiate reading
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff87 	bl	80015a4 <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ff6b 	bl	8001572 <OneWire_BusOutputDirection>
	OneWire_Delay(2);
 800169c:	2002      	movs	r0, #2
 800169e:	f7ff ff37 	bl	8001510 <OneWire_Delay>
	
	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff ff4c 	bl	8001540 <OneWire_BusInputDirection>
	OneWire_Delay(10);
 80016a8:	200a      	movs	r0, #10
 80016aa:	f7ff ff31 	bl	8001510 <OneWire_Delay>
	
	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	889b      	ldrh	r3, [r3, #4]
 80016b6:	4619      	mov	r1, r3
 80016b8:	4610      	mov	r0, r2
 80016ba:	f001 f997 	bl	80029ec <HAL_GPIO_ReadPin>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <OneWire_ReadBit+0x44>
		bit = 1;
 80016c4:	2301      	movs	r3, #1
 80016c6:	73fb      	strb	r3, [r7, #15]
	
	OneWire_Delay(50); // Wait for end of read cycle
 80016c8:	2032      	movs	r0, #50	; 0x32
 80016ca:	f7ff ff21 	bl	8001510 <OneWire_Delay>

	return bit;
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 80016e4:	2308      	movs	r3, #8
 80016e6:	73fb      	strb	r3, [r7, #15]

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 80016e8:	78fb      	ldrb	r3, [r7, #3]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	4619      	mov	r1, r3
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff ff9a 	bl	800162c <OneWire_WriteBit>
		byte >>= 1;
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	085b      	lsrs	r3, r3, #1
 80016fc:	70fb      	strb	r3, [r7, #3]
	} while(--i);
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	3b01      	subs	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1ee      	bne.n	80016e8 <OneWire_WriteByte+0x10>
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 800171c:	2308      	movs	r3, #8
 800171e:	73fb      	strb	r3, [r7, #15]
 8001720:	2300      	movs	r3, #0
 8001722:	73bb      	strb	r3, [r7, #14]

	do{
		byte >>= 1;
 8001724:	7bbb      	ldrb	r3, [r7, #14]
 8001726:	085b      	lsrs	r3, r3, #1
 8001728:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ffaa 	bl	8001684 <OneWire_ReadBit>
 8001730:	4603      	mov	r3, r0
 8001732:	01db      	lsls	r3, r3, #7
 8001734:	b25a      	sxtb	r2, r3
 8001736:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800173a:	4313      	orrs	r3, r2
 800173c:	b25b      	sxtb	r3, r3
 800173e:	73bb      	strb	r3, [r7, #14]
	} while(--i);
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	3b01      	subs	r3, #1
 8001744:	73fb      	strb	r3, [r7, #15]
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1eb      	bne.n	8001724 <OneWire_ReadByte+0x10>
	
	return byte;
 800174c:	7bbb      	ldrb	r3, [r7, #14]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <OneWire_ResetSearch>:

//
// 1-Wire search operations
//
void OneWire_ResetSearch(OneWire_t* onewire)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
	// Clear the search results
	onewire->LastDiscrepancy = 0;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	719a      	strb	r2, [r3, #6]
	onewire->LastDeviceFlag = 0;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	721a      	strb	r2, [r3, #8]
	onewire->LastFamilyDiscrepancy = 0;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	71da      	strb	r2, [r3, #7]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr

0800177a <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b084      	sub	sp, #16
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	460b      	mov	r3, r1
 8001784:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number;
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	id_bit_number = 1;
 8001786:	2301      	movs	r3, #1
 8001788:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8001792:	2301      	movs	r3, #1
 8001794:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	733b      	strb	r3, [r7, #12]

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7a1b      	ldrb	r3, [r3, #8]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f040 809a 	bne.w	80018d8 <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ff1a 	bl	80015de <OneWire_Reset>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00a      	beq.n	80017c6 <OneWire_Search+0x4c>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	719a      	strb	r2, [r3, #6]
			onewire->LastDeviceFlag = 0;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	721a      	strb	r2, [r3, #8]
			onewire->LastFamilyDiscrepancy = 0;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	71da      	strb	r2, [r3, #7]
			return 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e09b      	b.n	80018fe <OneWire_Search+0x184>
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	4619      	mov	r1, r3
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ff84 	bl	80016d8 <OneWire_WriteByte>

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ff57 	bl	8001684 <OneWire_ReadBit>
 80017d6:	4603      	mov	r3, r0
 80017d8:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ff52 	bl	8001684 <OneWire_ReadBit>
 80017e0:	4603      	mov	r3, r0
 80017e2:	723b      	strb	r3, [r7, #8]

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 80017e4:	7a7b      	ldrb	r3, [r7, #9]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d102      	bne.n	80017f0 <OneWire_Search+0x76>
 80017ea:	7a3b      	ldrb	r3, [r7, #8]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d064      	beq.n	80018ba <OneWire_Search+0x140>
			{
				break;
			}
			else
			{
				if (id_bit != cmp_id_bit)
 80017f0:	7a7a      	ldrb	r2, [r7, #9]
 80017f2:	7a3b      	ldrb	r3, [r7, #8]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d002      	beq.n	80017fe <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // Bit write value for search
 80017f8:	7a7b      	ldrb	r3, [r7, #9]
 80017fa:	72bb      	strb	r3, [r7, #10]
 80017fc:	e026      	b.n	800184c <OneWire_Search+0xd2>
				}
				else // 00 - 2 devices
				{
					// Table 3. Search Path Direction
					if (id_bit_number < onewire->LastDiscrepancy)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	799b      	ldrb	r3, [r3, #6]
 8001802:	7bfa      	ldrb	r2, [r7, #15]
 8001804:	429a      	cmp	r2, r3
 8001806:	d20d      	bcs.n	8001824 <OneWire_Search+0xaa>
					{
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8001808:	7b7b      	ldrb	r3, [r7, #13]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	7a5a      	ldrb	r2, [r3, #9]
 8001810:	7afb      	ldrb	r3, [r7, #11]
 8001812:	4013      	ands	r3, r2
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	bf14      	ite	ne
 800181a:	2301      	movne	r3, #1
 800181c:	2300      	moveq	r3, #0
 800181e:	b2db      	uxtb	r3, r3
 8001820:	72bb      	strb	r3, [r7, #10]
 8001822:	e008      	b.n	8001836 <OneWire_Search+0xbc>
					}
					else
					{
						// If bit is equal to last - pick 1
						// If not - then pick 0
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	799b      	ldrb	r3, [r3, #6]
 8001828:	7bfa      	ldrb	r2, [r7, #15]
 800182a:	429a      	cmp	r2, r3
 800182c:	bf0c      	ite	eq
 800182e:	2301      	moveq	r3, #1
 8001830:	2300      	movne	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	72bb      	strb	r3, [r7, #10]
					}

					if (search_direction == 0) // If 0 was picked, write it to LastZero
 8001836:	7abb      	ldrb	r3, [r7, #10]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d107      	bne.n	800184c <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	73bb      	strb	r3, [r7, #14]

						if (last_zero < 9) // Check for last discrepancy in family
 8001840:	7bbb      	ldrb	r3, [r7, #14]
 8001842:	2b08      	cmp	r3, #8
 8001844:	d802      	bhi.n	800184c <OneWire_Search+0xd2>
						{
							onewire->LastFamilyDiscrepancy = last_zero;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	7bba      	ldrb	r2, [r7, #14]
 800184a:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				if (search_direction == 1)
 800184c:	7abb      	ldrb	r3, [r7, #10]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d10c      	bne.n	800186c <OneWire_Search+0xf2>
				{
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 8001852:	7b7b      	ldrb	r3, [r7, #13]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	7a59      	ldrb	r1, [r3, #9]
 800185a:	7b7b      	ldrb	r3, [r7, #13]
 800185c:	7afa      	ldrb	r2, [r7, #11]
 800185e:	430a      	orrs	r2, r1
 8001860:	b2d1      	uxtb	r1, r2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	460a      	mov	r2, r1
 8001868:	725a      	strb	r2, [r3, #9]
 800186a:	e010      	b.n	800188e <OneWire_Search+0x114>
				}
				else
				{
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 800186c:	7b7b      	ldrb	r3, [r7, #13]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	7a5b      	ldrb	r3, [r3, #9]
 8001874:	b25a      	sxtb	r2, r3
 8001876:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800187a:	43db      	mvns	r3, r3
 800187c:	b25b      	sxtb	r3, r3
 800187e:	4013      	ands	r3, r2
 8001880:	b25a      	sxtb	r2, r3
 8001882:	7b7b      	ldrb	r3, [r7, #13]
 8001884:	b2d1      	uxtb	r1, r2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	460a      	mov	r2, r1
 800188c:	725a      	strb	r2, [r3, #9]
				}
				
				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 800188e:	7abb      	ldrb	r3, [r7, #10]
 8001890:	4619      	mov	r1, r3
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff feca 	bl	800162c <OneWire_WriteBit>

				id_bit_number++; // Next bit search - increase the id
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	3301      	adds	r3, #1
 800189c:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 800189e:	7afb      	ldrb	r3, [r7, #11]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	72fb      	strb	r3, [r7, #11]

				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 80018a4:	7afb      	ldrb	r3, [r7, #11]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d104      	bne.n	80018b4 <OneWire_Search+0x13a>
				{
					rom_byte_number++; // Next byte number
 80018aa:	7b7b      	ldrb	r3, [r7, #13]
 80018ac:	3301      	adds	r3, #1
 80018ae:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1; // Reset the mask - first bit
 80018b0:	2301      	movs	r3, #1
 80018b2:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes
 80018b4:	7b7b      	ldrb	r3, [r7, #13]
 80018b6:	2b07      	cmp	r3, #7
 80018b8:	d98a      	bls.n	80017d0 <OneWire_Search+0x56>

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	2b40      	cmp	r3, #64	; 0x40
 80018be:	d90b      	bls.n	80018d8 <OneWire_Search+0x15e>
		{
			onewire->LastDiscrepancy = last_zero;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	7bba      	ldrb	r2, [r7, #14]
 80018c4:	719a      	strb	r2, [r3, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	799b      	ldrb	r3, [r3, #6]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d102      	bne.n	80018d4 <OneWire_Search+0x15a>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1; // Searching successful
 80018d4:	2301      	movs	r3, #1
 80018d6:	733b      	strb	r3, [r7, #12]
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 80018d8:	7b3b      	ldrb	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <OneWire_Search+0x16c>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7a5b      	ldrb	r3, [r3, #9]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10a      	bne.n	80018fc <OneWire_Search+0x182>
	{
		onewire->LastDiscrepancy = 0;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	719a      	strb	r2, [r3, #6]
		onewire->LastDeviceFlag = 0;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	721a      	strb	r2, [r3, #8]
		onewire->LastFamilyDiscrepancy = 0;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 80018fc:	7b3b      	ldrb	r3, [r7, #12]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <OneWire_First>:

//
//	Return first device on 1-Wire bus
//
uint8_t OneWire_First(OneWire_t* onewire)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
	OneWire_ResetSearch(onewire);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ff21 	bl	8001756 <OneWire_ResetSearch>

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8001914:	21f0      	movs	r1, #240	; 0xf0
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ff2f 	bl	800177a <OneWire_Search>
 800191c:	4603      	mov	r3, r0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <OneWire_Next>:

//
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 800192e:	21f0      	movs	r1, #240	; 0xf0
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff22 	bl	800177a <OneWire_Search>
 8001936:	4603      	mov	r3, r0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 800194a:	2155      	movs	r1, #85	; 0x55
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff fec3 	bl	80016d8 <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++)
 8001952:	2300      	movs	r3, #0
 8001954:	73fb      	strb	r3, [r7, #15]
 8001956:	e00a      	b.n	800196e <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	4413      	add	r3, r2
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	4619      	mov	r1, r3
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff feb8 	bl	80016d8 <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	3301      	adds	r3, #1
 800196c:	73fb      	strb	r3, [r7, #15]
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	2b07      	cmp	r3, #7
 8001972:	d9f1      	bls.n	8001958 <OneWire_SelectWithPointer+0x18>
	}	
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 800197e:	b480      	push	{r7}
 8001980:	b085      	sub	sp, #20
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8001988:	2300      	movs	r3, #0
 800198a:	73fb      	strb	r3, [r7, #15]
 800198c:	e00a      	b.n	80019a4 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = onewire->ROM_NO[i];
 800198e:	7bfa      	ldrb	r2, [r7, #15]
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	6839      	ldr	r1, [r7, #0]
 8001994:	440b      	add	r3, r1
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	440a      	add	r2, r1
 800199a:	7a52      	ldrb	r2, [r2, #9]
 800199c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	3301      	adds	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	2b07      	cmp	r3, #7
 80019a8:	d9f1      	bls.n	800198e <OneWire_GetFullROM+0x10>
	}
}
 80019aa:	bf00      	nop
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
	...

080019b8 <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	4613      	mov	r3, r2
 80019c4:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER); // Start the delay timer
 80019c6:	4811      	ldr	r0, [pc, #68]	; (8001a0c <OneWire_Init+0x54>)
 80019c8:	f001 fe14 	bl	80035f4 <HAL_TIM_Base_Start>

	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	601a      	str	r2, [r3, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	88fa      	ldrh	r2, [r7, #6]
 80019d6:	809a      	strh	r2, [r3, #4]

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f7ff fdca 	bl	8001572 <OneWire_BusOutputDirection>
	OneWire_OutputHigh(onewire);
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f7ff fdef 	bl	80015c2 <OneWire_OutputHigh>
	HAL_Delay(100);
 80019e4:	2064      	movs	r0, #100	; 0x64
 80019e6:	f000 fb65 	bl	80020b4 <HAL_Delay>
	OneWire_OutputLow(onewire);
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f7ff fdda 	bl	80015a4 <OneWire_OutputLow>
	HAL_Delay(100);
 80019f0:	2064      	movs	r0, #100	; 0x64
 80019f2:	f000 fb5f 	bl	80020b4 <HAL_Delay>
	OneWire_OutputHigh(onewire);
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f7ff fde3 	bl	80015c2 <OneWire_OutputHigh>
	HAL_Delay(200);
 80019fc:	20c8      	movs	r0, #200	; 0xc8
 80019fe:	f000 fb59 	bl	80020b4 <HAL_Delay>
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200002a0 	.word	0x200002a0

08001a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a16:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_MspInit+0x68>)
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	4a17      	ldr	r2, [pc, #92]	; (8001a78 <HAL_MspInit+0x68>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6193      	str	r3, [r2, #24]
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_MspInit+0x68>)
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_MspInit+0x68>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	4a11      	ldr	r2, [pc, #68]	; (8001a78 <HAL_MspInit+0x68>)
 8001a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a38:	61d3      	str	r3, [r2, #28]
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <HAL_MspInit+0x68>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	210f      	movs	r1, #15
 8001a4a:	f06f 0001 	mvn.w	r0, #1
 8001a4e:	f000 fc0a 	bl	8002266 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_MspInit+0x6c>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <HAL_MspInit+0x6c>)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40010000 	.word	0x40010000

08001a80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08e      	sub	sp, #56	; 0x38
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001a96:	4b34      	ldr	r3, [pc, #208]	; (8001b68 <HAL_InitTick+0xe8>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	4a33      	ldr	r2, [pc, #204]	; (8001b68 <HAL_InitTick+0xe8>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	61d3      	str	r3, [r2, #28]
 8001aa2:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <HAL_InitTick+0xe8>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001aae:	f107 0210 	add.w	r2, r7, #16
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f001 fcfd 	bl	80034b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d103      	bne.n	8001ad0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ac8:	f001 fcce 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 8001acc:	6378      	str	r0, [r7, #52]	; 0x34
 8001ace:	e004      	b.n	8001ada <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ad0:	f001 fcca 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001adc:	4a23      	ldr	r2, [pc, #140]	; (8001b6c <HAL_InitTick+0xec>)
 8001ade:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae2:	0c9b      	lsrs	r3, r3, #18
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001ae8:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <HAL_InitTick+0xf0>)
 8001aea:	4a22      	ldr	r2, [pc, #136]	; (8001b74 <HAL_InitTick+0xf4>)
 8001aec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001aee:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <HAL_InitTick+0xf0>)
 8001af0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001af4:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001af6:	4a1e      	ldr	r2, [pc, #120]	; (8001b70 <HAL_InitTick+0xf0>)
 8001af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afa:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <HAL_InitTick+0xf0>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b02:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <HAL_InitTick+0xf0>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_InitTick+0xf0>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001b0e:	4818      	ldr	r0, [pc, #96]	; (8001b70 <HAL_InitTick+0xf0>)
 8001b10:	f001 fd20 	bl	8003554 <HAL_TIM_Base_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001b1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d11b      	bne.n	8001b5a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001b22:	4813      	ldr	r0, [pc, #76]	; (8001b70 <HAL_InitTick+0xf0>)
 8001b24:	f001 fdb0 	bl	8003688 <HAL_TIM_Base_Start_IT>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001b2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d111      	bne.n	8001b5a <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b36:	201d      	movs	r0, #29
 8001b38:	f000 fbb1 	bl	800229e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b0f      	cmp	r3, #15
 8001b40:	d808      	bhi.n	8001b54 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001b42:	2200      	movs	r2, #0
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	201d      	movs	r0, #29
 8001b48:	f000 fb8d 	bl	8002266 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <HAL_InitTick+0xf8>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e002      	b.n	8001b5a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001b5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3738      	adds	r7, #56	; 0x38
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	431bde83 	.word	0x431bde83
 8001b70:	20000254 	.word	0x20000254
 8001b74:	40000400 	.word	0x40000400
 8001b78:	20000010 	.word	0x20000010

08001b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <NMI_Handler+0x4>

08001b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <HardFault_Handler+0x4>

08001b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <MemManage_Handler+0x4>

08001b8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b92:	e7fe      	b.n	8001b92 <BusFault_Handler+0x4>

08001b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <UsageFault_Handler+0x4>

08001b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
	...

08001ba8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <DMA1_Channel4_IRQHandler+0x10>)
 8001bae:	f000 fc93 	bl	80024d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000378 	.word	0x20000378

08001bbc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <DMA1_Channel5_IRQHandler+0x10>)
 8001bc2:	f000 fc89 	bl	80024d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200003bc 	.word	0x200003bc

08001bd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <TIM3_IRQHandler+0x10>)
 8001bd6:	f001 fda9 	bl	800372c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000254 	.word	0x20000254

08001be4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
           Uart_isr(&huart1);
 8001be8:	4803      	ldr	r0, [pc, #12]	; (8001bf8 <USART1_IRQHandler+0x14>)
 8001bea:	f7fe ffff 	bl	8000bec <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bee:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <USART1_IRQHandler+0x14>)
 8001bf0:	f002 f9f0 	bl	8003fd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000330 	.word	0x20000330

08001bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c04:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <_sbrk+0x5c>)
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <_sbrk+0x60>)
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <_sbrk+0x64>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d102      	bne.n	8001c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <_sbrk+0x64>)
 8001c1a:	4a12      	ldr	r2, [pc, #72]	; (8001c64 <_sbrk+0x68>)
 8001c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d207      	bcs.n	8001c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c2c:	f005 fc5c 	bl	80074e8 <__errno>
 8001c30:	4603      	mov	r3, r0
 8001c32:	220c      	movs	r2, #12
 8001c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3a:	e009      	b.n	8001c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <_sbrk+0x64>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <_sbrk+0x64>)
 8001c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20005000 	.word	0x20005000
 8001c5c:	00000400 	.word	0x00000400
 8001c60:	2000029c 	.word	0x2000029c
 8001c64:	20001e98 	.word	0x20001e98

08001c68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7a:	f107 0308 	add.w	r3, r7, #8
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c88:	463b      	mov	r3, r7
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c90:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <MX_TIM1_Init+0x98>)
 8001c92:	4a1f      	ldr	r2, [pc, #124]	; (8001d10 <MX_TIM1_Init+0x9c>)
 8001c94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8001c96:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <MX_TIM1_Init+0x98>)
 8001c98:	223f      	movs	r2, #63	; 0x3f
 8001c9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <MX_TIM1_Init+0x98>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <MX_TIM1_Init+0x98>)
 8001ca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ca8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001caa:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <MX_TIM1_Init+0x98>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cb0:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <MX_TIM1_Init+0x98>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <MX_TIM1_Init+0x98>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cbc:	4813      	ldr	r0, [pc, #76]	; (8001d0c <MX_TIM1_Init+0x98>)
 8001cbe:	f001 fc49 	bl	8003554 <HAL_TIM_Base_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001cc8:	f7ff fc1c 	bl	8001504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cd2:	f107 0308 	add.w	r3, r7, #8
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	480c      	ldr	r0, [pc, #48]	; (8001d0c <MX_TIM1_Init+0x98>)
 8001cda:	f001 fe2f 	bl	800393c <HAL_TIM_ConfigClockSource>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001ce4:	f7ff fc0e 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cf0:	463b      	mov	r3, r7
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4805      	ldr	r0, [pc, #20]	; (8001d0c <MX_TIM1_Init+0x98>)
 8001cf6:	f002 f805 	bl	8003d04 <HAL_TIMEx_MasterConfigSynchronization>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001d00:	f7ff fc00 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d04:	bf00      	nop
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	200002a0 	.word	0x200002a0
 8001d10:	40012c00 	.word	0x40012c00

08001d14 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1a:	f107 0308 	add.w	r3, r7, #8
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d28:	463b      	mov	r3, r7
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d30:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <MX_TIM2_Init+0xa0>)
 8001d32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d38:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <MX_TIM2_Init+0xa0>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3e:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <MX_TIM2_Init+0xa0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001d44:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <MX_TIM2_Init+0xa0>)
 8001d46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4c:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <MX_TIM2_Init+0xa0>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d52:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <MX_TIM2_Init+0xa0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d58:	4816      	ldr	r0, [pc, #88]	; (8001db4 <MX_TIM2_Init+0xa0>)
 8001d5a:	f001 fbfb 	bl	8003554 <HAL_TIM_Base_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d64:	f7ff fbce 	bl	8001504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001d68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d6c:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d7a:	f107 0308 	add.w	r3, r7, #8
 8001d7e:	4619      	mov	r1, r3
 8001d80:	480c      	ldr	r0, [pc, #48]	; (8001db4 <MX_TIM2_Init+0xa0>)
 8001d82:	f001 fddb 	bl	800393c <HAL_TIM_ConfigClockSource>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001d8c:	f7ff fbba 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d90:	2300      	movs	r3, #0
 8001d92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d98:	463b      	mov	r3, r7
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4805      	ldr	r0, [pc, #20]	; (8001db4 <MX_TIM2_Init+0xa0>)
 8001d9e:	f001 ffb1 	bl	8003d04 <HAL_TIMEx_MasterConfigSynchronization>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001da8:	f7ff fbac 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dac:	bf00      	nop
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200002e8 	.word	0x200002e8

08001db8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	; 0x28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 0318 	add.w	r3, r7, #24
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1e      	ldr	r2, [pc, #120]	; (8001e4c <HAL_TIM_Base_MspInit+0x94>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d10c      	bne.n	8001df2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <HAL_TIM_Base_MspInit+0x98>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <HAL_TIM_Base_MspInit+0x98>)
 8001dde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001de2:	6193      	str	r3, [r2, #24]
 8001de4:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <HAL_TIM_Base_MspInit+0x98>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001df0:	e028      	b.n	8001e44 <HAL_TIM_Base_MspInit+0x8c>
  else if(tim_baseHandle->Instance==TIM2)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dfa:	d123      	bne.n	8001e44 <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dfc:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <HAL_TIM_Base_MspInit+0x98>)
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	4a13      	ldr	r2, [pc, #76]	; (8001e50 <HAL_TIM_Base_MspInit+0x98>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	61d3      	str	r3, [r2, #28]
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HAL_TIM_Base_MspInit+0x98>)
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e14:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <HAL_TIM_Base_MspInit+0x98>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	4a0d      	ldr	r2, [pc, #52]	; (8001e50 <HAL_TIM_Base_MspInit+0x98>)
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	6193      	str	r3, [r2, #24]
 8001e20:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <HAL_TIM_Base_MspInit+0x98>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e38:	f107 0318 	add.w	r3, r7, #24
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4805      	ldr	r0, [pc, #20]	; (8001e54 <HAL_TIM_Base_MspInit+0x9c>)
 8001e40:	f000 fc50 	bl	80026e4 <HAL_GPIO_Init>
}
 8001e44:	bf00      	nop
 8001e46:	3728      	adds	r7, #40	; 0x28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40012c00 	.word	0x40012c00
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40010800 	.word	0x40010800

08001e58 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e5e:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <MX_USART1_UART_Init+0x50>)
 8001e60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e76:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e7e:	220c      	movs	r2, #12
 8001e80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e8e:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e90:	f001 ffa8 	bl	8003de4 <HAL_UART_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e9a:	f7ff fb33 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000330 	.word	0x20000330
 8001ea8:	40013800 	.word	0x40013800

08001eac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a48      	ldr	r2, [pc, #288]	; (8001fe8 <HAL_UART_MspInit+0x13c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	f040 8088 	bne.w	8001fde <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ece:	4b47      	ldr	r3, [pc, #284]	; (8001fec <HAL_UART_MspInit+0x140>)
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	4a46      	ldr	r2, [pc, #280]	; (8001fec <HAL_UART_MspInit+0x140>)
 8001ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed8:	6193      	str	r3, [r2, #24]
 8001eda:	4b44      	ldr	r3, [pc, #272]	; (8001fec <HAL_UART_MspInit+0x140>)
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee6:	4b41      	ldr	r3, [pc, #260]	; (8001fec <HAL_UART_MspInit+0x140>)
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	4a40      	ldr	r2, [pc, #256]	; (8001fec <HAL_UART_MspInit+0x140>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	6193      	str	r3, [r2, #24]
 8001ef2:	4b3e      	ldr	r3, [pc, #248]	; (8001fec <HAL_UART_MspInit+0x140>)
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0c:	f107 0310 	add.w	r3, r7, #16
 8001f10:	4619      	mov	r1, r3
 8001f12:	4837      	ldr	r0, [pc, #220]	; (8001ff0 <HAL_UART_MspInit+0x144>)
 8001f14:	f000 fbe6 	bl	80026e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f26:	f107 0310 	add.w	r3, r7, #16
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4830      	ldr	r0, [pc, #192]	; (8001ff0 <HAL_UART_MspInit+0x144>)
 8001f2e:	f000 fbd9 	bl	80026e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001f32:	4b30      	ldr	r3, [pc, #192]	; (8001ff4 <HAL_UART_MspInit+0x148>)
 8001f34:	4a30      	ldr	r2, [pc, #192]	; (8001ff8 <HAL_UART_MspInit+0x14c>)
 8001f36:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f38:	4b2e      	ldr	r3, [pc, #184]	; (8001ff4 <HAL_UART_MspInit+0x148>)
 8001f3a:	2210      	movs	r2, #16
 8001f3c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <HAL_UART_MspInit+0x148>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f44:	4b2b      	ldr	r3, [pc, #172]	; (8001ff4 <HAL_UART_MspInit+0x148>)
 8001f46:	2280      	movs	r2, #128	; 0x80
 8001f48:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f4a:	4b2a      	ldr	r3, [pc, #168]	; (8001ff4 <HAL_UART_MspInit+0x148>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f50:	4b28      	ldr	r3, [pc, #160]	; (8001ff4 <HAL_UART_MspInit+0x148>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001f56:	4b27      	ldr	r3, [pc, #156]	; (8001ff4 <HAL_UART_MspInit+0x148>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001f5c:	4b25      	ldr	r3, [pc, #148]	; (8001ff4 <HAL_UART_MspInit+0x148>)
 8001f5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f62:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001f64:	4823      	ldr	r0, [pc, #140]	; (8001ff4 <HAL_UART_MspInit+0x148>)
 8001f66:	f000 f9a9 	bl	80022bc <HAL_DMA_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8001f70:	f7ff fac8 	bl	8001504 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a1f      	ldr	r2, [pc, #124]	; (8001ff4 <HAL_UART_MspInit+0x148>)
 8001f78:	639a      	str	r2, [r3, #56]	; 0x38
 8001f7a:	4a1e      	ldr	r2, [pc, #120]	; (8001ff4 <HAL_UART_MspInit+0x148>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001f80:	4b1e      	ldr	r3, [pc, #120]	; (8001ffc <HAL_UART_MspInit+0x150>)
 8001f82:	4a1f      	ldr	r2, [pc, #124]	; (8002000 <HAL_UART_MspInit+0x154>)
 8001f84:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f86:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_UART_MspInit+0x150>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <HAL_UART_MspInit+0x150>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f92:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <HAL_UART_MspInit+0x150>)
 8001f94:	2280      	movs	r2, #128	; 0x80
 8001f96:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f98:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <HAL_UART_MspInit+0x150>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f9e:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <HAL_UART_MspInit+0x150>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001fa4:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <HAL_UART_MspInit+0x150>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001faa:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <HAL_UART_MspInit+0x150>)
 8001fac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fb0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001fb2:	4812      	ldr	r0, [pc, #72]	; (8001ffc <HAL_UART_MspInit+0x150>)
 8001fb4:	f000 f982 	bl	80022bc <HAL_DMA_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8001fbe:	f7ff faa1 	bl	8001504 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <HAL_UART_MspInit+0x150>)
 8001fc6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fc8:	4a0c      	ldr	r2, [pc, #48]	; (8001ffc <HAL_UART_MspInit+0x150>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2105      	movs	r1, #5
 8001fd2:	2025      	movs	r0, #37	; 0x25
 8001fd4:	f000 f947 	bl	8002266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fd8:	2025      	movs	r0, #37	; 0x25
 8001fda:	f000 f960 	bl	800229e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001fde:	bf00      	nop
 8001fe0:	3720      	adds	r7, #32
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40013800 	.word	0x40013800
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40010800 	.word	0x40010800
 8001ff4:	20000378 	.word	0x20000378
 8001ff8:	40020044 	.word	0x40020044
 8001ffc:	200003bc 	.word	0x200003bc
 8002000:	40020058 	.word	0x40020058

08002004 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002004:	f7ff fe30 	bl	8001c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002008:	480b      	ldr	r0, [pc, #44]	; (8002038 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800200a:	490c      	ldr	r1, [pc, #48]	; (800203c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800200c:	4a0c      	ldr	r2, [pc, #48]	; (8002040 <LoopFillZerobss+0x16>)
  movs r3, #0
 800200e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002010:	e002      	b.n	8002018 <LoopCopyDataInit>

08002012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002016:	3304      	adds	r3, #4

08002018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800201a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800201c:	d3f9      	bcc.n	8002012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800201e:	4a09      	ldr	r2, [pc, #36]	; (8002044 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002020:	4c09      	ldr	r4, [pc, #36]	; (8002048 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002024:	e001      	b.n	800202a <LoopFillZerobss>

08002026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002028:	3204      	adds	r2, #4

0800202a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800202a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800202c:	d3fb      	bcc.n	8002026 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800202e:	f005 fa61 	bl	80074f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002032:	f7ff f9b5 	bl	80013a0 <main>
  bx lr
 8002036:	4770      	bx	lr
  ldr r0, =_sdata
 8002038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800203c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002040:	08007f24 	.word	0x08007f24
  ldr r2, =_sbss
 8002044:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002048:	20001e94 	.word	0x20001e94

0800204c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800204c:	e7fe      	b.n	800204c <ADC1_2_IRQHandler>
	...

08002050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_Init+0x28>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a07      	ldr	r2, [pc, #28]	; (8002078 <HAL_Init+0x28>)
 800205a:	f043 0310 	orr.w	r3, r3, #16
 800205e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002060:	2003      	movs	r0, #3
 8002062:	f000 f8f5 	bl	8002250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002066:	200f      	movs	r0, #15
 8002068:	f7ff fd0a 	bl	8001a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800206c:	f7ff fcd0 	bl	8001a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40022000 	.word	0x40022000

0800207c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_IncTick+0x1c>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_IncTick+0x20>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4413      	add	r3, r2
 800208c:	4a03      	ldr	r2, [pc, #12]	; (800209c <HAL_IncTick+0x20>)
 800208e:	6013      	str	r3, [r2, #0]
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	20000014 	.word	0x20000014
 800209c:	20000400 	.word	0x20000400

080020a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return uwTick;
 80020a4:	4b02      	ldr	r3, [pc, #8]	; (80020b0 <HAL_GetTick+0x10>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	20000400 	.word	0x20000400

080020b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020bc:	f7ff fff0 	bl	80020a0 <HAL_GetTick>
 80020c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d005      	beq.n	80020da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_Delay+0x44>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4413      	add	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020da:	bf00      	nop
 80020dc:	f7ff ffe0 	bl	80020a0 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d8f7      	bhi.n	80020dc <HAL_Delay+0x28>
  {
  }
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000014 	.word	0x20000014

080020fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <__NVIC_SetPriorityGrouping+0x44>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002118:	4013      	ands	r3, r2
 800211a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800212c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212e:	4a04      	ldr	r2, [pc, #16]	; (8002140 <__NVIC_SetPriorityGrouping+0x44>)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	60d3      	str	r3, [r2, #12]
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002148:	4b04      	ldr	r3, [pc, #16]	; (800215c <__NVIC_GetPriorityGrouping+0x18>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	0a1b      	lsrs	r3, r3, #8
 800214e:	f003 0307 	and.w	r3, r3, #7
}
 8002152:	4618      	mov	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	2b00      	cmp	r3, #0
 8002170:	db0b      	blt.n	800218a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	f003 021f 	and.w	r2, r3, #31
 8002178:	4906      	ldr	r1, [pc, #24]	; (8002194 <__NVIC_EnableIRQ+0x34>)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	2001      	movs	r0, #1
 8002182:	fa00 f202 	lsl.w	r2, r0, r2
 8002186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr
 8002194:	e000e100 	.word	0xe000e100

08002198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	6039      	str	r1, [r7, #0]
 80021a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	db0a      	blt.n	80021c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	490c      	ldr	r1, [pc, #48]	; (80021e4 <__NVIC_SetPriority+0x4c>)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	0112      	lsls	r2, r2, #4
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	440b      	add	r3, r1
 80021bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c0:	e00a      	b.n	80021d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4908      	ldr	r1, [pc, #32]	; (80021e8 <__NVIC_SetPriority+0x50>)
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	3b04      	subs	r3, #4
 80021d0:	0112      	lsls	r2, r2, #4
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	440b      	add	r3, r1
 80021d6:	761a      	strb	r2, [r3, #24]
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000e100 	.word	0xe000e100
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b089      	sub	sp, #36	; 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f1c3 0307 	rsb	r3, r3, #7
 8002206:	2b04      	cmp	r3, #4
 8002208:	bf28      	it	cs
 800220a:	2304      	movcs	r3, #4
 800220c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3304      	adds	r3, #4
 8002212:	2b06      	cmp	r3, #6
 8002214:	d902      	bls.n	800221c <NVIC_EncodePriority+0x30>
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3b03      	subs	r3, #3
 800221a:	e000      	b.n	800221e <NVIC_EncodePriority+0x32>
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	f04f 32ff 	mov.w	r2, #4294967295
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43da      	mvns	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	401a      	ands	r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002234:	f04f 31ff 	mov.w	r1, #4294967295
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	fa01 f303 	lsl.w	r3, r1, r3
 800223e:	43d9      	mvns	r1, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002244:	4313      	orrs	r3, r2
         );
}
 8002246:	4618      	mov	r0, r3
 8002248:	3724      	adds	r7, #36	; 0x24
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff ff4f 	bl	80020fc <__NVIC_SetPriorityGrouping>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
 8002272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002278:	f7ff ff64 	bl	8002144 <__NVIC_GetPriorityGrouping>
 800227c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68b9      	ldr	r1, [r7, #8]
 8002282:	6978      	ldr	r0, [r7, #20]
 8002284:	f7ff ffb2 	bl	80021ec <NVIC_EncodePriority>
 8002288:	4602      	mov	r2, r0
 800228a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff81 	bl	8002198 <__NVIC_SetPriority>
}
 8002296:	bf00      	nop
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	4603      	mov	r3, r0
 80022a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff ff57 	bl	8002160 <__NVIC_EnableIRQ>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e043      	b.n	800235a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	4b22      	ldr	r3, [pc, #136]	; (8002364 <HAL_DMA_Init+0xa8>)
 80022da:	4413      	add	r3, r2
 80022dc:	4a22      	ldr	r2, [pc, #136]	; (8002368 <HAL_DMA_Init+0xac>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	091b      	lsrs	r3, r3, #4
 80022e4:	009a      	lsls	r2, r3, #2
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a1f      	ldr	r2, [pc, #124]	; (800236c <HAL_DMA_Init+0xb0>)
 80022ee:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002306:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800230a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002314:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002320:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr
 8002364:	bffdfff8 	.word	0xbffdfff8
 8002368:	cccccccd 	.word	0xcccccccd
 800236c:	40020000 	.word	0x40020000

08002370 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d008      	beq.n	800239a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2204      	movs	r2, #4
 800238c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e020      	b.n	80023dc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 020e 	bic.w	r2, r2, #14
 80023a8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0201 	bic.w	r2, r2, #1
 80023b8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c2:	2101      	movs	r1, #1
 80023c4:	fa01 f202 	lsl.w	r2, r1, r2
 80023c8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80023da:	7bfb      	ldrb	r3, [r7, #15]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr
	...

080023e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d005      	beq.n	800240c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2204      	movs	r2, #4
 8002404:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
 800240a:	e051      	b.n	80024b0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 020e 	bic.w	r2, r2, #14
 800241a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0201 	bic.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a22      	ldr	r2, [pc, #136]	; (80024bc <HAL_DMA_Abort_IT+0xd4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d029      	beq.n	800248a <HAL_DMA_Abort_IT+0xa2>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a21      	ldr	r2, [pc, #132]	; (80024c0 <HAL_DMA_Abort_IT+0xd8>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d022      	beq.n	8002486 <HAL_DMA_Abort_IT+0x9e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a1f      	ldr	r2, [pc, #124]	; (80024c4 <HAL_DMA_Abort_IT+0xdc>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d01a      	beq.n	8002480 <HAL_DMA_Abort_IT+0x98>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a1e      	ldr	r2, [pc, #120]	; (80024c8 <HAL_DMA_Abort_IT+0xe0>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d012      	beq.n	800247a <HAL_DMA_Abort_IT+0x92>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a1c      	ldr	r2, [pc, #112]	; (80024cc <HAL_DMA_Abort_IT+0xe4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00a      	beq.n	8002474 <HAL_DMA_Abort_IT+0x8c>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a1b      	ldr	r2, [pc, #108]	; (80024d0 <HAL_DMA_Abort_IT+0xe8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d102      	bne.n	800246e <HAL_DMA_Abort_IT+0x86>
 8002468:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800246c:	e00e      	b.n	800248c <HAL_DMA_Abort_IT+0xa4>
 800246e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002472:	e00b      	b.n	800248c <HAL_DMA_Abort_IT+0xa4>
 8002474:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002478:	e008      	b.n	800248c <HAL_DMA_Abort_IT+0xa4>
 800247a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800247e:	e005      	b.n	800248c <HAL_DMA_Abort_IT+0xa4>
 8002480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002484:	e002      	b.n	800248c <HAL_DMA_Abort_IT+0xa4>
 8002486:	2310      	movs	r3, #16
 8002488:	e000      	b.n	800248c <HAL_DMA_Abort_IT+0xa4>
 800248a:	2301      	movs	r3, #1
 800248c:	4a11      	ldr	r2, [pc, #68]	; (80024d4 <HAL_DMA_Abort_IT+0xec>)
 800248e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	4798      	blx	r3
    } 
  }
  return status;
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40020008 	.word	0x40020008
 80024c0:	4002001c 	.word	0x4002001c
 80024c4:	40020030 	.word	0x40020030
 80024c8:	40020044 	.word	0x40020044
 80024cc:	40020058 	.word	0x40020058
 80024d0:	4002006c 	.word	0x4002006c
 80024d4:	40020000 	.word	0x40020000

080024d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	2204      	movs	r2, #4
 80024f6:	409a      	lsls	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d04f      	beq.n	80025a0 <HAL_DMA_IRQHandler+0xc8>
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b00      	cmp	r3, #0
 8002508:	d04a      	beq.n	80025a0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b00      	cmp	r3, #0
 8002516:	d107      	bne.n	8002528 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0204 	bic.w	r2, r2, #4
 8002526:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a66      	ldr	r2, [pc, #408]	; (80026c8 <HAL_DMA_IRQHandler+0x1f0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d029      	beq.n	8002586 <HAL_DMA_IRQHandler+0xae>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a65      	ldr	r2, [pc, #404]	; (80026cc <HAL_DMA_IRQHandler+0x1f4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d022      	beq.n	8002582 <HAL_DMA_IRQHandler+0xaa>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a63      	ldr	r2, [pc, #396]	; (80026d0 <HAL_DMA_IRQHandler+0x1f8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d01a      	beq.n	800257c <HAL_DMA_IRQHandler+0xa4>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a62      	ldr	r2, [pc, #392]	; (80026d4 <HAL_DMA_IRQHandler+0x1fc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d012      	beq.n	8002576 <HAL_DMA_IRQHandler+0x9e>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a60      	ldr	r2, [pc, #384]	; (80026d8 <HAL_DMA_IRQHandler+0x200>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00a      	beq.n	8002570 <HAL_DMA_IRQHandler+0x98>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a5f      	ldr	r2, [pc, #380]	; (80026dc <HAL_DMA_IRQHandler+0x204>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d102      	bne.n	800256a <HAL_DMA_IRQHandler+0x92>
 8002564:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002568:	e00e      	b.n	8002588 <HAL_DMA_IRQHandler+0xb0>
 800256a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800256e:	e00b      	b.n	8002588 <HAL_DMA_IRQHandler+0xb0>
 8002570:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002574:	e008      	b.n	8002588 <HAL_DMA_IRQHandler+0xb0>
 8002576:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800257a:	e005      	b.n	8002588 <HAL_DMA_IRQHandler+0xb0>
 800257c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002580:	e002      	b.n	8002588 <HAL_DMA_IRQHandler+0xb0>
 8002582:	2340      	movs	r3, #64	; 0x40
 8002584:	e000      	b.n	8002588 <HAL_DMA_IRQHandler+0xb0>
 8002586:	2304      	movs	r3, #4
 8002588:	4a55      	ldr	r2, [pc, #340]	; (80026e0 <HAL_DMA_IRQHandler+0x208>)
 800258a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 8094 	beq.w	80026be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800259e:	e08e      	b.n	80026be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	2202      	movs	r2, #2
 80025a6:	409a      	lsls	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d056      	beq.n	800265e <HAL_DMA_IRQHandler+0x186>
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d051      	beq.n	800265e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10b      	bne.n	80025e0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 020a 	bic.w	r2, r2, #10
 80025d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a38      	ldr	r2, [pc, #224]	; (80026c8 <HAL_DMA_IRQHandler+0x1f0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d029      	beq.n	800263e <HAL_DMA_IRQHandler+0x166>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a37      	ldr	r2, [pc, #220]	; (80026cc <HAL_DMA_IRQHandler+0x1f4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d022      	beq.n	800263a <HAL_DMA_IRQHandler+0x162>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a35      	ldr	r2, [pc, #212]	; (80026d0 <HAL_DMA_IRQHandler+0x1f8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d01a      	beq.n	8002634 <HAL_DMA_IRQHandler+0x15c>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a34      	ldr	r2, [pc, #208]	; (80026d4 <HAL_DMA_IRQHandler+0x1fc>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d012      	beq.n	800262e <HAL_DMA_IRQHandler+0x156>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a32      	ldr	r2, [pc, #200]	; (80026d8 <HAL_DMA_IRQHandler+0x200>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00a      	beq.n	8002628 <HAL_DMA_IRQHandler+0x150>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a31      	ldr	r2, [pc, #196]	; (80026dc <HAL_DMA_IRQHandler+0x204>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d102      	bne.n	8002622 <HAL_DMA_IRQHandler+0x14a>
 800261c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002620:	e00e      	b.n	8002640 <HAL_DMA_IRQHandler+0x168>
 8002622:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002626:	e00b      	b.n	8002640 <HAL_DMA_IRQHandler+0x168>
 8002628:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800262c:	e008      	b.n	8002640 <HAL_DMA_IRQHandler+0x168>
 800262e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002632:	e005      	b.n	8002640 <HAL_DMA_IRQHandler+0x168>
 8002634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002638:	e002      	b.n	8002640 <HAL_DMA_IRQHandler+0x168>
 800263a:	2320      	movs	r3, #32
 800263c:	e000      	b.n	8002640 <HAL_DMA_IRQHandler+0x168>
 800263e:	2302      	movs	r3, #2
 8002640:	4a27      	ldr	r2, [pc, #156]	; (80026e0 <HAL_DMA_IRQHandler+0x208>)
 8002642:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	2b00      	cmp	r3, #0
 8002652:	d034      	beq.n	80026be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800265c:	e02f      	b.n	80026be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	2208      	movs	r2, #8
 8002664:	409a      	lsls	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4013      	ands	r3, r2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d028      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x1e8>
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b00      	cmp	r3, #0
 8002676:	d023      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 020e 	bic.w	r2, r2, #14
 8002686:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002690:	2101      	movs	r1, #1
 8002692:	fa01 f202 	lsl.w	r2, r1, r2
 8002696:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d004      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	4798      	blx	r3
    }
  }
  return;
 80026be:	bf00      	nop
 80026c0:	bf00      	nop
}
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40020008 	.word	0x40020008
 80026cc:	4002001c 	.word	0x4002001c
 80026d0:	40020030 	.word	0x40020030
 80026d4:	40020044 	.word	0x40020044
 80026d8:	40020058 	.word	0x40020058
 80026dc:	4002006c 	.word	0x4002006c
 80026e0:	40020000 	.word	0x40020000

080026e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b08b      	sub	sp, #44	; 0x2c
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026ee:	2300      	movs	r3, #0
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026f2:	2300      	movs	r3, #0
 80026f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026f6:	e169      	b.n	80029cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026f8:	2201      	movs	r2, #1
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	429a      	cmp	r2, r3
 8002712:	f040 8158 	bne.w	80029c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4a9a      	ldr	r2, [pc, #616]	; (8002984 <HAL_GPIO_Init+0x2a0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d05e      	beq.n	80027de <HAL_GPIO_Init+0xfa>
 8002720:	4a98      	ldr	r2, [pc, #608]	; (8002984 <HAL_GPIO_Init+0x2a0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d875      	bhi.n	8002812 <HAL_GPIO_Init+0x12e>
 8002726:	4a98      	ldr	r2, [pc, #608]	; (8002988 <HAL_GPIO_Init+0x2a4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d058      	beq.n	80027de <HAL_GPIO_Init+0xfa>
 800272c:	4a96      	ldr	r2, [pc, #600]	; (8002988 <HAL_GPIO_Init+0x2a4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d86f      	bhi.n	8002812 <HAL_GPIO_Init+0x12e>
 8002732:	4a96      	ldr	r2, [pc, #600]	; (800298c <HAL_GPIO_Init+0x2a8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d052      	beq.n	80027de <HAL_GPIO_Init+0xfa>
 8002738:	4a94      	ldr	r2, [pc, #592]	; (800298c <HAL_GPIO_Init+0x2a8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d869      	bhi.n	8002812 <HAL_GPIO_Init+0x12e>
 800273e:	4a94      	ldr	r2, [pc, #592]	; (8002990 <HAL_GPIO_Init+0x2ac>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d04c      	beq.n	80027de <HAL_GPIO_Init+0xfa>
 8002744:	4a92      	ldr	r2, [pc, #584]	; (8002990 <HAL_GPIO_Init+0x2ac>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d863      	bhi.n	8002812 <HAL_GPIO_Init+0x12e>
 800274a:	4a92      	ldr	r2, [pc, #584]	; (8002994 <HAL_GPIO_Init+0x2b0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d046      	beq.n	80027de <HAL_GPIO_Init+0xfa>
 8002750:	4a90      	ldr	r2, [pc, #576]	; (8002994 <HAL_GPIO_Init+0x2b0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d85d      	bhi.n	8002812 <HAL_GPIO_Init+0x12e>
 8002756:	2b12      	cmp	r3, #18
 8002758:	d82a      	bhi.n	80027b0 <HAL_GPIO_Init+0xcc>
 800275a:	2b12      	cmp	r3, #18
 800275c:	d859      	bhi.n	8002812 <HAL_GPIO_Init+0x12e>
 800275e:	a201      	add	r2, pc, #4	; (adr r2, 8002764 <HAL_GPIO_Init+0x80>)
 8002760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002764:	080027df 	.word	0x080027df
 8002768:	080027b9 	.word	0x080027b9
 800276c:	080027cb 	.word	0x080027cb
 8002770:	0800280d 	.word	0x0800280d
 8002774:	08002813 	.word	0x08002813
 8002778:	08002813 	.word	0x08002813
 800277c:	08002813 	.word	0x08002813
 8002780:	08002813 	.word	0x08002813
 8002784:	08002813 	.word	0x08002813
 8002788:	08002813 	.word	0x08002813
 800278c:	08002813 	.word	0x08002813
 8002790:	08002813 	.word	0x08002813
 8002794:	08002813 	.word	0x08002813
 8002798:	08002813 	.word	0x08002813
 800279c:	08002813 	.word	0x08002813
 80027a0:	08002813 	.word	0x08002813
 80027a4:	08002813 	.word	0x08002813
 80027a8:	080027c1 	.word	0x080027c1
 80027ac:	080027d5 	.word	0x080027d5
 80027b0:	4a79      	ldr	r2, [pc, #484]	; (8002998 <HAL_GPIO_Init+0x2b4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d013      	beq.n	80027de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027b6:	e02c      	b.n	8002812 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	623b      	str	r3, [r7, #32]
          break;
 80027be:	e029      	b.n	8002814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	3304      	adds	r3, #4
 80027c6:	623b      	str	r3, [r7, #32]
          break;
 80027c8:	e024      	b.n	8002814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	3308      	adds	r3, #8
 80027d0:	623b      	str	r3, [r7, #32]
          break;
 80027d2:	e01f      	b.n	8002814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	330c      	adds	r3, #12
 80027da:	623b      	str	r3, [r7, #32]
          break;
 80027dc:	e01a      	b.n	8002814 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d102      	bne.n	80027ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027e6:	2304      	movs	r3, #4
 80027e8:	623b      	str	r3, [r7, #32]
          break;
 80027ea:	e013      	b.n	8002814 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d105      	bne.n	8002800 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027f4:	2308      	movs	r3, #8
 80027f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	611a      	str	r2, [r3, #16]
          break;
 80027fe:	e009      	b.n	8002814 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002800:	2308      	movs	r3, #8
 8002802:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69fa      	ldr	r2, [r7, #28]
 8002808:	615a      	str	r2, [r3, #20]
          break;
 800280a:	e003      	b.n	8002814 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800280c:	2300      	movs	r3, #0
 800280e:	623b      	str	r3, [r7, #32]
          break;
 8002810:	e000      	b.n	8002814 <HAL_GPIO_Init+0x130>
          break;
 8002812:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	2bff      	cmp	r3, #255	; 0xff
 8002818:	d801      	bhi.n	800281e <HAL_GPIO_Init+0x13a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	e001      	b.n	8002822 <HAL_GPIO_Init+0x13e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3304      	adds	r3, #4
 8002822:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2bff      	cmp	r3, #255	; 0xff
 8002828:	d802      	bhi.n	8002830 <HAL_GPIO_Init+0x14c>
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	e002      	b.n	8002836 <HAL_GPIO_Init+0x152>
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	3b08      	subs	r3, #8
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	210f      	movs	r1, #15
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	fa01 f303 	lsl.w	r3, r1, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	401a      	ands	r2, r3
 8002848:	6a39      	ldr	r1, [r7, #32]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	fa01 f303 	lsl.w	r3, r1, r3
 8002850:	431a      	orrs	r2, r3
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 80b1 	beq.w	80029c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002864:	4b4d      	ldr	r3, [pc, #308]	; (800299c <HAL_GPIO_Init+0x2b8>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	4a4c      	ldr	r2, [pc, #304]	; (800299c <HAL_GPIO_Init+0x2b8>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	6193      	str	r3, [r2, #24]
 8002870:	4b4a      	ldr	r3, [pc, #296]	; (800299c <HAL_GPIO_Init+0x2b8>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800287c:	4a48      	ldr	r2, [pc, #288]	; (80029a0 <HAL_GPIO_Init+0x2bc>)
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	089b      	lsrs	r3, r3, #2
 8002882:	3302      	adds	r3, #2
 8002884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002888:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	220f      	movs	r2, #15
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	4013      	ands	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a40      	ldr	r2, [pc, #256]	; (80029a4 <HAL_GPIO_Init+0x2c0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d013      	beq.n	80028d0 <HAL_GPIO_Init+0x1ec>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a3f      	ldr	r2, [pc, #252]	; (80029a8 <HAL_GPIO_Init+0x2c4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d00d      	beq.n	80028cc <HAL_GPIO_Init+0x1e8>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a3e      	ldr	r2, [pc, #248]	; (80029ac <HAL_GPIO_Init+0x2c8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d007      	beq.n	80028c8 <HAL_GPIO_Init+0x1e4>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a3d      	ldr	r2, [pc, #244]	; (80029b0 <HAL_GPIO_Init+0x2cc>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d101      	bne.n	80028c4 <HAL_GPIO_Init+0x1e0>
 80028c0:	2303      	movs	r3, #3
 80028c2:	e006      	b.n	80028d2 <HAL_GPIO_Init+0x1ee>
 80028c4:	2304      	movs	r3, #4
 80028c6:	e004      	b.n	80028d2 <HAL_GPIO_Init+0x1ee>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e002      	b.n	80028d2 <HAL_GPIO_Init+0x1ee>
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <HAL_GPIO_Init+0x1ee>
 80028d0:	2300      	movs	r3, #0
 80028d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d4:	f002 0203 	and.w	r2, r2, #3
 80028d8:	0092      	lsls	r2, r2, #2
 80028da:	4093      	lsls	r3, r2
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028e2:	492f      	ldr	r1, [pc, #188]	; (80029a0 <HAL_GPIO_Init+0x2bc>)
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	089b      	lsrs	r3, r3, #2
 80028e8:	3302      	adds	r3, #2
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d006      	beq.n	800290a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028fc:	4b2d      	ldr	r3, [pc, #180]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	492c      	ldr	r1, [pc, #176]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	4313      	orrs	r3, r2
 8002906:	608b      	str	r3, [r1, #8]
 8002908:	e006      	b.n	8002918 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800290a:	4b2a      	ldr	r3, [pc, #168]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	43db      	mvns	r3, r3
 8002912:	4928      	ldr	r1, [pc, #160]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 8002914:	4013      	ands	r3, r2
 8002916:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d006      	beq.n	8002932 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002924:	4b23      	ldr	r3, [pc, #140]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	4922      	ldr	r1, [pc, #136]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	4313      	orrs	r3, r2
 800292e:	60cb      	str	r3, [r1, #12]
 8002930:	e006      	b.n	8002940 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	43db      	mvns	r3, r3
 800293a:	491e      	ldr	r1, [pc, #120]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 800293c:	4013      	ands	r3, r2
 800293e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d006      	beq.n	800295a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800294c:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	4918      	ldr	r1, [pc, #96]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]
 8002958:	e006      	b.n	8002968 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800295a:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	43db      	mvns	r3, r3
 8002962:	4914      	ldr	r1, [pc, #80]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 8002964:	4013      	ands	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d021      	beq.n	80029b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002974:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	490e      	ldr	r1, [pc, #56]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	600b      	str	r3, [r1, #0]
 8002980:	e021      	b.n	80029c6 <HAL_GPIO_Init+0x2e2>
 8002982:	bf00      	nop
 8002984:	10320000 	.word	0x10320000
 8002988:	10310000 	.word	0x10310000
 800298c:	10220000 	.word	0x10220000
 8002990:	10210000 	.word	0x10210000
 8002994:	10120000 	.word	0x10120000
 8002998:	10110000 	.word	0x10110000
 800299c:	40021000 	.word	0x40021000
 80029a0:	40010000 	.word	0x40010000
 80029a4:	40010800 	.word	0x40010800
 80029a8:	40010c00 	.word	0x40010c00
 80029ac:	40011000 	.word	0x40011000
 80029b0:	40011400 	.word	0x40011400
 80029b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_GPIO_Init+0x304>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	43db      	mvns	r3, r3
 80029c0:	4909      	ldr	r1, [pc, #36]	; (80029e8 <HAL_GPIO_Init+0x304>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	3301      	adds	r3, #1
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	fa22 f303 	lsr.w	r3, r2, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f47f ae8e 	bne.w	80026f8 <HAL_GPIO_Init+0x14>
  }
}
 80029dc:	bf00      	nop
 80029de:	bf00      	nop
 80029e0:	372c      	adds	r7, #44	; 0x2c
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr
 80029e8:	40010400 	.word	0x40010400

080029ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	887b      	ldrh	r3, [r7, #2]
 80029fe:	4013      	ands	r3, r2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a04:	2301      	movs	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
 8002a08:	e001      	b.n	8002a0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr

08002a1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	460b      	mov	r3, r1
 8002a24:	807b      	strh	r3, [r7, #2]
 8002a26:	4613      	mov	r3, r2
 8002a28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a2a:	787b      	ldrb	r3, [r7, #1]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a30:	887a      	ldrh	r2, [r7, #2]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a36:	e003      	b.n	8002a40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a38:	887b      	ldrh	r3, [r7, #2]
 8002a3a:	041a      	lsls	r2, r3, #16
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	611a      	str	r2, [r3, #16]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr
	...

08002a4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e12b      	b.n	8002cb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d106      	bne.n	8002a78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7fe fc56 	bl	8001324 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2224      	movs	r2, #36	; 0x24
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0201 	bic.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ab0:	f000 fcda 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 8002ab4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4a81      	ldr	r2, [pc, #516]	; (8002cc0 <HAL_I2C_Init+0x274>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d807      	bhi.n	8002ad0 <HAL_I2C_Init+0x84>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4a80      	ldr	r2, [pc, #512]	; (8002cc4 <HAL_I2C_Init+0x278>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	bf94      	ite	ls
 8002ac8:	2301      	movls	r3, #1
 8002aca:	2300      	movhi	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	e006      	b.n	8002ade <HAL_I2C_Init+0x92>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4a7d      	ldr	r2, [pc, #500]	; (8002cc8 <HAL_I2C_Init+0x27c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	bf94      	ite	ls
 8002ad8:	2301      	movls	r3, #1
 8002ada:	2300      	movhi	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e0e7      	b.n	8002cb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a78      	ldr	r2, [pc, #480]	; (8002ccc <HAL_I2C_Init+0x280>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	0c9b      	lsrs	r3, r3, #18
 8002af0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	4a6a      	ldr	r2, [pc, #424]	; (8002cc0 <HAL_I2C_Init+0x274>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d802      	bhi.n	8002b20 <HAL_I2C_Init+0xd4>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	e009      	b.n	8002b34 <HAL_I2C_Init+0xe8>
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b26:	fb02 f303 	mul.w	r3, r2, r3
 8002b2a:	4a69      	ldr	r2, [pc, #420]	; (8002cd0 <HAL_I2C_Init+0x284>)
 8002b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b30:	099b      	lsrs	r3, r3, #6
 8002b32:	3301      	adds	r3, #1
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	430b      	orrs	r3, r1
 8002b3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	495c      	ldr	r1, [pc, #368]	; (8002cc0 <HAL_I2C_Init+0x274>)
 8002b50:	428b      	cmp	r3, r1
 8002b52:	d819      	bhi.n	8002b88 <HAL_I2C_Init+0x13c>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	1e59      	subs	r1, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b62:	1c59      	adds	r1, r3, #1
 8002b64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b68:	400b      	ands	r3, r1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <HAL_I2C_Init+0x138>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1e59      	subs	r1, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b82:	e051      	b.n	8002c28 <HAL_I2C_Init+0x1dc>
 8002b84:	2304      	movs	r3, #4
 8002b86:	e04f      	b.n	8002c28 <HAL_I2C_Init+0x1dc>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d111      	bne.n	8002bb4 <HAL_I2C_Init+0x168>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	1e58      	subs	r0, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6859      	ldr	r1, [r3, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	440b      	add	r3, r1
 8002b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	e012      	b.n	8002bda <HAL_I2C_Init+0x18e>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1e58      	subs	r0, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6859      	ldr	r1, [r3, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	0099      	lsls	r1, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bca:	3301      	adds	r3, #1
 8002bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_I2C_Init+0x196>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e022      	b.n	8002c28 <HAL_I2C_Init+0x1dc>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10e      	bne.n	8002c08 <HAL_I2C_Init+0x1bc>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1e58      	subs	r0, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6859      	ldr	r1, [r3, #4]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	440b      	add	r3, r1
 8002bf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c06:	e00f      	b.n	8002c28 <HAL_I2C_Init+0x1dc>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1e58      	subs	r0, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6859      	ldr	r1, [r3, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	0099      	lsls	r1, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c1e:	3301      	adds	r3, #1
 8002c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	6809      	ldr	r1, [r1, #0]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69da      	ldr	r2, [r3, #28]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6911      	ldr	r1, [r2, #16]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68d2      	ldr	r2, [r2, #12]
 8002c62:	4311      	orrs	r1, r2
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0201 	orr.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	000186a0 	.word	0x000186a0
 8002cc4:	001e847f 	.word	0x001e847f
 8002cc8:	003d08ff 	.word	0x003d08ff
 8002ccc:	431bde83 	.word	0x431bde83
 8002cd0:	10624dd3 	.word	0x10624dd3

08002cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e272      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 8087 	beq.w	8002e02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cf4:	4b92      	ldr	r3, [pc, #584]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d00c      	beq.n	8002d1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d00:	4b8f      	ldr	r3, [pc, #572]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 030c 	and.w	r3, r3, #12
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d112      	bne.n	8002d32 <HAL_RCC_OscConfig+0x5e>
 8002d0c:	4b8c      	ldr	r3, [pc, #560]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d18:	d10b      	bne.n	8002d32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d1a:	4b89      	ldr	r3, [pc, #548]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d06c      	beq.n	8002e00 <HAL_RCC_OscConfig+0x12c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d168      	bne.n	8002e00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e24c      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d3a:	d106      	bne.n	8002d4a <HAL_RCC_OscConfig+0x76>
 8002d3c:	4b80      	ldr	r3, [pc, #512]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a7f      	ldr	r2, [pc, #508]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	e02e      	b.n	8002da8 <HAL_RCC_OscConfig+0xd4>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x98>
 8002d52:	4b7b      	ldr	r3, [pc, #492]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a7a      	ldr	r2, [pc, #488]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4b78      	ldr	r3, [pc, #480]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a77      	ldr	r2, [pc, #476]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	e01d      	b.n	8002da8 <HAL_RCC_OscConfig+0xd4>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d74:	d10c      	bne.n	8002d90 <HAL_RCC_OscConfig+0xbc>
 8002d76:	4b72      	ldr	r3, [pc, #456]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a71      	ldr	r2, [pc, #452]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	4b6f      	ldr	r3, [pc, #444]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a6e      	ldr	r2, [pc, #440]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	e00b      	b.n	8002da8 <HAL_RCC_OscConfig+0xd4>
 8002d90:	4b6b      	ldr	r3, [pc, #428]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a6a      	ldr	r2, [pc, #424]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	4b68      	ldr	r3, [pc, #416]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a67      	ldr	r2, [pc, #412]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d013      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7ff f976 	bl	80020a0 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db8:	f7ff f972 	bl	80020a0 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	; 0x64
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e200      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dca:	4b5d      	ldr	r3, [pc, #372]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f0      	beq.n	8002db8 <HAL_RCC_OscConfig+0xe4>
 8002dd6:	e014      	b.n	8002e02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd8:	f7ff f962 	bl	80020a0 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de0:	f7ff f95e 	bl	80020a0 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b64      	cmp	r3, #100	; 0x64
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e1ec      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df2:	4b53      	ldr	r3, [pc, #332]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x10c>
 8002dfe:	e000      	b.n	8002e02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d063      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e0e:	4b4c      	ldr	r3, [pc, #304]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 030c 	and.w	r3, r3, #12
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00b      	beq.n	8002e32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e1a:	4b49      	ldr	r3, [pc, #292]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d11c      	bne.n	8002e60 <HAL_RCC_OscConfig+0x18c>
 8002e26:	4b46      	ldr	r3, [pc, #280]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d116      	bne.n	8002e60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e32:	4b43      	ldr	r3, [pc, #268]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d005      	beq.n	8002e4a <HAL_RCC_OscConfig+0x176>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d001      	beq.n	8002e4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e1c0      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4a:	4b3d      	ldr	r3, [pc, #244]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4939      	ldr	r1, [pc, #228]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5e:	e03a      	b.n	8002ed6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d020      	beq.n	8002eaa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e68:	4b36      	ldr	r3, [pc, #216]	; (8002f44 <HAL_RCC_OscConfig+0x270>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7ff f917 	bl	80020a0 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e76:	f7ff f913 	bl	80020a0 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e1a1      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e88:	4b2d      	ldr	r3, [pc, #180]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e94:	4b2a      	ldr	r3, [pc, #168]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4927      	ldr	r1, [pc, #156]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	600b      	str	r3, [r1, #0]
 8002ea8:	e015      	b.n	8002ed6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eaa:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <HAL_RCC_OscConfig+0x270>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7ff f8f6 	bl	80020a0 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb8:	f7ff f8f2 	bl	80020a0 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e180      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eca:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d03a      	beq.n	8002f58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d019      	beq.n	8002f1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eea:	4b17      	ldr	r3, [pc, #92]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002eec:	2201      	movs	r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef0:	f7ff f8d6 	bl	80020a0 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef8:	f7ff f8d2 	bl	80020a0 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e160      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f16:	2001      	movs	r0, #1
 8002f18:	f000 fafe 	bl	8003518 <RCC_Delay>
 8002f1c:	e01c      	b.n	8002f58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f24:	f7ff f8bc 	bl	80020a0 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f2a:	e00f      	b.n	8002f4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f2c:	f7ff f8b8 	bl	80020a0 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d908      	bls.n	8002f4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e146      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
 8002f3e:	bf00      	nop
 8002f40:	40021000 	.word	0x40021000
 8002f44:	42420000 	.word	0x42420000
 8002f48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f4c:	4b92      	ldr	r3, [pc, #584]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e9      	bne.n	8002f2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80a6 	beq.w	80030b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f66:	2300      	movs	r3, #0
 8002f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6a:	4b8b      	ldr	r3, [pc, #556]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10d      	bne.n	8002f92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f76:	4b88      	ldr	r3, [pc, #544]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	4a87      	ldr	r2, [pc, #540]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f80:	61d3      	str	r3, [r2, #28]
 8002f82:	4b85      	ldr	r3, [pc, #532]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f92:	4b82      	ldr	r3, [pc, #520]	; (800319c <HAL_RCC_OscConfig+0x4c8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d118      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f9e:	4b7f      	ldr	r3, [pc, #508]	; (800319c <HAL_RCC_OscConfig+0x4c8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a7e      	ldr	r2, [pc, #504]	; (800319c <HAL_RCC_OscConfig+0x4c8>)
 8002fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002faa:	f7ff f879 	bl	80020a0 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb2:	f7ff f875 	bl	80020a0 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b64      	cmp	r3, #100	; 0x64
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e103      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc4:	4b75      	ldr	r3, [pc, #468]	; (800319c <HAL_RCC_OscConfig+0x4c8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x312>
 8002fd8:	4b6f      	ldr	r3, [pc, #444]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	4a6e      	ldr	r2, [pc, #440]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6213      	str	r3, [r2, #32]
 8002fe4:	e02d      	b.n	8003042 <HAL_RCC_OscConfig+0x36e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10c      	bne.n	8003008 <HAL_RCC_OscConfig+0x334>
 8002fee:	4b6a      	ldr	r3, [pc, #424]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	4a69      	ldr	r2, [pc, #420]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	f023 0301 	bic.w	r3, r3, #1
 8002ff8:	6213      	str	r3, [r2, #32]
 8002ffa:	4b67      	ldr	r3, [pc, #412]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	4a66      	ldr	r2, [pc, #408]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003000:	f023 0304 	bic.w	r3, r3, #4
 8003004:	6213      	str	r3, [r2, #32]
 8003006:	e01c      	b.n	8003042 <HAL_RCC_OscConfig+0x36e>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	2b05      	cmp	r3, #5
 800300e:	d10c      	bne.n	800302a <HAL_RCC_OscConfig+0x356>
 8003010:	4b61      	ldr	r3, [pc, #388]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4a60      	ldr	r2, [pc, #384]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003016:	f043 0304 	orr.w	r3, r3, #4
 800301a:	6213      	str	r3, [r2, #32]
 800301c:	4b5e      	ldr	r3, [pc, #376]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	4a5d      	ldr	r2, [pc, #372]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	6213      	str	r3, [r2, #32]
 8003028:	e00b      	b.n	8003042 <HAL_RCC_OscConfig+0x36e>
 800302a:	4b5b      	ldr	r3, [pc, #364]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	4a5a      	ldr	r2, [pc, #360]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003030:	f023 0301 	bic.w	r3, r3, #1
 8003034:	6213      	str	r3, [r2, #32]
 8003036:	4b58      	ldr	r3, [pc, #352]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	4a57      	ldr	r2, [pc, #348]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800303c:	f023 0304 	bic.w	r3, r3, #4
 8003040:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d015      	beq.n	8003076 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304a:	f7ff f829 	bl	80020a0 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003050:	e00a      	b.n	8003068 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003052:	f7ff f825 	bl	80020a0 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003060:	4293      	cmp	r3, r2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e0b1      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003068:	4b4b      	ldr	r3, [pc, #300]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0ee      	beq.n	8003052 <HAL_RCC_OscConfig+0x37e>
 8003074:	e014      	b.n	80030a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003076:	f7ff f813 	bl	80020a0 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307c:	e00a      	b.n	8003094 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307e:	f7ff f80f 	bl	80020a0 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	f241 3288 	movw	r2, #5000	; 0x1388
 800308c:	4293      	cmp	r3, r2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e09b      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003094:	4b40      	ldr	r3, [pc, #256]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1ee      	bne.n	800307e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030a0:	7dfb      	ldrb	r3, [r7, #23]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d105      	bne.n	80030b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a6:	4b3c      	ldr	r3, [pc, #240]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	4a3b      	ldr	r2, [pc, #236]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 80030ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 8087 	beq.w	80031ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030bc:	4b36      	ldr	r3, [pc, #216]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 030c 	and.w	r3, r3, #12
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d061      	beq.n	800318c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d146      	bne.n	800315e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d0:	4b33      	ldr	r3, [pc, #204]	; (80031a0 <HAL_RCC_OscConfig+0x4cc>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d6:	f7fe ffe3 	bl	80020a0 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030de:	f7fe ffdf 	bl	80020a0 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e06d      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f0:	4b29      	ldr	r3, [pc, #164]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f0      	bne.n	80030de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003104:	d108      	bne.n	8003118 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003106:	4b24      	ldr	r3, [pc, #144]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	4921      	ldr	r1, [pc, #132]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003118:	4b1f      	ldr	r3, [pc, #124]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a19      	ldr	r1, [r3, #32]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	430b      	orrs	r3, r1
 800312a:	491b      	ldr	r1, [pc, #108]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	4313      	orrs	r3, r2
 800312e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003130:	4b1b      	ldr	r3, [pc, #108]	; (80031a0 <HAL_RCC_OscConfig+0x4cc>)
 8003132:	2201      	movs	r2, #1
 8003134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003136:	f7fe ffb3 	bl	80020a0 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313e:	f7fe ffaf 	bl	80020a0 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e03d      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003150:	4b11      	ldr	r3, [pc, #68]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x46a>
 800315c:	e035      	b.n	80031ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315e:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <HAL_RCC_OscConfig+0x4cc>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003164:	f7fe ff9c 	bl	80020a0 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316c:	f7fe ff98 	bl	80020a0 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e026      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800317e:	4b06      	ldr	r3, [pc, #24]	; (8003198 <HAL_RCC_OscConfig+0x4c4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x498>
 800318a:	e01e      	b.n	80031ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d107      	bne.n	80031a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e019      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
 8003198:	40021000 	.word	0x40021000
 800319c:	40007000 	.word	0x40007000
 80031a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031a4:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <HAL_RCC_OscConfig+0x500>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d106      	bne.n	80031c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d001      	beq.n	80031ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40021000 	.word	0x40021000

080031d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0d0      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031ec:	4b6a      	ldr	r3, [pc, #424]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d910      	bls.n	800321c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fa:	4b67      	ldr	r3, [pc, #412]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f023 0207 	bic.w	r2, r3, #7
 8003202:	4965      	ldr	r1, [pc, #404]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	4b63      	ldr	r3, [pc, #396]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0b8      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d020      	beq.n	800326a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003234:	4b59      	ldr	r3, [pc, #356]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	4a58      	ldr	r2, [pc, #352]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 800323a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800323e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800324c:	4b53      	ldr	r3, [pc, #332]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	4a52      	ldr	r2, [pc, #328]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003256:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003258:	4b50      	ldr	r3, [pc, #320]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	494d      	ldr	r1, [pc, #308]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003266:	4313      	orrs	r3, r2
 8003268:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d040      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	4b47      	ldr	r3, [pc, #284]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d115      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e07f      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003296:	4b41      	ldr	r3, [pc, #260]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e073      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a6:	4b3d      	ldr	r3, [pc, #244]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e06b      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032b6:	4b39      	ldr	r3, [pc, #228]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f023 0203 	bic.w	r2, r3, #3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	4936      	ldr	r1, [pc, #216]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c8:	f7fe feea 	bl	80020a0 <HAL_GetTick>
 80032cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ce:	e00a      	b.n	80032e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d0:	f7fe fee6 	bl	80020a0 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f241 3288 	movw	r2, #5000	; 0x1388
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e053      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e6:	4b2d      	ldr	r3, [pc, #180]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 020c 	and.w	r2, r3, #12
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d1eb      	bne.n	80032d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032f8:	4b27      	ldr	r3, [pc, #156]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d210      	bcs.n	8003328 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003306:	4b24      	ldr	r3, [pc, #144]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 0207 	bic.w	r2, r3, #7
 800330e:	4922      	ldr	r1, [pc, #136]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b20      	ldr	r3, [pc, #128]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e032      	b.n	800338e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003334:	4b19      	ldr	r3, [pc, #100]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4916      	ldr	r1, [pc, #88]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003342:	4313      	orrs	r3, r2
 8003344:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003352:	4b12      	ldr	r3, [pc, #72]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	490e      	ldr	r1, [pc, #56]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	4313      	orrs	r3, r2
 8003364:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003366:	f000 f821 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 800336a:	4602      	mov	r2, r0
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	490a      	ldr	r1, [pc, #40]	; (80033a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003378:	5ccb      	ldrb	r3, [r1, r3]
 800337a:	fa22 f303 	lsr.w	r3, r2, r3
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <HAL_RCC_ClockConfig+0x1cc>)
 8003380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003382:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe fb7a 	bl	8001a80 <HAL_InitTick>

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40022000 	.word	0x40022000
 800339c:	40021000 	.word	0x40021000
 80033a0:	08007ebc 	.word	0x08007ebc
 80033a4:	2000000c 	.word	0x2000000c
 80033a8:	20000010 	.word	0x20000010

080033ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	2300      	movs	r3, #0
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	2300      	movs	r3, #0
 80033c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033c6:	4b1e      	ldr	r3, [pc, #120]	; (8003440 <HAL_RCC_GetSysClockFreq+0x94>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d002      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x30>
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_GetSysClockFreq+0x36>
 80033da:	e027      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033dc:	4b19      	ldr	r3, [pc, #100]	; (8003444 <HAL_RCC_GetSysClockFreq+0x98>)
 80033de:	613b      	str	r3, [r7, #16]
      break;
 80033e0:	e027      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	0c9b      	lsrs	r3, r3, #18
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	4a17      	ldr	r2, [pc, #92]	; (8003448 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033ec:	5cd3      	ldrb	r3, [r2, r3]
 80033ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d010      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033fa:	4b11      	ldr	r3, [pc, #68]	; (8003440 <HAL_RCC_GetSysClockFreq+0x94>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	0c5b      	lsrs	r3, r3, #17
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	4a11      	ldr	r2, [pc, #68]	; (800344c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003406:	5cd3      	ldrb	r3, [r2, r3]
 8003408:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a0d      	ldr	r2, [pc, #52]	; (8003444 <HAL_RCC_GetSysClockFreq+0x98>)
 800340e:	fb03 f202 	mul.w	r2, r3, r2
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	fbb2 f3f3 	udiv	r3, r2, r3
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	e004      	b.n	8003426 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a0c      	ldr	r2, [pc, #48]	; (8003450 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003420:	fb02 f303 	mul.w	r3, r2, r3
 8003424:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	613b      	str	r3, [r7, #16]
      break;
 800342a:	e002      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_RCC_GetSysClockFreq+0x98>)
 800342e:	613b      	str	r3, [r7, #16]
      break;
 8003430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003432:	693b      	ldr	r3, [r7, #16]
}
 8003434:	4618      	mov	r0, r3
 8003436:	371c      	adds	r7, #28
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000
 8003444:	007a1200 	.word	0x007a1200
 8003448:	08007ed4 	.word	0x08007ed4
 800344c:	08007ee4 	.word	0x08007ee4
 8003450:	003d0900 	.word	0x003d0900

08003454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003458:	4b02      	ldr	r3, [pc, #8]	; (8003464 <HAL_RCC_GetHCLKFreq+0x10>)
 800345a:	681b      	ldr	r3, [r3, #0]
}
 800345c:	4618      	mov	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr
 8003464:	2000000c 	.word	0x2000000c

08003468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800346c:	f7ff fff2 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 8003470:	4602      	mov	r2, r0
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	0a1b      	lsrs	r3, r3, #8
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4903      	ldr	r1, [pc, #12]	; (800348c <HAL_RCC_GetPCLK1Freq+0x24>)
 800347e:	5ccb      	ldrb	r3, [r1, r3]
 8003480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003484:	4618      	mov	r0, r3
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40021000 	.word	0x40021000
 800348c:	08007ecc 	.word	0x08007ecc

08003490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003494:	f7ff ffde 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 8003498:	4602      	mov	r2, r0
 800349a:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	0adb      	lsrs	r3, r3, #11
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	4903      	ldr	r1, [pc, #12]	; (80034b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034a6:	5ccb      	ldrb	r3, [r1, r3]
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40021000 	.word	0x40021000
 80034b4:	08007ecc 	.word	0x08007ecc

080034b8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	220f      	movs	r2, #15
 80034c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034c8:	4b11      	ldr	r3, [pc, #68]	; (8003510 <HAL_RCC_GetClockConfig+0x58>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0203 	and.w	r2, r3, #3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034d4:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <HAL_RCC_GetClockConfig+0x58>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034e0:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <HAL_RCC_GetClockConfig+0x58>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80034ec:	4b08      	ldr	r3, [pc, #32]	; (8003510 <HAL_RCC_GetClockConfig+0x58>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	08db      	lsrs	r3, r3, #3
 80034f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_RCC_GetClockConfig+0x5c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0207 	and.w	r2, r3, #7
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr
 8003510:	40021000 	.word	0x40021000
 8003514:	40022000 	.word	0x40022000

08003518 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003520:	4b0a      	ldr	r3, [pc, #40]	; (800354c <RCC_Delay+0x34>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <RCC_Delay+0x38>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	0a5b      	lsrs	r3, r3, #9
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	fb02 f303 	mul.w	r3, r2, r3
 8003532:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003534:	bf00      	nop
  }
  while (Delay --);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	1e5a      	subs	r2, r3, #1
 800353a:	60fa      	str	r2, [r7, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1f9      	bne.n	8003534 <RCC_Delay+0x1c>
}
 8003540:	bf00      	nop
 8003542:	bf00      	nop
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr
 800354c:	2000000c 	.word	0x2000000c
 8003550:	10624dd3 	.word	0x10624dd3

08003554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e041      	b.n	80035ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fe fc1c 	bl	8001db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3304      	adds	r3, #4
 8003590:	4619      	mov	r1, r3
 8003592:	4610      	mov	r0, r2
 8003594:	f000 fabe 	bl	8003b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	d001      	beq.n	800360c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e032      	b.n	8003672 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a18      	ldr	r2, [pc, #96]	; (800367c <HAL_TIM_Base_Start+0x88>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00e      	beq.n	800363c <HAL_TIM_Base_Start+0x48>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003626:	d009      	beq.n	800363c <HAL_TIM_Base_Start+0x48>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a14      	ldr	r2, [pc, #80]	; (8003680 <HAL_TIM_Base_Start+0x8c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d004      	beq.n	800363c <HAL_TIM_Base_Start+0x48>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a13      	ldr	r2, [pc, #76]	; (8003684 <HAL_TIM_Base_Start+0x90>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d111      	bne.n	8003660 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b06      	cmp	r3, #6
 800364c:	d010      	beq.n	8003670 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0201 	orr.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800365e:	e007      	b.n	8003670 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr
 800367c:	40012c00 	.word	0x40012c00
 8003680:	40000400 	.word	0x40000400
 8003684:	40000800 	.word	0x40000800

08003688 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b01      	cmp	r3, #1
 800369a:	d001      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e03a      	b.n	8003716 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a18      	ldr	r2, [pc, #96]	; (8003720 <HAL_TIM_Base_Start_IT+0x98>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00e      	beq.n	80036e0 <HAL_TIM_Base_Start_IT+0x58>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ca:	d009      	beq.n	80036e0 <HAL_TIM_Base_Start_IT+0x58>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a14      	ldr	r2, [pc, #80]	; (8003724 <HAL_TIM_Base_Start_IT+0x9c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d004      	beq.n	80036e0 <HAL_TIM_Base_Start_IT+0x58>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a13      	ldr	r2, [pc, #76]	; (8003728 <HAL_TIM_Base_Start_IT+0xa0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d111      	bne.n	8003704 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b06      	cmp	r3, #6
 80036f0:	d010      	beq.n	8003714 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0201 	orr.w	r2, r2, #1
 8003700:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003702:	e007      	b.n	8003714 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr
 8003720:	40012c00 	.word	0x40012c00
 8003724:	40000400 	.word	0x40000400
 8003728:	40000800 	.word	0x40000800

0800372c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b02      	cmp	r3, #2
 8003740:	d122      	bne.n	8003788 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b02      	cmp	r3, #2
 800374e:	d11b      	bne.n	8003788 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0202 	mvn.w	r2, #2
 8003758:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f9b4 	bl	8003adc <HAL_TIM_IC_CaptureCallback>
 8003774:	e005      	b.n	8003782 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f9a7 	bl	8003aca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f9b6 	bl	8003aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b04      	cmp	r3, #4
 8003794:	d122      	bne.n	80037dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d11b      	bne.n	80037dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0204 	mvn.w	r2, #4
 80037ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2202      	movs	r2, #2
 80037b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f98a 	bl	8003adc <HAL_TIM_IC_CaptureCallback>
 80037c8:	e005      	b.n	80037d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f97d 	bl	8003aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f98c 	bl	8003aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d122      	bne.n	8003830 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d11b      	bne.n	8003830 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0208 	mvn.w	r2, #8
 8003800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2204      	movs	r2, #4
 8003806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f960 	bl	8003adc <HAL_TIM_IC_CaptureCallback>
 800381c:	e005      	b.n	800382a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f953 	bl	8003aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f962 	bl	8003aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f003 0310 	and.w	r3, r3, #16
 800383a:	2b10      	cmp	r3, #16
 800383c:	d122      	bne.n	8003884 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0310 	and.w	r3, r3, #16
 8003848:	2b10      	cmp	r3, #16
 800384a:	d11b      	bne.n	8003884 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0210 	mvn.w	r2, #16
 8003854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2208      	movs	r2, #8
 800385a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f936 	bl	8003adc <HAL_TIM_IC_CaptureCallback>
 8003870:	e005      	b.n	800387e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f929 	bl	8003aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f938 	bl	8003aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b01      	cmp	r3, #1
 8003890:	d10e      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b01      	cmp	r3, #1
 800389e:	d107      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0201 	mvn.w	r2, #1
 80038a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fd fe18 	bl	80014e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ba:	2b80      	cmp	r3, #128	; 0x80
 80038bc:	d10e      	bne.n	80038dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c8:	2b80      	cmp	r3, #128	; 0x80
 80038ca:	d107      	bne.n	80038dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fa7b 	bl	8003dd2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e6:	2b40      	cmp	r3, #64	; 0x40
 80038e8:	d10e      	bne.n	8003908 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f4:	2b40      	cmp	r3, #64	; 0x40
 80038f6:	d107      	bne.n	8003908 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f8fc 	bl	8003b00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b20      	cmp	r3, #32
 8003914:	d10e      	bne.n	8003934 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b20      	cmp	r3, #32
 8003922:	d107      	bne.n	8003934 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0220 	mvn.w	r2, #32
 800392c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fa46 	bl	8003dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003934:	bf00      	nop
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_TIM_ConfigClockSource+0x1c>
 8003954:	2302      	movs	r3, #2
 8003956:	e0b4      	b.n	8003ac2 <HAL_TIM_ConfigClockSource+0x186>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800397e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003990:	d03e      	beq.n	8003a10 <HAL_TIM_ConfigClockSource+0xd4>
 8003992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003996:	f200 8087 	bhi.w	8003aa8 <HAL_TIM_ConfigClockSource+0x16c>
 800399a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800399e:	f000 8086 	beq.w	8003aae <HAL_TIM_ConfigClockSource+0x172>
 80039a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a6:	d87f      	bhi.n	8003aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80039a8:	2b70      	cmp	r3, #112	; 0x70
 80039aa:	d01a      	beq.n	80039e2 <HAL_TIM_ConfigClockSource+0xa6>
 80039ac:	2b70      	cmp	r3, #112	; 0x70
 80039ae:	d87b      	bhi.n	8003aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80039b0:	2b60      	cmp	r3, #96	; 0x60
 80039b2:	d050      	beq.n	8003a56 <HAL_TIM_ConfigClockSource+0x11a>
 80039b4:	2b60      	cmp	r3, #96	; 0x60
 80039b6:	d877      	bhi.n	8003aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80039b8:	2b50      	cmp	r3, #80	; 0x50
 80039ba:	d03c      	beq.n	8003a36 <HAL_TIM_ConfigClockSource+0xfa>
 80039bc:	2b50      	cmp	r3, #80	; 0x50
 80039be:	d873      	bhi.n	8003aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80039c0:	2b40      	cmp	r3, #64	; 0x40
 80039c2:	d058      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0x13a>
 80039c4:	2b40      	cmp	r3, #64	; 0x40
 80039c6:	d86f      	bhi.n	8003aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80039c8:	2b30      	cmp	r3, #48	; 0x30
 80039ca:	d064      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x15a>
 80039cc:	2b30      	cmp	r3, #48	; 0x30
 80039ce:	d86b      	bhi.n	8003aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d060      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x15a>
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d867      	bhi.n	8003aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d05c      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x15a>
 80039dc:	2b10      	cmp	r3, #16
 80039de:	d05a      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x15a>
 80039e0:	e062      	b.n	8003aa8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039f2:	f000 f968 	bl	8003cc6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	609a      	str	r2, [r3, #8]
      break;
 8003a0e:	e04f      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a20:	f000 f951 	bl	8003cc6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a32:	609a      	str	r2, [r3, #8]
      break;
 8003a34:	e03c      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a42:	461a      	mov	r2, r3
 8003a44:	f000 f8c8 	bl	8003bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2150      	movs	r1, #80	; 0x50
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 f91f 	bl	8003c92 <TIM_ITRx_SetConfig>
      break;
 8003a54:	e02c      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a62:	461a      	mov	r2, r3
 8003a64:	f000 f8e6 	bl	8003c34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2160      	movs	r1, #96	; 0x60
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 f90f 	bl	8003c92 <TIM_ITRx_SetConfig>
      break;
 8003a74:	e01c      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a82:	461a      	mov	r2, r3
 8003a84:	f000 f8a8 	bl	8003bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2140      	movs	r1, #64	; 0x40
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 f8ff 	bl	8003c92 <TIM_ITRx_SetConfig>
      break;
 8003a94:	e00c      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	f000 f8f6 	bl	8003c92 <TIM_ITRx_SetConfig>
      break;
 8003aa6:	e003      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8003aac:	e000      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003aae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr

08003aee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr

08003b00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr
	...

08003b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a29      	ldr	r2, [pc, #164]	; (8003bcc <TIM_Base_SetConfig+0xb8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00b      	beq.n	8003b44 <TIM_Base_SetConfig+0x30>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b32:	d007      	beq.n	8003b44 <TIM_Base_SetConfig+0x30>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a26      	ldr	r2, [pc, #152]	; (8003bd0 <TIM_Base_SetConfig+0xbc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d003      	beq.n	8003b44 <TIM_Base_SetConfig+0x30>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a25      	ldr	r2, [pc, #148]	; (8003bd4 <TIM_Base_SetConfig+0xc0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d108      	bne.n	8003b56 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a1c      	ldr	r2, [pc, #112]	; (8003bcc <TIM_Base_SetConfig+0xb8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00b      	beq.n	8003b76 <TIM_Base_SetConfig+0x62>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b64:	d007      	beq.n	8003b76 <TIM_Base_SetConfig+0x62>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a19      	ldr	r2, [pc, #100]	; (8003bd0 <TIM_Base_SetConfig+0xbc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d003      	beq.n	8003b76 <TIM_Base_SetConfig+0x62>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a18      	ldr	r2, [pc, #96]	; (8003bd4 <TIM_Base_SetConfig+0xc0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d108      	bne.n	8003b88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a07      	ldr	r2, [pc, #28]	; (8003bcc <TIM_Base_SetConfig+0xb8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d103      	bne.n	8003bbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	615a      	str	r2, [r3, #20]
}
 8003bc2:	bf00      	nop
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr
 8003bcc:	40012c00 	.word	0x40012c00
 8003bd0:	40000400 	.word	0x40000400
 8003bd4:	40000800 	.word	0x40000800

08003bd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	f023 0201 	bic.w	r2, r3, #1
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f023 030a 	bic.w	r3, r3, #10
 8003c14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	621a      	str	r2, [r3, #32]
}
 8003c2a:	bf00      	nop
 8003c2c:	371c      	adds	r7, #28
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr

08003c34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	f023 0210 	bic.w	r2, r3, #16
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	031b      	lsls	r3, r3, #12
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c70:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	621a      	str	r2, [r3, #32]
}
 8003c88:	bf00      	nop
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr

08003c92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b085      	sub	sp, #20
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f043 0307 	orr.w	r3, r3, #7
 8003cb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	609a      	str	r2, [r3, #8]
}
 8003cbc:	bf00      	nop
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr

08003cc6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b087      	sub	sp, #28
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	607a      	str	r2, [r7, #4]
 8003cd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ce0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	021a      	lsls	r2, r3, #8
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	609a      	str	r2, [r3, #8]
}
 8003cfa:	bf00      	nop
 8003cfc:	371c      	adds	r7, #28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr

08003d04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e046      	b.n	8003daa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a16      	ldr	r2, [pc, #88]	; (8003db4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00e      	beq.n	8003d7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d68:	d009      	beq.n	8003d7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a12      	ldr	r2, [pc, #72]	; (8003db8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d004      	beq.n	8003d7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a10      	ldr	r2, [pc, #64]	; (8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d10c      	bne.n	8003d98 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr
 8003db4:	40012c00 	.word	0x40012c00
 8003db8:	40000400 	.word	0x40000400
 8003dbc:	40000800 	.word	0x40000800

08003dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr

08003de4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e042      	b.n	8003e7c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d106      	bne.n	8003e10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7fe f84e 	bl	8001eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2224      	movs	r2, #36	; 0x24
 8003e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 fdcd 	bl	80049c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695a      	ldr	r2, [r3, #20]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08a      	sub	sp, #40	; 0x28
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	4613      	mov	r3, r2
 8003e92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d16d      	bne.n	8003f80 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <HAL_UART_Transmit+0x2c>
 8003eaa:	88fb      	ldrh	r3, [r7, #6]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e066      	b.n	8003f82 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2221      	movs	r2, #33	; 0x21
 8003ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ec2:	f7fe f8ed 	bl	80020a0 <HAL_GetTick>
 8003ec6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	88fa      	ldrh	r2, [r7, #6]
 8003ecc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	88fa      	ldrh	r2, [r7, #6]
 8003ed2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003edc:	d108      	bne.n	8003ef0 <HAL_UART_Transmit+0x6c>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d104      	bne.n	8003ef0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	61bb      	str	r3, [r7, #24]
 8003eee:	e003      	b.n	8003ef8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ef8:	e02a      	b.n	8003f50 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2200      	movs	r2, #0
 8003f02:	2180      	movs	r1, #128	; 0x80
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 fb1d 	bl	8004544 <UART_WaitOnFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e036      	b.n	8003f82 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10b      	bne.n	8003f32 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	3302      	adds	r3, #2
 8003f2e:	61bb      	str	r3, [r7, #24]
 8003f30:	e007      	b.n	8003f42 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	781a      	ldrb	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1cf      	bne.n	8003efa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2200      	movs	r2, #0
 8003f62:	2140      	movs	r1, #64	; 0x40
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 faed 	bl	8004544 <UART_WaitOnFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e006      	b.n	8003f82 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	e000      	b.n	8003f82 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003f80:	2302      	movs	r3, #2
  }
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3720      	adds	r7, #32
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	4613      	mov	r3, r2
 8003f96:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	d112      	bne.n	8003fca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_UART_Receive_IT+0x26>
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e00b      	b.n	8003fcc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	68b9      	ldr	r1, [r7, #8]
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 fb2d 	bl	8004620 <UART_Start_Receive_IT>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	e000      	b.n	8003fcc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003fca:	2302      	movs	r3, #2
  }
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b0ba      	sub	sp, #232	; 0xe8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004000:	2300      	movs	r3, #0
 8004002:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004012:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10f      	bne.n	800403a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800401a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	2b00      	cmp	r3, #0
 8004024:	d009      	beq.n	800403a <HAL_UART_IRQHandler+0x66>
 8004026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fc0a 	bl	800484c <UART_Receive_IT>
      return;
 8004038:	e25b      	b.n	80044f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800403a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 80de 	beq.w	8004200 <HAL_UART_IRQHandler+0x22c>
 8004044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d106      	bne.n	800405e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004054:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 80d1 	beq.w	8004200 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800405e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00b      	beq.n	8004082 <HAL_UART_IRQHandler+0xae>
 800406a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800406e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	f043 0201 	orr.w	r2, r3, #1
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00b      	beq.n	80040a6 <HAL_UART_IRQHandler+0xd2>
 800408e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d005      	beq.n	80040a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409e:	f043 0202 	orr.w	r2, r3, #2
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00b      	beq.n	80040ca <HAL_UART_IRQHandler+0xf6>
 80040b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c2:	f043 0204 	orr.w	r2, r3, #4
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d011      	beq.n	80040fa <HAL_UART_IRQHandler+0x126>
 80040d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040da:	f003 0320 	and.w	r3, r3, #32
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d105      	bne.n	80040ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f2:	f043 0208 	orr.w	r2, r3, #8
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 81f2 	beq.w	80044e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_UART_IRQHandler+0x14e>
 8004110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 fb95 	bl	800484c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	bf14      	ite	ne
 8004130:	2301      	movne	r3, #1
 8004132:	2300      	moveq	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b00      	cmp	r3, #0
 8004144:	d103      	bne.n	800414e <HAL_UART_IRQHandler+0x17a>
 8004146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800414a:	2b00      	cmp	r3, #0
 800414c:	d04f      	beq.n	80041ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fa9f 	bl	8004692 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415e:	2b00      	cmp	r3, #0
 8004160:	d041      	beq.n	80041e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3314      	adds	r3, #20
 8004168:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004170:	e853 3f00 	ldrex	r3, [r3]
 8004174:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004178:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800417c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004180:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3314      	adds	r3, #20
 800418a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800418e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004192:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004196:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800419a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800419e:	e841 2300 	strex	r3, r2, [r1]
 80041a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80041a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1d9      	bne.n	8004162 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d013      	beq.n	80041de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ba:	4a7e      	ldr	r2, [pc, #504]	; (80043b4 <HAL_UART_IRQHandler+0x3e0>)
 80041bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fe f910 	bl	80023e8 <HAL_DMA_Abort_IT>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d016      	beq.n	80041fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80041d8:	4610      	mov	r0, r2
 80041da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041dc:	e00e      	b.n	80041fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f99c 	bl	800451c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e4:	e00a      	b.n	80041fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f998 	bl	800451c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ec:	e006      	b.n	80041fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f994 	bl	800451c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80041fa:	e175      	b.n	80044e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041fc:	bf00      	nop
    return;
 80041fe:	e173      	b.n	80044e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004204:	2b01      	cmp	r3, #1
 8004206:	f040 814f 	bne.w	80044a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800420a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800420e:	f003 0310 	and.w	r3, r3, #16
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 8148 	beq.w	80044a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8141 	beq.w	80044a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004226:	2300      	movs	r3, #0
 8004228:	60bb      	str	r3, [r7, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 80b6 	beq.w	80043b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004258:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 8145 	beq.w	80044ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004266:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800426a:	429a      	cmp	r2, r3
 800426c:	f080 813e 	bcs.w	80044ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004276:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	2b20      	cmp	r3, #32
 8004280:	f000 8088 	beq.w	8004394 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	330c      	adds	r3, #12
 800428a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004292:	e853 3f00 	ldrex	r3, [r3]
 8004296:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800429a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800429e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	330c      	adds	r3, #12
 80042ac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80042b0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80042bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80042c0:	e841 2300 	strex	r3, r2, [r1]
 80042c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80042c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1d9      	bne.n	8004284 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3314      	adds	r3, #20
 80042d6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042da:	e853 3f00 	ldrex	r3, [r3]
 80042de:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80042e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042e2:	f023 0301 	bic.w	r3, r3, #1
 80042e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3314      	adds	r3, #20
 80042f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042f4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80042f8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80042fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004300:	e841 2300 	strex	r3, r2, [r1]
 8004304:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004306:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1e1      	bne.n	80042d0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3314      	adds	r3, #20
 8004312:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004316:	e853 3f00 	ldrex	r3, [r3]
 800431a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800431c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800431e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004322:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3314      	adds	r3, #20
 800432c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004330:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004332:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004336:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800433e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e3      	bne.n	800430c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	330c      	adds	r3, #12
 8004358:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800435c:	e853 3f00 	ldrex	r3, [r3]
 8004360:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004364:	f023 0310 	bic.w	r3, r3, #16
 8004368:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	330c      	adds	r3, #12
 8004372:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004376:	65ba      	str	r2, [r7, #88]	; 0x58
 8004378:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800437c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800437e:	e841 2300 	strex	r3, r2, [r1]
 8004382:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1e3      	bne.n	8004352 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438e:	4618      	mov	r0, r3
 8004390:	f7fd ffee 	bl	8002370 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	4619      	mov	r1, r3
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f8bf 	bl	800452e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043b0:	e09c      	b.n	80044ec <HAL_UART_IRQHandler+0x518>
 80043b2:	bf00      	nop
 80043b4:	08004757 	.word	0x08004757
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 808e 	beq.w	80044f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80043d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8089 	beq.w	80044f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	330c      	adds	r3, #12
 80043e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e8:	e853 3f00 	ldrex	r3, [r3]
 80043ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	330c      	adds	r3, #12
 80043fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004402:	647a      	str	r2, [r7, #68]	; 0x44
 8004404:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004406:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004408:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800440a:	e841 2300 	strex	r3, r2, [r1]
 800440e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1e3      	bne.n	80043de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3314      	adds	r3, #20
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	623b      	str	r3, [r7, #32]
   return(result);
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	f023 0301 	bic.w	r3, r3, #1
 800442c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3314      	adds	r3, #20
 8004436:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800443a:	633a      	str	r2, [r7, #48]	; 0x30
 800443c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004442:	e841 2300 	strex	r3, r2, [r1]
 8004446:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1e3      	bne.n	8004416 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	60fb      	str	r3, [r7, #12]
   return(result);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0310 	bic.w	r3, r3, #16
 8004472:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	330c      	adds	r3, #12
 800447c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004480:	61fa      	str	r2, [r7, #28]
 8004482:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004484:	69b9      	ldr	r1, [r7, #24]
 8004486:	69fa      	ldr	r2, [r7, #28]
 8004488:	e841 2300 	strex	r3, r2, [r1]
 800448c:	617b      	str	r3, [r7, #20]
   return(result);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e3      	bne.n	800445c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800449a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800449e:	4619      	mov	r1, r3
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f844 	bl	800452e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044a6:	e023      	b.n	80044f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d009      	beq.n	80044c8 <HAL_UART_IRQHandler+0x4f4>
 80044b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f95c 	bl	800477e <UART_Transmit_IT>
    return;
 80044c6:	e014      	b.n	80044f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00e      	beq.n	80044f2 <HAL_UART_IRQHandler+0x51e>
 80044d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d008      	beq.n	80044f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f99b 	bl	800481c <UART_EndTransmit_IT>
    return;
 80044e6:	e004      	b.n	80044f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80044e8:	bf00      	nop
 80044ea:	e002      	b.n	80044f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80044ec:	bf00      	nop
 80044ee:	e000      	b.n	80044f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80044f0:	bf00      	nop
  }
}
 80044f2:	37e8      	adds	r7, #232	; 0xe8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	bc80      	pop	{r7}
 8004508:	4770      	bx	lr

0800450a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	bc80      	pop	{r7}
 800452c:	4770      	bx	lr

0800452e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	460b      	mov	r3, r1
 8004538:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr

08004544 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b090      	sub	sp, #64	; 0x40
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	603b      	str	r3, [r7, #0]
 8004550:	4613      	mov	r3, r2
 8004552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004554:	e050      	b.n	80045f8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455c:	d04c      	beq.n	80045f8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800455e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004560:	2b00      	cmp	r3, #0
 8004562:	d007      	beq.n	8004574 <UART_WaitOnFlagUntilTimeout+0x30>
 8004564:	f7fd fd9c 	bl	80020a0 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004570:	429a      	cmp	r2, r3
 8004572:	d241      	bcs.n	80045f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	330c      	adds	r3, #12
 800457a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457e:	e853 3f00 	ldrex	r3, [r3]
 8004582:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800458a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	330c      	adds	r3, #12
 8004592:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004594:	637a      	str	r2, [r7, #52]	; 0x34
 8004596:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004598:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800459a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800459c:	e841 2300 	strex	r3, r2, [r1]
 80045a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1e5      	bne.n	8004574 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3314      	adds	r3, #20
 80045ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	e853 3f00 	ldrex	r3, [r3]
 80045b6:	613b      	str	r3, [r7, #16]
   return(result);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	f023 0301 	bic.w	r3, r3, #1
 80045be:	63bb      	str	r3, [r7, #56]	; 0x38
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3314      	adds	r3, #20
 80045c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045c8:	623a      	str	r2, [r7, #32]
 80045ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045cc:	69f9      	ldr	r1, [r7, #28]
 80045ce:	6a3a      	ldr	r2, [r7, #32]
 80045d0:	e841 2300 	strex	r3, r2, [r1]
 80045d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1e5      	bne.n	80045a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e00f      	b.n	8004618 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	4013      	ands	r3, r2
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	429a      	cmp	r2, r3
 8004606:	bf0c      	ite	eq
 8004608:	2301      	moveq	r3, #1
 800460a:	2300      	movne	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	461a      	mov	r2, r3
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	429a      	cmp	r2, r3
 8004614:	d09f      	beq.n	8004556 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3740      	adds	r7, #64	; 0x40
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	4613      	mov	r3, r2
 800462c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	88fa      	ldrh	r2, [r7, #6]
 8004638:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	88fa      	ldrh	r2, [r7, #6]
 800463e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2222      	movs	r2, #34	; 0x22
 800464a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d007      	beq.n	8004666 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004664:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0201 	orr.w	r2, r2, #1
 8004674:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0220 	orr.w	r2, r2, #32
 8004684:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr

08004692 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004692:	b480      	push	{r7}
 8004694:	b095      	sub	sp, #84	; 0x54
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	330c      	adds	r3, #12
 80046a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a4:	e853 3f00 	ldrex	r3, [r3]
 80046a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	330c      	adds	r3, #12
 80046b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046ba:	643a      	str	r2, [r7, #64]	; 0x40
 80046bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046c2:	e841 2300 	strex	r3, r2, [r1]
 80046c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1e5      	bne.n	800469a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3314      	adds	r3, #20
 80046d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	e853 3f00 	ldrex	r3, [r3]
 80046dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	f023 0301 	bic.w	r3, r3, #1
 80046e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3314      	adds	r3, #20
 80046ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046f6:	e841 2300 	strex	r3, r2, [r1]
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1e5      	bne.n	80046ce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	2b01      	cmp	r3, #1
 8004708:	d119      	bne.n	800473e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	330c      	adds	r3, #12
 8004710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	60bb      	str	r3, [r7, #8]
   return(result);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f023 0310 	bic.w	r3, r3, #16
 8004720:	647b      	str	r3, [r7, #68]	; 0x44
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	330c      	adds	r3, #12
 8004728:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800472a:	61ba      	str	r2, [r7, #24]
 800472c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	6979      	ldr	r1, [r7, #20]
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	613b      	str	r3, [r7, #16]
   return(result);
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e5      	bne.n	800470a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800474c:	bf00      	nop
 800474e:	3754      	adds	r7, #84	; 0x54
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr

08004756 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f7ff fed3 	bl	800451c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004776:	bf00      	nop
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800477e:	b480      	push	{r7}
 8004780:	b085      	sub	sp, #20
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b21      	cmp	r3, #33	; 0x21
 8004790:	d13e      	bne.n	8004810 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479a:	d114      	bne.n	80047c6 <UART_Transmit_IT+0x48>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d110      	bne.n	80047c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	1c9a      	adds	r2, r3, #2
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	621a      	str	r2, [r3, #32]
 80047c4:	e008      	b.n	80047d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	1c59      	adds	r1, r3, #1
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6211      	str	r1, [r2, #32]
 80047d0:	781a      	ldrb	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047dc:	b29b      	uxth	r3, r3
 80047de:	3b01      	subs	r3, #1
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	4619      	mov	r1, r3
 80047e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10f      	bne.n	800480c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800480a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800480c:	2300      	movs	r3, #0
 800480e:	e000      	b.n	8004812 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004810:	2302      	movs	r3, #2
  }
}
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr

0800481c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004832:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2220      	movs	r2, #32
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7ff fe5b 	bl	80044f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08c      	sub	sp, #48	; 0x30
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b22      	cmp	r3, #34	; 0x22
 800485e:	f040 80ae 	bne.w	80049be <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486a:	d117      	bne.n	800489c <UART_Receive_IT+0x50>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d113      	bne.n	800489c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004874:	2300      	movs	r3, #0
 8004876:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	b29b      	uxth	r3, r3
 8004886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800488a:	b29a      	uxth	r2, r3
 800488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004894:	1c9a      	adds	r2, r3, #2
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	629a      	str	r2, [r3, #40]	; 0x28
 800489a:	e026      	b.n	80048ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ae:	d007      	beq.n	80048c0 <UART_Receive_IT+0x74>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10a      	bne.n	80048ce <UART_Receive_IT+0x82>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d106      	bne.n	80048ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ca:	701a      	strb	r2, [r3, #0]
 80048cc:	e008      	b.n	80048e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	4619      	mov	r1, r3
 80048f8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d15d      	bne.n	80049ba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0220 	bic.w	r2, r2, #32
 800490c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800491c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695a      	ldr	r2, [r3, #20]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0201 	bic.w	r2, r2, #1
 800492c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004940:	2b01      	cmp	r3, #1
 8004942:	d135      	bne.n	80049b0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	330c      	adds	r3, #12
 8004950:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	613b      	str	r3, [r7, #16]
   return(result);
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f023 0310 	bic.w	r3, r3, #16
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	330c      	adds	r3, #12
 8004968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496a:	623a      	str	r2, [r7, #32]
 800496c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	69f9      	ldr	r1, [r7, #28]
 8004970:	6a3a      	ldr	r2, [r7, #32]
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	61bb      	str	r3, [r7, #24]
   return(result);
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e5      	bne.n	800494a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0310 	and.w	r3, r3, #16
 8004988:	2b10      	cmp	r3, #16
 800498a:	d10a      	bne.n	80049a2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049a6:	4619      	mov	r1, r3
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7ff fdc0 	bl	800452e <HAL_UARTEx_RxEventCallback>
 80049ae:	e002      	b.n	80049b6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7ff fdaa 	bl	800450a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	e002      	b.n	80049c0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	e000      	b.n	80049c0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80049be:	2302      	movs	r3, #2
  }
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3730      	adds	r7, #48	; 0x30
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004a02:	f023 030c 	bic.w	r3, r3, #12
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	68b9      	ldr	r1, [r7, #8]
 8004a0c:	430b      	orrs	r3, r1
 8004a0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a2c      	ldr	r2, [pc, #176]	; (8004adc <UART_SetConfig+0x114>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d103      	bne.n	8004a38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a30:	f7fe fd2e 	bl	8003490 <HAL_RCC_GetPCLK2Freq>
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	e002      	b.n	8004a3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a38:	f7fe fd16 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 8004a3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	009a      	lsls	r2, r3, #2
 8004a48:	441a      	add	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a54:	4a22      	ldr	r2, [pc, #136]	; (8004ae0 <UART_SetConfig+0x118>)
 8004a56:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5a:	095b      	lsrs	r3, r3, #5
 8004a5c:	0119      	lsls	r1, r3, #4
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	009a      	lsls	r2, r3, #2
 8004a68:	441a      	add	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a74:	4b1a      	ldr	r3, [pc, #104]	; (8004ae0 <UART_SetConfig+0x118>)
 8004a76:	fba3 0302 	umull	r0, r3, r3, r2
 8004a7a:	095b      	lsrs	r3, r3, #5
 8004a7c:	2064      	movs	r0, #100	; 0x64
 8004a7e:	fb00 f303 	mul.w	r3, r0, r3
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	3332      	adds	r3, #50	; 0x32
 8004a88:	4a15      	ldr	r2, [pc, #84]	; (8004ae0 <UART_SetConfig+0x118>)
 8004a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a94:	4419      	add	r1, r3
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009a      	lsls	r2, r3, #2
 8004aa0:	441a      	add	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004aac:	4b0c      	ldr	r3, [pc, #48]	; (8004ae0 <UART_SetConfig+0x118>)
 8004aae:	fba3 0302 	umull	r0, r3, r3, r2
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	2064      	movs	r0, #100	; 0x64
 8004ab6:	fb00 f303 	mul.w	r3, r0, r3
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	3332      	adds	r3, #50	; 0x32
 8004ac0:	4a07      	ldr	r2, [pc, #28]	; (8004ae0 <UART_SetConfig+0x118>)
 8004ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac6:	095b      	lsrs	r3, r3, #5
 8004ac8:	f003 020f 	and.w	r2, r3, #15
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	440a      	add	r2, r1
 8004ad2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ad4:	bf00      	nop
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40013800 	.word	0x40013800
 8004ae0:	51eb851f 	.word	0x51eb851f

08004ae4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aea:	f3ef 8305 	mrs	r3, IPSR
 8004aee:	60bb      	str	r3, [r7, #8]
  return(result);
 8004af0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10f      	bne.n	8004b16 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004af6:	f3ef 8310 	mrs	r3, PRIMASK
 8004afa:	607b      	str	r3, [r7, #4]
  return(result);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d109      	bne.n	8004b16 <osKernelInitialize+0x32>
 8004b02:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <osKernelInitialize+0x60>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d109      	bne.n	8004b1e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b0a:	f3ef 8311 	mrs	r3, BASEPRI
 8004b0e:	603b      	str	r3, [r7, #0]
  return(result);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004b16:	f06f 0305 	mvn.w	r3, #5
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	e00c      	b.n	8004b38 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004b1e:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <osKernelInitialize+0x60>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d105      	bne.n	8004b32 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004b26:	4b07      	ldr	r3, [pc, #28]	; (8004b44 <osKernelInitialize+0x60>)
 8004b28:	2201      	movs	r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	e002      	b.n	8004b38 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004b32:	f04f 33ff 	mov.w	r3, #4294967295
 8004b36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004b38:	68fb      	ldr	r3, [r7, #12]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr
 8004b44:	20000404 	.word	0x20000404

08004b48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b4e:	f3ef 8305 	mrs	r3, IPSR
 8004b52:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10f      	bne.n	8004b7a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b5e:	607b      	str	r3, [r7, #4]
  return(result);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d109      	bne.n	8004b7a <osKernelStart+0x32>
 8004b66:	4b11      	ldr	r3, [pc, #68]	; (8004bac <osKernelStart+0x64>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d109      	bne.n	8004b82 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b6e:	f3ef 8311 	mrs	r3, BASEPRI
 8004b72:	603b      	str	r3, [r7, #0]
  return(result);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004b7a:	f06f 0305 	mvn.w	r3, #5
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	e00e      	b.n	8004ba0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b82:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <osKernelStart+0x64>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d107      	bne.n	8004b9a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004b8a:	4b08      	ldr	r3, [pc, #32]	; (8004bac <osKernelStart+0x64>)
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004b90:	f001 fc44 	bl	800641c <vTaskStartScheduler>
      stat = osOK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	e002      	b.n	8004ba0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000404 	.word	0x20000404

08004bb0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b092      	sub	sp, #72	; 0x48
 8004bb4:	af04      	add	r7, sp, #16
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bc0:	f3ef 8305 	mrs	r3, IPSR
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f040 8094 	bne.w	8004cf6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bce:	f3ef 8310 	mrs	r3, PRIMASK
 8004bd2:	623b      	str	r3, [r7, #32]
  return(result);
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f040 808d 	bne.w	8004cf6 <osThreadNew+0x146>
 8004bdc:	4b48      	ldr	r3, [pc, #288]	; (8004d00 <osThreadNew+0x150>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d106      	bne.n	8004bf2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004be4:	f3ef 8311 	mrs	r3, BASEPRI
 8004be8:	61fb      	str	r3, [r7, #28]
  return(result);
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f040 8082 	bne.w	8004cf6 <osThreadNew+0x146>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d07e      	beq.n	8004cf6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004bf8:	2380      	movs	r3, #128	; 0x80
 8004bfa:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004bfc:	2318      	movs	r3, #24
 8004bfe:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004c00:	2300      	movs	r3, #0
 8004c02:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004c04:	f107 031b 	add.w	r3, r7, #27
 8004c08:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d045      	beq.n	8004ca2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <osThreadNew+0x74>
        name = attr->name;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d008      	beq.n	8004c4a <osThreadNew+0x9a>
 8004c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3a:	2b38      	cmp	r3, #56	; 0x38
 8004c3c:	d805      	bhi.n	8004c4a <osThreadNew+0x9a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <osThreadNew+0x9e>
        return (NULL);
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e054      	b.n	8004cf8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	089b      	lsrs	r3, r3, #2
 8004c5c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00e      	beq.n	8004c84 <osThreadNew+0xd4>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	2b5b      	cmp	r3, #91	; 0x5b
 8004c6c:	d90a      	bls.n	8004c84 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d006      	beq.n	8004c84 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <osThreadNew+0xd4>
        mem = 1;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c82:	e010      	b.n	8004ca6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10c      	bne.n	8004ca6 <osThreadNew+0xf6>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d108      	bne.n	8004ca6 <osThreadNew+0xf6>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d104      	bne.n	8004ca6 <osThreadNew+0xf6>
          mem = 0;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ca0:	e001      	b.n	8004ca6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d110      	bne.n	8004cce <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004cb4:	9202      	str	r2, [sp, #8]
 8004cb6:	9301      	str	r3, [sp, #4]
 8004cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cc0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f001 f9de 	bl	8006084 <xTaskCreateStatic>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	e013      	b.n	8004cf6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d110      	bne.n	8004cf6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	f107 0314 	add.w	r3, r7, #20
 8004cdc:	9301      	str	r3, [sp, #4]
 8004cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f001 fa28 	bl	800613c <xTaskCreate>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d001      	beq.n	8004cf6 <osThreadNew+0x146>
          hTask = NULL;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004cf6:	697b      	ldr	r3, [r7, #20]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3738      	adds	r7, #56	; 0x38
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	20000404 	.word	0x20000404

08004d04 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d0c:	f3ef 8305 	mrs	r3, IPSR
 8004d10:	613b      	str	r3, [r7, #16]
  return(result);
 8004d12:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10f      	bne.n	8004d38 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d18:	f3ef 8310 	mrs	r3, PRIMASK
 8004d1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d109      	bne.n	8004d38 <osDelay+0x34>
 8004d24:	4b0d      	ldr	r3, [pc, #52]	; (8004d5c <osDelay+0x58>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d109      	bne.n	8004d40 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d2c:	f3ef 8311 	mrs	r3, BASEPRI
 8004d30:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d003      	beq.n	8004d40 <osDelay+0x3c>
    stat = osErrorISR;
 8004d38:	f06f 0305 	mvn.w	r3, #5
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	e007      	b.n	8004d50 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004d40:	2300      	movs	r3, #0
 8004d42:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f001 fb32 	bl	80063b4 <vTaskDelay>
    }
  }

  return (stat);
 8004d50:	697b      	ldr	r3, [r7, #20]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000404 	.word	0x20000404

08004d60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4a06      	ldr	r2, [pc, #24]	; (8004d88 <vApplicationGetIdleTaskMemory+0x28>)
 8004d70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	4a05      	ldr	r2, [pc, #20]	; (8004d8c <vApplicationGetIdleTaskMemory+0x2c>)
 8004d76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2280      	movs	r2, #128	; 0x80
 8004d7c:	601a      	str	r2, [r3, #0]
}
 8004d7e:	bf00      	nop
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr
 8004d88:	20000408 	.word	0x20000408
 8004d8c:	20000464 	.word	0x20000464

08004d90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4a07      	ldr	r2, [pc, #28]	; (8004dbc <vApplicationGetTimerTaskMemory+0x2c>)
 8004da0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	4a06      	ldr	r2, [pc, #24]	; (8004dc0 <vApplicationGetTimerTaskMemory+0x30>)
 8004da6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dae:	601a      	str	r2, [r3, #0]
}
 8004db0:	bf00      	nop
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bc80      	pop	{r7}
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	20000664 	.word	0x20000664
 8004dc0:	200006c0 	.word	0x200006c0

08004dc4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08a      	sub	sp, #40	; 0x28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004dd0:	f001 fb8a 	bl	80064e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004dd4:	4b58      	ldr	r3, [pc, #352]	; (8004f38 <pvPortMalloc+0x174>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ddc:	f000 f910 	bl	8005000 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004de0:	4b56      	ldr	r3, [pc, #344]	; (8004f3c <pvPortMalloc+0x178>)
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4013      	ands	r3, r2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f040 808e 	bne.w	8004f0a <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d01d      	beq.n	8004e30 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004df4:	2208      	movs	r2, #8
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4413      	add	r3, r2
 8004dfa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d014      	beq.n	8004e30 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f023 0307 	bic.w	r3, r3, #7
 8004e0c:	3308      	adds	r3, #8
 8004e0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e2c:	bf00      	nop
 8004e2e:	e7fe      	b.n	8004e2e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d069      	beq.n	8004f0a <pvPortMalloc+0x146>
 8004e36:	4b42      	ldr	r3, [pc, #264]	; (8004f40 <pvPortMalloc+0x17c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d864      	bhi.n	8004f0a <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e40:	4b40      	ldr	r3, [pc, #256]	; (8004f44 <pvPortMalloc+0x180>)
 8004e42:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e44:	4b3f      	ldr	r3, [pc, #252]	; (8004f44 <pvPortMalloc+0x180>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e4a:	e004      	b.n	8004e56 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d903      	bls.n	8004e68 <pvPortMalloc+0xa4>
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1f1      	bne.n	8004e4c <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e68:	4b33      	ldr	r3, [pc, #204]	; (8004f38 <pvPortMalloc+0x174>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d04b      	beq.n	8004f0a <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2208      	movs	r2, #8
 8004e78:	4413      	add	r3, r2
 8004e7a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	1ad2      	subs	r2, r2, r3
 8004e8c:	2308      	movs	r3, #8
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d91f      	bls.n	8004ed4 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4413      	add	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	f003 0307 	and.w	r3, r3, #7
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00a      	beq.n	8004ebc <pvPortMalloc+0xf8>
	__asm volatile
 8004ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eaa:	f383 8811 	msr	BASEPRI, r3
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f3bf 8f4f 	dsb	sy
 8004eb6:	613b      	str	r3, [r7, #16]
}
 8004eb8:	bf00      	nop
 8004eba:	e7fe      	b.n	8004eba <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	1ad2      	subs	r2, r2, r3
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ece:	69b8      	ldr	r0, [r7, #24]
 8004ed0:	f000 f8f8 	bl	80050c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ed4:	4b1a      	ldr	r3, [pc, #104]	; (8004f40 <pvPortMalloc+0x17c>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	4a18      	ldr	r2, [pc, #96]	; (8004f40 <pvPortMalloc+0x17c>)
 8004ee0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ee2:	4b17      	ldr	r3, [pc, #92]	; (8004f40 <pvPortMalloc+0x17c>)
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	4b18      	ldr	r3, [pc, #96]	; (8004f48 <pvPortMalloc+0x184>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d203      	bcs.n	8004ef6 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004eee:	4b14      	ldr	r3, [pc, #80]	; (8004f40 <pvPortMalloc+0x17c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a15      	ldr	r2, [pc, #84]	; (8004f48 <pvPortMalloc+0x184>)
 8004ef4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	4b10      	ldr	r3, [pc, #64]	; (8004f3c <pvPortMalloc+0x178>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f0a:	f001 fafb 	bl	8006504 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	f003 0307 	and.w	r3, r3, #7
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <pvPortMalloc+0x16a>
	__asm volatile
 8004f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	60fb      	str	r3, [r7, #12]
}
 8004f2a:	bf00      	nop
 8004f2c:	e7fe      	b.n	8004f2c <pvPortMalloc+0x168>
	return pvReturn;
 8004f2e:	69fb      	ldr	r3, [r7, #28]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3728      	adds	r7, #40	; 0x28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	200016c8 	.word	0x200016c8
 8004f3c:	200016d4 	.word	0x200016d4
 8004f40:	200016cc 	.word	0x200016cc
 8004f44:	200016c0 	.word	0x200016c0
 8004f48:	200016d0 	.word	0x200016d0

08004f4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d048      	beq.n	8004ff0 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f5e:	2308      	movs	r3, #8
 8004f60:	425b      	negs	r3, r3
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4413      	add	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	4b21      	ldr	r3, [pc, #132]	; (8004ff8 <vPortFree+0xac>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4013      	ands	r3, r2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10a      	bne.n	8004f90 <vPortFree+0x44>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	60fb      	str	r3, [r7, #12]
}
 8004f8c:	bf00      	nop
 8004f8e:	e7fe      	b.n	8004f8e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <vPortFree+0x62>
	__asm volatile
 8004f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	60bb      	str	r3, [r7, #8]
}
 8004faa:	bf00      	nop
 8004fac:	e7fe      	b.n	8004fac <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	4b11      	ldr	r3, [pc, #68]	; (8004ff8 <vPortFree+0xac>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d019      	beq.n	8004ff0 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d115      	bne.n	8004ff0 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	4b0b      	ldr	r3, [pc, #44]	; (8004ff8 <vPortFree+0xac>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	401a      	ands	r2, r3
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004fd4:	f001 fa88 	bl	80064e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <vPortFree+0xb0>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	4a06      	ldr	r2, [pc, #24]	; (8004ffc <vPortFree+0xb0>)
 8004fe4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004fe6:	6938      	ldr	r0, [r7, #16]
 8004fe8:	f000 f86c 	bl	80050c4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004fec:	f001 fa8a 	bl	8006504 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ff0:	bf00      	nop
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	200016d4 	.word	0x200016d4
 8004ffc:	200016cc 	.word	0x200016cc

08005000 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005006:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800500a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800500c:	4b27      	ldr	r3, [pc, #156]	; (80050ac <prvHeapInit+0xac>)
 800500e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00c      	beq.n	8005034 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	3307      	adds	r3, #7
 800501e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0307 	bic.w	r3, r3, #7
 8005026:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	4a1f      	ldr	r2, [pc, #124]	; (80050ac <prvHeapInit+0xac>)
 8005030:	4413      	add	r3, r2
 8005032:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005038:	4a1d      	ldr	r2, [pc, #116]	; (80050b0 <prvHeapInit+0xb0>)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800503e:	4b1c      	ldr	r3, [pc, #112]	; (80050b0 <prvHeapInit+0xb0>)
 8005040:	2200      	movs	r2, #0
 8005042:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	4413      	add	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800504c:	2208      	movs	r2, #8
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	1a9b      	subs	r3, r3, r2
 8005052:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0307 	bic.w	r3, r3, #7
 800505a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4a15      	ldr	r2, [pc, #84]	; (80050b4 <prvHeapInit+0xb4>)
 8005060:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005062:	4b14      	ldr	r3, [pc, #80]	; (80050b4 <prvHeapInit+0xb4>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2200      	movs	r2, #0
 8005068:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800506a:	4b12      	ldr	r3, [pc, #72]	; (80050b4 <prvHeapInit+0xb4>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	1ad2      	subs	r2, r2, r3
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005080:	4b0c      	ldr	r3, [pc, #48]	; (80050b4 <prvHeapInit+0xb4>)
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	4a0a      	ldr	r2, [pc, #40]	; (80050b8 <prvHeapInit+0xb8>)
 800508e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	4a09      	ldr	r2, [pc, #36]	; (80050bc <prvHeapInit+0xbc>)
 8005096:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005098:	4b09      	ldr	r3, [pc, #36]	; (80050c0 <prvHeapInit+0xc0>)
 800509a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800509e:	601a      	str	r2, [r3, #0]
}
 80050a0:	bf00      	nop
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bc80      	pop	{r7}
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	20000ac0 	.word	0x20000ac0
 80050b0:	200016c0 	.word	0x200016c0
 80050b4:	200016c8 	.word	0x200016c8
 80050b8:	200016d0 	.word	0x200016d0
 80050bc:	200016cc 	.word	0x200016cc
 80050c0:	200016d4 	.word	0x200016d4

080050c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80050cc:	4b27      	ldr	r3, [pc, #156]	; (800516c <prvInsertBlockIntoFreeList+0xa8>)
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	e002      	b.n	80050d8 <prvInsertBlockIntoFreeList+0x14>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d8f7      	bhi.n	80050d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	4413      	add	r3, r2
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d108      	bne.n	8005106 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	441a      	add	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	441a      	add	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d118      	bne.n	800514c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	4b14      	ldr	r3, [pc, #80]	; (8005170 <prvInsertBlockIntoFreeList+0xac>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d00d      	beq.n	8005142 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	441a      	add	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	e008      	b.n	8005154 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005142:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <prvInsertBlockIntoFreeList+0xac>)
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	e003      	b.n	8005154 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	429a      	cmp	r2, r3
 800515a:	d002      	beq.n	8005162 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005162:	bf00      	nop
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr
 800516c:	200016c0 	.word	0x200016c0
 8005170:	200016c8 	.word	0x200016c8

08005174 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f103 0208 	add.w	r2, r3, #8
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f04f 32ff 	mov.w	r2, #4294967295
 800518c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f103 0208 	add.w	r2, r3, #8
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f103 0208 	add.w	r2, r3, #8
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bc80      	pop	{r7}
 80051b0:	4770      	bx	lr

080051b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bc80      	pop	{r7}
 80051c8:	4770      	bx	lr

080051ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051ca:	b480      	push	{r7}
 80051cc:	b085      	sub	sp, #20
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	601a      	str	r2, [r3, #0]
}
 8005206:	bf00      	nop
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	bc80      	pop	{r7}
 800520e:	4770      	bx	lr

08005210 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005226:	d103      	bne.n	8005230 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	e00c      	b.n	800524a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3308      	adds	r3, #8
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	e002      	b.n	800523e <vListInsert+0x2e>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	429a      	cmp	r2, r3
 8005248:	d2f6      	bcs.n	8005238 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	1c5a      	adds	r2, r3, #1
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	601a      	str	r2, [r3, #0]
}
 8005276:	bf00      	nop
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	bc80      	pop	{r7}
 800527e:	4770      	bx	lr

08005280 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6892      	ldr	r2, [r2, #8]
 8005296:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6852      	ldr	r2, [r2, #4]
 80052a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d103      	bne.n	80052b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	1e5a      	subs	r2, r3, #1
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr
	...

080052d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3b04      	subs	r3, #4
 80052e4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	3b04      	subs	r3, #4
 80052f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f023 0201 	bic.w	r2, r3, #1
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	3b04      	subs	r3, #4
 8005302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005304:	4a08      	ldr	r2, [pc, #32]	; (8005328 <pxPortInitialiseStack+0x54>)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	3b14      	subs	r3, #20
 800530e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	3b20      	subs	r3, #32
 800531a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800531c:	68fb      	ldr	r3, [r7, #12]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	bc80      	pop	{r7}
 8005326:	4770      	bx	lr
 8005328:	0800532d 	.word	0x0800532d

0800532c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005332:	2300      	movs	r3, #0
 8005334:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005336:	4b12      	ldr	r3, [pc, #72]	; (8005380 <prvTaskExitError+0x54>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533e:	d00a      	beq.n	8005356 <prvTaskExitError+0x2a>
	__asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	60fb      	str	r3, [r7, #12]
}
 8005352:	bf00      	nop
 8005354:	e7fe      	b.n	8005354 <prvTaskExitError+0x28>
	__asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	60bb      	str	r3, [r7, #8]
}
 8005368:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800536a:	bf00      	nop
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d0fc      	beq.n	800536c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005372:	bf00      	nop
 8005374:	bf00      	nop
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	bc80      	pop	{r7}
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	20000018 	.word	0x20000018
	...

08005390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005390:	4b07      	ldr	r3, [pc, #28]	; (80053b0 <pxCurrentTCBConst2>)
 8005392:	6819      	ldr	r1, [r3, #0]
 8005394:	6808      	ldr	r0, [r1, #0]
 8005396:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800539a:	f380 8809 	msr	PSP, r0
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f04f 0000 	mov.w	r0, #0
 80053a6:	f380 8811 	msr	BASEPRI, r0
 80053aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80053ae:	4770      	bx	lr

080053b0 <pxCurrentTCBConst2>:
 80053b0:	20001720 	.word	0x20001720
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop

080053b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80053b8:	4806      	ldr	r0, [pc, #24]	; (80053d4 <prvPortStartFirstTask+0x1c>)
 80053ba:	6800      	ldr	r0, [r0, #0]
 80053bc:	6800      	ldr	r0, [r0, #0]
 80053be:	f380 8808 	msr	MSP, r0
 80053c2:	b662      	cpsie	i
 80053c4:	b661      	cpsie	f
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	df00      	svc	0
 80053d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80053d2:	bf00      	nop
 80053d4:	e000ed08 	.word	0xe000ed08

080053d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053de:	4b32      	ldr	r3, [pc, #200]	; (80054a8 <xPortStartScheduler+0xd0>)
 80053e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	22ff      	movs	r2, #255	; 0xff
 80053ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053f8:	78fb      	ldrb	r3, [r7, #3]
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005400:	b2da      	uxtb	r2, r3
 8005402:	4b2a      	ldr	r3, [pc, #168]	; (80054ac <xPortStartScheduler+0xd4>)
 8005404:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005406:	4b2a      	ldr	r3, [pc, #168]	; (80054b0 <xPortStartScheduler+0xd8>)
 8005408:	2207      	movs	r2, #7
 800540a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800540c:	e009      	b.n	8005422 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800540e:	4b28      	ldr	r3, [pc, #160]	; (80054b0 <xPortStartScheduler+0xd8>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3b01      	subs	r3, #1
 8005414:	4a26      	ldr	r2, [pc, #152]	; (80054b0 <xPortStartScheduler+0xd8>)
 8005416:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005418:	78fb      	ldrb	r3, [r7, #3]
 800541a:	b2db      	uxtb	r3, r3
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	b2db      	uxtb	r3, r3
 8005420:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005422:	78fb      	ldrb	r3, [r7, #3]
 8005424:	b2db      	uxtb	r3, r3
 8005426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542a:	2b80      	cmp	r3, #128	; 0x80
 800542c:	d0ef      	beq.n	800540e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800542e:	4b20      	ldr	r3, [pc, #128]	; (80054b0 <xPortStartScheduler+0xd8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f1c3 0307 	rsb	r3, r3, #7
 8005436:	2b04      	cmp	r3, #4
 8005438:	d00a      	beq.n	8005450 <xPortStartScheduler+0x78>
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	60bb      	str	r3, [r7, #8]
}
 800544c:	bf00      	nop
 800544e:	e7fe      	b.n	800544e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005450:	4b17      	ldr	r3, [pc, #92]	; (80054b0 <xPortStartScheduler+0xd8>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	021b      	lsls	r3, r3, #8
 8005456:	4a16      	ldr	r2, [pc, #88]	; (80054b0 <xPortStartScheduler+0xd8>)
 8005458:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800545a:	4b15      	ldr	r3, [pc, #84]	; (80054b0 <xPortStartScheduler+0xd8>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005462:	4a13      	ldr	r2, [pc, #76]	; (80054b0 <xPortStartScheduler+0xd8>)
 8005464:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	b2da      	uxtb	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800546e:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <xPortStartScheduler+0xdc>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a10      	ldr	r2, [pc, #64]	; (80054b4 <xPortStartScheduler+0xdc>)
 8005474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005478:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800547a:	4b0e      	ldr	r3, [pc, #56]	; (80054b4 <xPortStartScheduler+0xdc>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a0d      	ldr	r2, [pc, #52]	; (80054b4 <xPortStartScheduler+0xdc>)
 8005480:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005484:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005486:	f000 f8b9 	bl	80055fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800548a:	4b0b      	ldr	r3, [pc, #44]	; (80054b8 <xPortStartScheduler+0xe0>)
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005490:	f7ff ff92 	bl	80053b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005494:	f001 f9a0 	bl	80067d8 <vTaskSwitchContext>
	prvTaskExitError();
 8005498:	f7ff ff48 	bl	800532c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	e000e400 	.word	0xe000e400
 80054ac:	200016d8 	.word	0x200016d8
 80054b0:	200016dc 	.word	0x200016dc
 80054b4:	e000ed20 	.word	0xe000ed20
 80054b8:	20000018 	.word	0x20000018

080054bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
	__asm volatile
 80054c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	607b      	str	r3, [r7, #4]
}
 80054d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80054d6:	4b0f      	ldr	r3, [pc, #60]	; (8005514 <vPortEnterCritical+0x58>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	3301      	adds	r3, #1
 80054dc:	4a0d      	ldr	r2, [pc, #52]	; (8005514 <vPortEnterCritical+0x58>)
 80054de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80054e0:	4b0c      	ldr	r3, [pc, #48]	; (8005514 <vPortEnterCritical+0x58>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d10f      	bne.n	8005508 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80054e8:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <vPortEnterCritical+0x5c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00a      	beq.n	8005508 <vPortEnterCritical+0x4c>
	__asm volatile
 80054f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	603b      	str	r3, [r7, #0]
}
 8005504:	bf00      	nop
 8005506:	e7fe      	b.n	8005506 <vPortEnterCritical+0x4a>
	}
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	bc80      	pop	{r7}
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	20000018 	.word	0x20000018
 8005518:	e000ed04 	.word	0xe000ed04

0800551c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005522:	4b11      	ldr	r3, [pc, #68]	; (8005568 <vPortExitCritical+0x4c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10a      	bne.n	8005540 <vPortExitCritical+0x24>
	__asm volatile
 800552a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	607b      	str	r3, [r7, #4]
}
 800553c:	bf00      	nop
 800553e:	e7fe      	b.n	800553e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005540:	4b09      	ldr	r3, [pc, #36]	; (8005568 <vPortExitCritical+0x4c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3b01      	subs	r3, #1
 8005546:	4a08      	ldr	r2, [pc, #32]	; (8005568 <vPortExitCritical+0x4c>)
 8005548:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800554a:	4b07      	ldr	r3, [pc, #28]	; (8005568 <vPortExitCritical+0x4c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d105      	bne.n	800555e <vPortExitCritical+0x42>
 8005552:	2300      	movs	r3, #0
 8005554:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800555c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	bc80      	pop	{r7}
 8005566:	4770      	bx	lr
 8005568:	20000018 	.word	0x20000018
 800556c:	00000000 	.word	0x00000000

08005570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005570:	f3ef 8009 	mrs	r0, PSP
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	4b0d      	ldr	r3, [pc, #52]	; (80055b0 <pxCurrentTCBConst>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005580:	6010      	str	r0, [r2, #0]
 8005582:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005586:	f04f 0050 	mov.w	r0, #80	; 0x50
 800558a:	f380 8811 	msr	BASEPRI, r0
 800558e:	f001 f923 	bl	80067d8 <vTaskSwitchContext>
 8005592:	f04f 0000 	mov.w	r0, #0
 8005596:	f380 8811 	msr	BASEPRI, r0
 800559a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800559e:	6819      	ldr	r1, [r3, #0]
 80055a0:	6808      	ldr	r0, [r1, #0]
 80055a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80055a6:	f380 8809 	msr	PSP, r0
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	4770      	bx	lr

080055b0 <pxCurrentTCBConst>:
 80055b0:	20001720 	.word	0x20001720
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop

080055b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	607b      	str	r3, [r7, #4]
}
 80055d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80055d2:	f001 f843 	bl	800665c <xTaskIncrementTick>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055dc:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <SysTick_Handler+0x40>)
 80055de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	2300      	movs	r3, #0
 80055e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	f383 8811 	msr	BASEPRI, r3
}
 80055ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80055f0:	bf00      	nop
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	e000ed04 	.word	0xe000ed04

080055fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005600:	4b0a      	ldr	r3, [pc, #40]	; (800562c <vPortSetupTimerInterrupt+0x30>)
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005606:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <vPortSetupTimerInterrupt+0x34>)
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800560c:	4b09      	ldr	r3, [pc, #36]	; (8005634 <vPortSetupTimerInterrupt+0x38>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a09      	ldr	r2, [pc, #36]	; (8005638 <vPortSetupTimerInterrupt+0x3c>)
 8005612:	fba2 2303 	umull	r2, r3, r2, r3
 8005616:	099b      	lsrs	r3, r3, #6
 8005618:	4a08      	ldr	r2, [pc, #32]	; (800563c <vPortSetupTimerInterrupt+0x40>)
 800561a:	3b01      	subs	r3, #1
 800561c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800561e:	4b03      	ldr	r3, [pc, #12]	; (800562c <vPortSetupTimerInterrupt+0x30>)
 8005620:	2207      	movs	r2, #7
 8005622:	601a      	str	r2, [r3, #0]
}
 8005624:	bf00      	nop
 8005626:	46bd      	mov	sp, r7
 8005628:	bc80      	pop	{r7}
 800562a:	4770      	bx	lr
 800562c:	e000e010 	.word	0xe000e010
 8005630:	e000e018 	.word	0xe000e018
 8005634:	2000000c 	.word	0x2000000c
 8005638:	10624dd3 	.word	0x10624dd3
 800563c:	e000e014 	.word	0xe000e014

08005640 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005646:	f3ef 8305 	mrs	r3, IPSR
 800564a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2b0f      	cmp	r3, #15
 8005650:	d914      	bls.n	800567c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005652:	4a16      	ldr	r2, [pc, #88]	; (80056ac <vPortValidateInterruptPriority+0x6c>)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4413      	add	r3, r2
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800565c:	4b14      	ldr	r3, [pc, #80]	; (80056b0 <vPortValidateInterruptPriority+0x70>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	7afa      	ldrb	r2, [r7, #11]
 8005662:	429a      	cmp	r2, r3
 8005664:	d20a      	bcs.n	800567c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566a:	f383 8811 	msr	BASEPRI, r3
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	607b      	str	r3, [r7, #4]
}
 8005678:	bf00      	nop
 800567a:	e7fe      	b.n	800567a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800567c:	4b0d      	ldr	r3, [pc, #52]	; (80056b4 <vPortValidateInterruptPriority+0x74>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005684:	4b0c      	ldr	r3, [pc, #48]	; (80056b8 <vPortValidateInterruptPriority+0x78>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	429a      	cmp	r2, r3
 800568a:	d90a      	bls.n	80056a2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	603b      	str	r3, [r7, #0]
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <vPortValidateInterruptPriority+0x60>
	}
 80056a2:	bf00      	nop
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr
 80056ac:	e000e3f0 	.word	0xe000e3f0
 80056b0:	200016d8 	.word	0x200016d8
 80056b4:	e000ed0c 	.word	0xe000ed0c
 80056b8:	200016dc 	.word	0x200016dc

080056bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10a      	bne.n	80056e6 <xQueueGenericReset+0x2a>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	60bb      	str	r3, [r7, #8]
}
 80056e2:	bf00      	nop
 80056e4:	e7fe      	b.n	80056e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80056e6:	f7ff fee9 	bl	80054bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f2:	68f9      	ldr	r1, [r7, #12]
 80056f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056f6:	fb01 f303 	mul.w	r3, r1, r3
 80056fa:	441a      	add	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005716:	3b01      	subs	r3, #1
 8005718:	68f9      	ldr	r1, [r7, #12]
 800571a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800571c:	fb01 f303 	mul.w	r3, r1, r3
 8005720:	441a      	add	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	22ff      	movs	r2, #255	; 0xff
 800572a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	22ff      	movs	r2, #255	; 0xff
 8005732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d114      	bne.n	8005766 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d01a      	beq.n	800577a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	3310      	adds	r3, #16
 8005748:	4618      	mov	r0, r3
 800574a:	f001 f8f1 	bl	8006930 <xTaskRemoveFromEventList>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d012      	beq.n	800577a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005754:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <xQueueGenericReset+0xcc>)
 8005756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	e009      	b.n	800577a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	3310      	adds	r3, #16
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff fd02 	bl	8005174 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3324      	adds	r3, #36	; 0x24
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff fcfd 	bl	8005174 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800577a:	f7ff fecf 	bl	800551c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800577e:	2301      	movs	r3, #1
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	e000ed04 	.word	0xe000ed04

0800578c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08e      	sub	sp, #56	; 0x38
 8005790:	af02      	add	r7, sp, #8
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10a      	bne.n	80057b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80057b2:	bf00      	nop
 80057b4:	e7fe      	b.n	80057b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10a      	bne.n	80057d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80057bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057ce:	bf00      	nop
 80057d0:	e7fe      	b.n	80057d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <xQueueGenericCreateStatic+0x52>
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <xQueueGenericCreateStatic+0x56>
 80057de:	2301      	movs	r3, #1
 80057e0:	e000      	b.n	80057e4 <xQueueGenericCreateStatic+0x58>
 80057e2:	2300      	movs	r3, #0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10a      	bne.n	80057fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80057e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ec:	f383 8811 	msr	BASEPRI, r3
 80057f0:	f3bf 8f6f 	isb	sy
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	623b      	str	r3, [r7, #32]
}
 80057fa:	bf00      	nop
 80057fc:	e7fe      	b.n	80057fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d102      	bne.n	800580a <xQueueGenericCreateStatic+0x7e>
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <xQueueGenericCreateStatic+0x82>
 800580a:	2301      	movs	r3, #1
 800580c:	e000      	b.n	8005810 <xQueueGenericCreateStatic+0x84>
 800580e:	2300      	movs	r3, #0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10a      	bne.n	800582a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	61fb      	str	r3, [r7, #28]
}
 8005826:	bf00      	nop
 8005828:	e7fe      	b.n	8005828 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800582a:	2350      	movs	r3, #80	; 0x50
 800582c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b50      	cmp	r3, #80	; 0x50
 8005832:	d00a      	beq.n	800584a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	61bb      	str	r3, [r7, #24]
}
 8005846:	bf00      	nop
 8005848:	e7fe      	b.n	8005848 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800584e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00d      	beq.n	8005870 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800585c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	4613      	mov	r3, r2
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	68b9      	ldr	r1, [r7, #8]
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f000 f805 	bl	800587a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005872:	4618      	mov	r0, r3
 8005874:	3730      	adds	r7, #48	; 0x30
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b084      	sub	sp, #16
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	607a      	str	r2, [r7, #4]
 8005886:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d103      	bne.n	8005896 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	e002      	b.n	800589c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058a8:	2101      	movs	r1, #1
 80058aa:	69b8      	ldr	r0, [r7, #24]
 80058ac:	f7ff ff06 	bl	80056bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	78fa      	ldrb	r2, [r7, #3]
 80058b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80058b8:	bf00      	nop
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b08e      	sub	sp, #56	; 0x38
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
 80058cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80058ce:	2300      	movs	r3, #0
 80058d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80058d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10a      	bne.n	80058f2 <xQueueGenericSend+0x32>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058ee:	bf00      	nop
 80058f0:	e7fe      	b.n	80058f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d103      	bne.n	8005900 <xQueueGenericSend+0x40>
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <xQueueGenericSend+0x44>
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <xQueueGenericSend+0x46>
 8005904:	2300      	movs	r3, #0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10a      	bne.n	8005920 <xQueueGenericSend+0x60>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800591c:	bf00      	nop
 800591e:	e7fe      	b.n	800591e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2b02      	cmp	r3, #2
 8005924:	d103      	bne.n	800592e <xQueueGenericSend+0x6e>
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <xQueueGenericSend+0x72>
 800592e:	2301      	movs	r3, #1
 8005930:	e000      	b.n	8005934 <xQueueGenericSend+0x74>
 8005932:	2300      	movs	r3, #0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10a      	bne.n	800594e <xQueueGenericSend+0x8e>
	__asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	623b      	str	r3, [r7, #32]
}
 800594a:	bf00      	nop
 800594c:	e7fe      	b.n	800594c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800594e:	f001 f9b1 	bl	8006cb4 <xTaskGetSchedulerState>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d102      	bne.n	800595e <xQueueGenericSend+0x9e>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <xQueueGenericSend+0xa2>
 800595e:	2301      	movs	r3, #1
 8005960:	e000      	b.n	8005964 <xQueueGenericSend+0xa4>
 8005962:	2300      	movs	r3, #0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10a      	bne.n	800597e <xQueueGenericSend+0xbe>
	__asm volatile
 8005968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596c:	f383 8811 	msr	BASEPRI, r3
 8005970:	f3bf 8f6f 	isb	sy
 8005974:	f3bf 8f4f 	dsb	sy
 8005978:	61fb      	str	r3, [r7, #28]
}
 800597a:	bf00      	nop
 800597c:	e7fe      	b.n	800597c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800597e:	f7ff fd9d 	bl	80054bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598a:	429a      	cmp	r2, r3
 800598c:	d302      	bcc.n	8005994 <xQueueGenericSend+0xd4>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b02      	cmp	r3, #2
 8005992:	d129      	bne.n	80059e8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	68b9      	ldr	r1, [r7, #8]
 8005998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800599a:	f000 fa07 	bl	8005dac <prvCopyDataToQueue>
 800599e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d010      	beq.n	80059ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059aa:	3324      	adds	r3, #36	; 0x24
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 ffbf 	bl	8006930 <xTaskRemoveFromEventList>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d013      	beq.n	80059e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80059b8:	4b3f      	ldr	r3, [pc, #252]	; (8005ab8 <xQueueGenericSend+0x1f8>)
 80059ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	e00a      	b.n	80059e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80059ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d007      	beq.n	80059e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80059d0:	4b39      	ldr	r3, [pc, #228]	; (8005ab8 <xQueueGenericSend+0x1f8>)
 80059d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80059e0:	f7ff fd9c 	bl	800551c <vPortExitCritical>
				return pdPASS;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e063      	b.n	8005ab0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d103      	bne.n	80059f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059ee:	f7ff fd95 	bl	800551c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80059f2:	2300      	movs	r3, #0
 80059f4:	e05c      	b.n	8005ab0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d106      	bne.n	8005a0a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059fc:	f107 0314 	add.w	r3, r7, #20
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 fff9 	bl	80069f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a06:	2301      	movs	r3, #1
 8005a08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a0a:	f7ff fd87 	bl	800551c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a0e:	f000 fd6b 	bl	80064e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a12:	f7ff fd53 	bl	80054bc <vPortEnterCritical>
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a1c:	b25b      	sxtb	r3, r3
 8005a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a22:	d103      	bne.n	8005a2c <xQueueGenericSend+0x16c>
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a32:	b25b      	sxtb	r3, r3
 8005a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a38:	d103      	bne.n	8005a42 <xQueueGenericSend+0x182>
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a42:	f7ff fd6b 	bl	800551c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a46:	1d3a      	adds	r2, r7, #4
 8005a48:	f107 0314 	add.w	r3, r7, #20
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 ffe8 	bl	8006a24 <xTaskCheckForTimeOut>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d124      	bne.n	8005aa4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a5c:	f000 fa9e 	bl	8005f9c <prvIsQueueFull>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d018      	beq.n	8005a98 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	3310      	adds	r3, #16
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 ff0e 	bl	8006890 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a76:	f000 fa29 	bl	8005ecc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a7a:	f000 fd43 	bl	8006504 <xTaskResumeAll>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f47f af7c 	bne.w	800597e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005a86:	4b0c      	ldr	r3, [pc, #48]	; (8005ab8 <xQueueGenericSend+0x1f8>)
 8005a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	e772      	b.n	800597e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a9a:	f000 fa17 	bl	8005ecc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a9e:	f000 fd31 	bl	8006504 <xTaskResumeAll>
 8005aa2:	e76c      	b.n	800597e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aa6:	f000 fa11 	bl	8005ecc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005aaa:	f000 fd2b 	bl	8006504 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005aae:	2300      	movs	r3, #0
		}
	}
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3738      	adds	r7, #56	; 0x38
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08e      	sub	sp, #56	; 0x38
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
 8005ac8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10a      	bne.n	8005aea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ae6:	bf00      	nop
 8005ae8:	e7fe      	b.n	8005ae8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d103      	bne.n	8005af8 <xQueueGenericSendFromISR+0x3c>
 8005af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <xQueueGenericSendFromISR+0x40>
 8005af8:	2301      	movs	r3, #1
 8005afa:	e000      	b.n	8005afe <xQueueGenericSendFromISR+0x42>
 8005afc:	2300      	movs	r3, #0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10a      	bne.n	8005b18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	623b      	str	r3, [r7, #32]
}
 8005b14:	bf00      	nop
 8005b16:	e7fe      	b.n	8005b16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d103      	bne.n	8005b26 <xQueueGenericSendFromISR+0x6a>
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d101      	bne.n	8005b2a <xQueueGenericSendFromISR+0x6e>
 8005b26:	2301      	movs	r3, #1
 8005b28:	e000      	b.n	8005b2c <xQueueGenericSendFromISR+0x70>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	61fb      	str	r3, [r7, #28]
}
 8005b42:	bf00      	nop
 8005b44:	e7fe      	b.n	8005b44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b46:	f7ff fd7b 	bl	8005640 <vPortValidateInterruptPriority>
	__asm volatile
 8005b4a:	f3ef 8211 	mrs	r2, BASEPRI
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	61ba      	str	r2, [r7, #24]
 8005b60:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005b62:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d302      	bcc.n	8005b78 <xQueueGenericSendFromISR+0xbc>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d12c      	bne.n	8005bd2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	68b9      	ldr	r1, [r7, #8]
 8005b86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b88:	f000 f910 	bl	8005dac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b8c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b94:	d112      	bne.n	8005bbc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d016      	beq.n	8005bcc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	3324      	adds	r3, #36	; 0x24
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fec4 	bl	8006930 <xTaskRemoveFromEventList>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00e      	beq.n	8005bcc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00b      	beq.n	8005bcc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	e007      	b.n	8005bcc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	b25a      	sxtb	r2, r3
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005bd0:	e001      	b.n	8005bd6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8005bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f383 8811 	msr	BASEPRI, r3
}
 8005be0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3738      	adds	r7, #56	; 0x38
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b08c      	sub	sp, #48	; 0x30
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10a      	bne.n	8005c1c <xQueueReceive+0x30>
	__asm volatile
 8005c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	623b      	str	r3, [r7, #32]
}
 8005c18:	bf00      	nop
 8005c1a:	e7fe      	b.n	8005c1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d103      	bne.n	8005c2a <xQueueReceive+0x3e>
 8005c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <xQueueReceive+0x42>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e000      	b.n	8005c30 <xQueueReceive+0x44>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10a      	bne.n	8005c4a <xQueueReceive+0x5e>
	__asm volatile
 8005c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	61fb      	str	r3, [r7, #28]
}
 8005c46:	bf00      	nop
 8005c48:	e7fe      	b.n	8005c48 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c4a:	f001 f833 	bl	8006cb4 <xTaskGetSchedulerState>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d102      	bne.n	8005c5a <xQueueReceive+0x6e>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <xQueueReceive+0x72>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <xQueueReceive+0x74>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10a      	bne.n	8005c7a <xQueueReceive+0x8e>
	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	61bb      	str	r3, [r7, #24]
}
 8005c76:	bf00      	nop
 8005c78:	e7fe      	b.n	8005c78 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c7a:	f7ff fc1f 	bl	80054bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d01f      	beq.n	8005cca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c8a:	68b9      	ldr	r1, [r7, #8]
 8005c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c8e:	f000 f8f7 	bl	8005e80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	1e5a      	subs	r2, r3, #1
 8005c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c98:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00f      	beq.n	8005cc2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca4:	3310      	adds	r3, #16
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 fe42 	bl	8006930 <xTaskRemoveFromEventList>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d007      	beq.n	8005cc2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005cb2:	4b3d      	ldr	r3, [pc, #244]	; (8005da8 <xQueueReceive+0x1bc>)
 8005cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005cc2:	f7ff fc2b 	bl	800551c <vPortExitCritical>
				return pdPASS;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e069      	b.n	8005d9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d103      	bne.n	8005cd8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cd0:	f7ff fc24 	bl	800551c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e062      	b.n	8005d9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cde:	f107 0310 	add.w	r3, r7, #16
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fe88 	bl	80069f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cec:	f7ff fc16 	bl	800551c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cf0:	f000 fbfa 	bl	80064e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cf4:	f7ff fbe2 	bl	80054bc <vPortEnterCritical>
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cfe:	b25b      	sxtb	r3, r3
 8005d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d04:	d103      	bne.n	8005d0e <xQueueReceive+0x122>
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d14:	b25b      	sxtb	r3, r3
 8005d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1a:	d103      	bne.n	8005d24 <xQueueReceive+0x138>
 8005d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d24:	f7ff fbfa 	bl	800551c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d28:	1d3a      	adds	r2, r7, #4
 8005d2a:	f107 0310 	add.w	r3, r7, #16
 8005d2e:	4611      	mov	r1, r2
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 fe77 	bl	8006a24 <xTaskCheckForTimeOut>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d123      	bne.n	8005d84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d3e:	f000 f917 	bl	8005f70 <prvIsQueueEmpty>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d017      	beq.n	8005d78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4a:	3324      	adds	r3, #36	; 0x24
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	4611      	mov	r1, r2
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 fd9d 	bl	8006890 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d58:	f000 f8b8 	bl	8005ecc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d5c:	f000 fbd2 	bl	8006504 <xTaskResumeAll>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d189      	bne.n	8005c7a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005d66:	4b10      	ldr	r3, [pc, #64]	; (8005da8 <xQueueReceive+0x1bc>)
 8005d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	e780      	b.n	8005c7a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d7a:	f000 f8a7 	bl	8005ecc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d7e:	f000 fbc1 	bl	8006504 <xTaskResumeAll>
 8005d82:	e77a      	b.n	8005c7a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d86:	f000 f8a1 	bl	8005ecc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d8a:	f000 fbbb 	bl	8006504 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d90:	f000 f8ee 	bl	8005f70 <prvIsQueueEmpty>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f43f af6f 	beq.w	8005c7a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3730      	adds	r7, #48	; 0x30
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	e000ed04 	.word	0xe000ed04

08005dac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005db8:	2300      	movs	r3, #0
 8005dba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10d      	bne.n	8005de6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d14d      	bne.n	8005e6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 ff8a 	bl	8006cf0 <xTaskPriorityDisinherit>
 8005ddc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	605a      	str	r2, [r3, #4]
 8005de4:	e043      	b.n	8005e6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d119      	bne.n	8005e20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6898      	ldr	r0, [r3, #8]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df4:	461a      	mov	r2, r3
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	f001 fba2 	bl	8007540 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e04:	441a      	add	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d32b      	bcc.n	8005e6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	609a      	str	r2, [r3, #8]
 8005e1e:	e026      	b.n	8005e6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	68d8      	ldr	r0, [r3, #12]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e28:	461a      	mov	r2, r3
 8005e2a:	68b9      	ldr	r1, [r7, #8]
 8005e2c:	f001 fb88 	bl	8007540 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	68da      	ldr	r2, [r3, #12]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e38:	425b      	negs	r3, r3
 8005e3a:	441a      	add	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	68da      	ldr	r2, [r3, #12]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d207      	bcs.n	8005e5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e54:	425b      	negs	r3, r3
 8005e56:	441a      	add	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d105      	bne.n	8005e6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e76:	697b      	ldr	r3, [r7, #20]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d018      	beq.n	8005ec4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	441a      	add	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d303      	bcc.n	8005eb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68d9      	ldr	r1, [r3, #12]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	6838      	ldr	r0, [r7, #0]
 8005ec0:	f001 fb3e 	bl	8007540 <memcpy>
	}
}
 8005ec4:	bf00      	nop
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ed4:	f7ff faf2 	bl	80054bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ede:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ee0:	e011      	b.n	8005f06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d012      	beq.n	8005f10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	3324      	adds	r3, #36	; 0x24
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 fd1e 	bl	8006930 <xTaskRemoveFromEventList>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005efa:	f000 fdf5 	bl	8006ae8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	dce9      	bgt.n	8005ee2 <prvUnlockQueue+0x16>
 8005f0e:	e000      	b.n	8005f12 <prvUnlockQueue+0x46>
					break;
 8005f10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	22ff      	movs	r2, #255	; 0xff
 8005f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005f1a:	f7ff faff 	bl	800551c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f1e:	f7ff facd 	bl	80054bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f2a:	e011      	b.n	8005f50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d012      	beq.n	8005f5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3310      	adds	r3, #16
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 fcf9 	bl	8006930 <xTaskRemoveFromEventList>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f44:	f000 fdd0 	bl	8006ae8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f48:	7bbb      	ldrb	r3, [r7, #14]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	dce9      	bgt.n	8005f2c <prvUnlockQueue+0x60>
 8005f58:	e000      	b.n	8005f5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	22ff      	movs	r2, #255	; 0xff
 8005f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005f64:	f7ff fada 	bl	800551c <vPortExitCritical>
}
 8005f68:	bf00      	nop
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f78:	f7ff faa0 	bl	80054bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d102      	bne.n	8005f8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f84:	2301      	movs	r3, #1
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	e001      	b.n	8005f8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f8e:	f7ff fac5 	bl	800551c <vPortExitCritical>

	return xReturn;
 8005f92:	68fb      	ldr	r3, [r7, #12]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fa4:	f7ff fa8a 	bl	80054bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d102      	bne.n	8005fba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	e001      	b.n	8005fbe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fbe:	f7ff faad 	bl	800551c <vPortExitCritical>

	return xReturn;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	e014      	b.n	8006006 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005fdc:	4a0e      	ldr	r2, [pc, #56]	; (8006018 <vQueueAddToRegistry+0x4c>)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10b      	bne.n	8006000 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005fe8:	490b      	ldr	r1, [pc, #44]	; (8006018 <vQueueAddToRegistry+0x4c>)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005ff2:	4a09      	ldr	r2, [pc, #36]	; (8006018 <vQueueAddToRegistry+0x4c>)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	4413      	add	r3, r2
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005ffe:	e006      	b.n	800600e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	3301      	adds	r3, #1
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2b07      	cmp	r3, #7
 800600a:	d9e7      	bls.n	8005fdc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800600c:	bf00      	nop
 800600e:	bf00      	nop
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	bc80      	pop	{r7}
 8006016:	4770      	bx	lr
 8006018:	200016e0 	.word	0x200016e0

0800601c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800602c:	f7ff fa46 	bl	80054bc <vPortEnterCritical>
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006036:	b25b      	sxtb	r3, r3
 8006038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603c:	d103      	bne.n	8006046 <vQueueWaitForMessageRestricted+0x2a>
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800604c:	b25b      	sxtb	r3, r3
 800604e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006052:	d103      	bne.n	800605c <vQueueWaitForMessageRestricted+0x40>
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800605c:	f7ff fa5e 	bl	800551c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006064:	2b00      	cmp	r3, #0
 8006066:	d106      	bne.n	8006076 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	3324      	adds	r3, #36	; 0x24
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	68b9      	ldr	r1, [r7, #8]
 8006070:	4618      	mov	r0, r3
 8006072:	f000 fc31 	bl	80068d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006076:	6978      	ldr	r0, [r7, #20]
 8006078:	f7ff ff28 	bl	8005ecc <prvUnlockQueue>
	}
 800607c:	bf00      	nop
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006084:	b580      	push	{r7, lr}
 8006086:	b08e      	sub	sp, #56	; 0x38
 8006088:	af04      	add	r7, sp, #16
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
 8006090:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10a      	bne.n	80060ae <xTaskCreateStatic+0x2a>
	__asm volatile
 8006098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609c:	f383 8811 	msr	BASEPRI, r3
 80060a0:	f3bf 8f6f 	isb	sy
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	623b      	str	r3, [r7, #32]
}
 80060aa:	bf00      	nop
 80060ac:	e7fe      	b.n	80060ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80060ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10a      	bne.n	80060ca <xTaskCreateStatic+0x46>
	__asm volatile
 80060b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b8:	f383 8811 	msr	BASEPRI, r3
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	61fb      	str	r3, [r7, #28]
}
 80060c6:	bf00      	nop
 80060c8:	e7fe      	b.n	80060c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060ca:	235c      	movs	r3, #92	; 0x5c
 80060cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	2b5c      	cmp	r3, #92	; 0x5c
 80060d2:	d00a      	beq.n	80060ea <xTaskCreateStatic+0x66>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	61bb      	str	r3, [r7, #24]
}
 80060e6:	bf00      	nop
 80060e8:	e7fe      	b.n	80060e8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d01e      	beq.n	800612e <xTaskCreateStatic+0xaa>
 80060f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d01b      	beq.n	800612e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	2202      	movs	r2, #2
 8006104:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006108:	2300      	movs	r3, #0
 800610a:	9303      	str	r3, [sp, #12]
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	9302      	str	r3, [sp, #8]
 8006110:	f107 0314 	add.w	r3, r7, #20
 8006114:	9301      	str	r3, [sp, #4]
 8006116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	68b9      	ldr	r1, [r7, #8]
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 f850 	bl	80061c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006126:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006128:	f000 f8d4 	bl	80062d4 <prvAddNewTaskToReadyList>
 800612c:	e001      	b.n	8006132 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006132:	697b      	ldr	r3, [r7, #20]
	}
 8006134:	4618      	mov	r0, r3
 8006136:	3728      	adds	r7, #40	; 0x28
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08c      	sub	sp, #48	; 0x30
 8006140:	af04      	add	r7, sp, #16
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	4613      	mov	r3, r2
 800614a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800614c:	88fb      	ldrh	r3, [r7, #6]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4618      	mov	r0, r3
 8006152:	f7fe fe37 	bl	8004dc4 <pvPortMalloc>
 8006156:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00e      	beq.n	800617c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800615e:	205c      	movs	r0, #92	; 0x5c
 8006160:	f7fe fe30 	bl	8004dc4 <pvPortMalloc>
 8006164:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	631a      	str	r2, [r3, #48]	; 0x30
 8006172:	e005      	b.n	8006180 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006174:	6978      	ldr	r0, [r7, #20]
 8006176:	f7fe fee9 	bl	8004f4c <vPortFree>
 800617a:	e001      	b.n	8006180 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800617c:	2300      	movs	r3, #0
 800617e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d017      	beq.n	80061b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800618e:	88fa      	ldrh	r2, [r7, #6]
 8006190:	2300      	movs	r3, #0
 8006192:	9303      	str	r3, [sp, #12]
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	9302      	str	r3, [sp, #8]
 8006198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619a:	9301      	str	r3, [sp, #4]
 800619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	68b9      	ldr	r1, [r7, #8]
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 f80e 	bl	80061c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061aa:	69f8      	ldr	r0, [r7, #28]
 80061ac:	f000 f892 	bl	80062d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061b0:	2301      	movs	r3, #1
 80061b2:	61bb      	str	r3, [r7, #24]
 80061b4:	e002      	b.n	80061bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061b6:	f04f 33ff 	mov.w	r3, #4294967295
 80061ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061bc:	69bb      	ldr	r3, [r7, #24]
	}
 80061be:	4618      	mov	r0, r3
 80061c0:	3720      	adds	r7, #32
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b088      	sub	sp, #32
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	60f8      	str	r0, [r7, #12]
 80061ce:	60b9      	str	r1, [r7, #8]
 80061d0:	607a      	str	r2, [r7, #4]
 80061d2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	461a      	mov	r2, r3
 80061de:	21a5      	movs	r1, #165	; 0xa5
 80061e0:	f001 f97a 	bl	80074d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80061ee:	3b01      	subs	r3, #1
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	f023 0307 	bic.w	r3, r3, #7
 80061fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	f003 0307 	and.w	r3, r3, #7
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00a      	beq.n	800621e <prvInitialiseNewTask+0x58>
	__asm volatile
 8006208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	617b      	str	r3, [r7, #20]
}
 800621a:	bf00      	nop
 800621c:	e7fe      	b.n	800621c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800621e:	2300      	movs	r3, #0
 8006220:	61fb      	str	r3, [r7, #28]
 8006222:	e012      	b.n	800624a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	4413      	add	r3, r2
 800622a:	7819      	ldrb	r1, [r3, #0]
 800622c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	4413      	add	r3, r2
 8006232:	3334      	adds	r3, #52	; 0x34
 8006234:	460a      	mov	r2, r1
 8006236:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	4413      	add	r3, r2
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d006      	beq.n	8006252 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	3301      	adds	r3, #1
 8006248:	61fb      	str	r3, [r7, #28]
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	2b0f      	cmp	r3, #15
 800624e:	d9e9      	bls.n	8006224 <prvInitialiseNewTask+0x5e>
 8006250:	e000      	b.n	8006254 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006252:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800625c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625e:	2b37      	cmp	r3, #55	; 0x37
 8006260:	d901      	bls.n	8006266 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006262:	2337      	movs	r3, #55	; 0x37
 8006264:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800626a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800626c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006270:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	2200      	movs	r2, #0
 8006276:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627a:	3304      	adds	r3, #4
 800627c:	4618      	mov	r0, r3
 800627e:	f7fe ff98 	bl	80051b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006284:	3318      	adds	r3, #24
 8006286:	4618      	mov	r0, r3
 8006288:	f7fe ff93 	bl	80051b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006290:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062a0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a4:	2200      	movs	r2, #0
 80062a6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	68f9      	ldr	r1, [r7, #12]
 80062b4:	69b8      	ldr	r0, [r7, #24]
 80062b6:	f7ff f80d 	bl	80052d4 <pxPortInitialiseStack>
 80062ba:	4602      	mov	r2, r0
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80062c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d002      	beq.n	80062cc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062cc:	bf00      	nop
 80062ce:	3720      	adds	r7, #32
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062dc:	f7ff f8ee 	bl	80054bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062e0:	4b2d      	ldr	r3, [pc, #180]	; (8006398 <prvAddNewTaskToReadyList+0xc4>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3301      	adds	r3, #1
 80062e6:	4a2c      	ldr	r2, [pc, #176]	; (8006398 <prvAddNewTaskToReadyList+0xc4>)
 80062e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062ea:	4b2c      	ldr	r3, [pc, #176]	; (800639c <prvAddNewTaskToReadyList+0xc8>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d109      	bne.n	8006306 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062f2:	4a2a      	ldr	r2, [pc, #168]	; (800639c <prvAddNewTaskToReadyList+0xc8>)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062f8:	4b27      	ldr	r3, [pc, #156]	; (8006398 <prvAddNewTaskToReadyList+0xc4>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d110      	bne.n	8006322 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006300:	f000 fc16 	bl	8006b30 <prvInitialiseTaskLists>
 8006304:	e00d      	b.n	8006322 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006306:	4b26      	ldr	r3, [pc, #152]	; (80063a0 <prvAddNewTaskToReadyList+0xcc>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d109      	bne.n	8006322 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800630e:	4b23      	ldr	r3, [pc, #140]	; (800639c <prvAddNewTaskToReadyList+0xc8>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006318:	429a      	cmp	r2, r3
 800631a:	d802      	bhi.n	8006322 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800631c:	4a1f      	ldr	r2, [pc, #124]	; (800639c <prvAddNewTaskToReadyList+0xc8>)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006322:	4b20      	ldr	r3, [pc, #128]	; (80063a4 <prvAddNewTaskToReadyList+0xd0>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3301      	adds	r3, #1
 8006328:	4a1e      	ldr	r2, [pc, #120]	; (80063a4 <prvAddNewTaskToReadyList+0xd0>)
 800632a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800632c:	4b1d      	ldr	r3, [pc, #116]	; (80063a4 <prvAddNewTaskToReadyList+0xd0>)
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006338:	4b1b      	ldr	r3, [pc, #108]	; (80063a8 <prvAddNewTaskToReadyList+0xd4>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	429a      	cmp	r2, r3
 800633e:	d903      	bls.n	8006348 <prvAddNewTaskToReadyList+0x74>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	4a18      	ldr	r2, [pc, #96]	; (80063a8 <prvAddNewTaskToReadyList+0xd4>)
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800634c:	4613      	mov	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4413      	add	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4a15      	ldr	r2, [pc, #84]	; (80063ac <prvAddNewTaskToReadyList+0xd8>)
 8006356:	441a      	add	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3304      	adds	r3, #4
 800635c:	4619      	mov	r1, r3
 800635e:	4610      	mov	r0, r2
 8006360:	f7fe ff33 	bl	80051ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006364:	f7ff f8da 	bl	800551c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006368:	4b0d      	ldr	r3, [pc, #52]	; (80063a0 <prvAddNewTaskToReadyList+0xcc>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00e      	beq.n	800638e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006370:	4b0a      	ldr	r3, [pc, #40]	; (800639c <prvAddNewTaskToReadyList+0xc8>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637a:	429a      	cmp	r2, r3
 800637c:	d207      	bcs.n	800638e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800637e:	4b0c      	ldr	r3, [pc, #48]	; (80063b0 <prvAddNewTaskToReadyList+0xdc>)
 8006380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800638e:	bf00      	nop
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20001bf4 	.word	0x20001bf4
 800639c:	20001720 	.word	0x20001720
 80063a0:	20001c00 	.word	0x20001c00
 80063a4:	20001c10 	.word	0x20001c10
 80063a8:	20001bfc 	.word	0x20001bfc
 80063ac:	20001724 	.word	0x20001724
 80063b0:	e000ed04 	.word	0xe000ed04

080063b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80063bc:	2300      	movs	r3, #0
 80063be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d017      	beq.n	80063f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063c6:	4b13      	ldr	r3, [pc, #76]	; (8006414 <vTaskDelay+0x60>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <vTaskDelay+0x30>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	60bb      	str	r3, [r7, #8]
}
 80063e0:	bf00      	nop
 80063e2:	e7fe      	b.n	80063e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80063e4:	f000 f880 	bl	80064e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063e8:	2100      	movs	r1, #0
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fcee 	bl	8006dcc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80063f0:	f000 f888 	bl	8006504 <xTaskResumeAll>
 80063f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d107      	bne.n	800640c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80063fc:	4b06      	ldr	r3, [pc, #24]	; (8006418 <vTaskDelay+0x64>)
 80063fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800640c:	bf00      	nop
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	20001c1c 	.word	0x20001c1c
 8006418:	e000ed04 	.word	0xe000ed04

0800641c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b08a      	sub	sp, #40	; 0x28
 8006420:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006422:	2300      	movs	r3, #0
 8006424:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006426:	2300      	movs	r3, #0
 8006428:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800642a:	463a      	mov	r2, r7
 800642c:	1d39      	adds	r1, r7, #4
 800642e:	f107 0308 	add.w	r3, r7, #8
 8006432:	4618      	mov	r0, r3
 8006434:	f7fe fc94 	bl	8004d60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	9202      	str	r2, [sp, #8]
 8006440:	9301      	str	r3, [sp, #4]
 8006442:	2300      	movs	r3, #0
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	2300      	movs	r3, #0
 8006448:	460a      	mov	r2, r1
 800644a:	4921      	ldr	r1, [pc, #132]	; (80064d0 <vTaskStartScheduler+0xb4>)
 800644c:	4821      	ldr	r0, [pc, #132]	; (80064d4 <vTaskStartScheduler+0xb8>)
 800644e:	f7ff fe19 	bl	8006084 <xTaskCreateStatic>
 8006452:	4603      	mov	r3, r0
 8006454:	4a20      	ldr	r2, [pc, #128]	; (80064d8 <vTaskStartScheduler+0xbc>)
 8006456:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006458:	4b1f      	ldr	r3, [pc, #124]	; (80064d8 <vTaskStartScheduler+0xbc>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006460:	2301      	movs	r3, #1
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	e001      	b.n	800646a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006466:	2300      	movs	r3, #0
 8006468:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d102      	bne.n	8006476 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006470:	f000 fd00 	bl	8006e74 <xTimerCreateTimerTask>
 8006474:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d116      	bne.n	80064aa <vTaskStartScheduler+0x8e>
	__asm volatile
 800647c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006480:	f383 8811 	msr	BASEPRI, r3
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	613b      	str	r3, [r7, #16]
}
 800648e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006490:	4b12      	ldr	r3, [pc, #72]	; (80064dc <vTaskStartScheduler+0xc0>)
 8006492:	f04f 32ff 	mov.w	r2, #4294967295
 8006496:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006498:	4b11      	ldr	r3, [pc, #68]	; (80064e0 <vTaskStartScheduler+0xc4>)
 800649a:	2201      	movs	r2, #1
 800649c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800649e:	4b11      	ldr	r3, [pc, #68]	; (80064e4 <vTaskStartScheduler+0xc8>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80064a4:	f7fe ff98 	bl	80053d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064a8:	e00e      	b.n	80064c8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b0:	d10a      	bne.n	80064c8 <vTaskStartScheduler+0xac>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	60fb      	str	r3, [r7, #12]
}
 80064c4:	bf00      	nop
 80064c6:	e7fe      	b.n	80064c6 <vTaskStartScheduler+0xaa>
}
 80064c8:	bf00      	nop
 80064ca:	3718      	adds	r7, #24
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	08007e38 	.word	0x08007e38
 80064d4:	08006b01 	.word	0x08006b01
 80064d8:	20001c18 	.word	0x20001c18
 80064dc:	20001c14 	.word	0x20001c14
 80064e0:	20001c00 	.word	0x20001c00
 80064e4:	20001bf8 	.word	0x20001bf8

080064e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80064e8:	b480      	push	{r7}
 80064ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80064ec:	4b04      	ldr	r3, [pc, #16]	; (8006500 <vTaskSuspendAll+0x18>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	3301      	adds	r3, #1
 80064f2:	4a03      	ldr	r2, [pc, #12]	; (8006500 <vTaskSuspendAll+0x18>)
 80064f4:	6013      	str	r3, [r2, #0]
}
 80064f6:	bf00      	nop
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bc80      	pop	{r7}
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	20001c1c 	.word	0x20001c1c

08006504 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800650a:	2300      	movs	r3, #0
 800650c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800650e:	2300      	movs	r3, #0
 8006510:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006512:	4b42      	ldr	r3, [pc, #264]	; (800661c <xTaskResumeAll+0x118>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10a      	bne.n	8006530 <xTaskResumeAll+0x2c>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	603b      	str	r3, [r7, #0]
}
 800652c:	bf00      	nop
 800652e:	e7fe      	b.n	800652e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006530:	f7fe ffc4 	bl	80054bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006534:	4b39      	ldr	r3, [pc, #228]	; (800661c <xTaskResumeAll+0x118>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	3b01      	subs	r3, #1
 800653a:	4a38      	ldr	r2, [pc, #224]	; (800661c <xTaskResumeAll+0x118>)
 800653c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800653e:	4b37      	ldr	r3, [pc, #220]	; (800661c <xTaskResumeAll+0x118>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d162      	bne.n	800660c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006546:	4b36      	ldr	r3, [pc, #216]	; (8006620 <xTaskResumeAll+0x11c>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d05e      	beq.n	800660c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800654e:	e02f      	b.n	80065b0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006550:	4b34      	ldr	r3, [pc, #208]	; (8006624 <xTaskResumeAll+0x120>)
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3318      	adds	r3, #24
 800655c:	4618      	mov	r0, r3
 800655e:	f7fe fe8f 	bl	8005280 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3304      	adds	r3, #4
 8006566:	4618      	mov	r0, r3
 8006568:	f7fe fe8a 	bl	8005280 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006570:	4b2d      	ldr	r3, [pc, #180]	; (8006628 <xTaskResumeAll+0x124>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d903      	bls.n	8006580 <xTaskResumeAll+0x7c>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657c:	4a2a      	ldr	r2, [pc, #168]	; (8006628 <xTaskResumeAll+0x124>)
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4a27      	ldr	r2, [pc, #156]	; (800662c <xTaskResumeAll+0x128>)
 800658e:	441a      	add	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3304      	adds	r3, #4
 8006594:	4619      	mov	r1, r3
 8006596:	4610      	mov	r0, r2
 8006598:	f7fe fe17 	bl	80051ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a0:	4b23      	ldr	r3, [pc, #140]	; (8006630 <xTaskResumeAll+0x12c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d302      	bcc.n	80065b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80065aa:	4b22      	ldr	r3, [pc, #136]	; (8006634 <xTaskResumeAll+0x130>)
 80065ac:	2201      	movs	r2, #1
 80065ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065b0:	4b1c      	ldr	r3, [pc, #112]	; (8006624 <xTaskResumeAll+0x120>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1cb      	bne.n	8006550 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065be:	f000 fb55 	bl	8006c6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80065c2:	4b1d      	ldr	r3, [pc, #116]	; (8006638 <xTaskResumeAll+0x134>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d010      	beq.n	80065f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80065ce:	f000 f845 	bl	800665c <xTaskIncrementTick>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80065d8:	4b16      	ldr	r3, [pc, #88]	; (8006634 <xTaskResumeAll+0x130>)
 80065da:	2201      	movs	r2, #1
 80065dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1f1      	bne.n	80065ce <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80065ea:	4b13      	ldr	r3, [pc, #76]	; (8006638 <xTaskResumeAll+0x134>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80065f0:	4b10      	ldr	r3, [pc, #64]	; (8006634 <xTaskResumeAll+0x130>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d009      	beq.n	800660c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80065f8:	2301      	movs	r3, #1
 80065fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80065fc:	4b0f      	ldr	r3, [pc, #60]	; (800663c <xTaskResumeAll+0x138>)
 80065fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800660c:	f7fe ff86 	bl	800551c <vPortExitCritical>

	return xAlreadyYielded;
 8006610:	68bb      	ldr	r3, [r7, #8]
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	20001c1c 	.word	0x20001c1c
 8006620:	20001bf4 	.word	0x20001bf4
 8006624:	20001bb4 	.word	0x20001bb4
 8006628:	20001bfc 	.word	0x20001bfc
 800662c:	20001724 	.word	0x20001724
 8006630:	20001720 	.word	0x20001720
 8006634:	20001c08 	.word	0x20001c08
 8006638:	20001c04 	.word	0x20001c04
 800663c:	e000ed04 	.word	0xe000ed04

08006640 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006646:	4b04      	ldr	r3, [pc, #16]	; (8006658 <xTaskGetTickCount+0x18>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800664c:	687b      	ldr	r3, [r7, #4]
}
 800664e:	4618      	mov	r0, r3
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	bc80      	pop	{r7}
 8006656:	4770      	bx	lr
 8006658:	20001bf8 	.word	0x20001bf8

0800665c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006662:	2300      	movs	r3, #0
 8006664:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006666:	4b51      	ldr	r3, [pc, #324]	; (80067ac <xTaskIncrementTick+0x150>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	f040 808e 	bne.w	800678c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006670:	4b4f      	ldr	r3, [pc, #316]	; (80067b0 <xTaskIncrementTick+0x154>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3301      	adds	r3, #1
 8006676:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006678:	4a4d      	ldr	r2, [pc, #308]	; (80067b0 <xTaskIncrementTick+0x154>)
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d120      	bne.n	80066c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006684:	4b4b      	ldr	r3, [pc, #300]	; (80067b4 <xTaskIncrementTick+0x158>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00a      	beq.n	80066a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	603b      	str	r3, [r7, #0]
}
 80066a0:	bf00      	nop
 80066a2:	e7fe      	b.n	80066a2 <xTaskIncrementTick+0x46>
 80066a4:	4b43      	ldr	r3, [pc, #268]	; (80067b4 <xTaskIncrementTick+0x158>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	60fb      	str	r3, [r7, #12]
 80066aa:	4b43      	ldr	r3, [pc, #268]	; (80067b8 <xTaskIncrementTick+0x15c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a41      	ldr	r2, [pc, #260]	; (80067b4 <xTaskIncrementTick+0x158>)
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	4a41      	ldr	r2, [pc, #260]	; (80067b8 <xTaskIncrementTick+0x15c>)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	4b40      	ldr	r3, [pc, #256]	; (80067bc <xTaskIncrementTick+0x160>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	3301      	adds	r3, #1
 80066be:	4a3f      	ldr	r2, [pc, #252]	; (80067bc <xTaskIncrementTick+0x160>)
 80066c0:	6013      	str	r3, [r2, #0]
 80066c2:	f000 fad3 	bl	8006c6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80066c6:	4b3e      	ldr	r3, [pc, #248]	; (80067c0 <xTaskIncrementTick+0x164>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d34e      	bcc.n	800676e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066d0:	4b38      	ldr	r3, [pc, #224]	; (80067b4 <xTaskIncrementTick+0x158>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <xTaskIncrementTick+0x82>
 80066da:	2301      	movs	r3, #1
 80066dc:	e000      	b.n	80066e0 <xTaskIncrementTick+0x84>
 80066de:	2300      	movs	r3, #0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d004      	beq.n	80066ee <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066e4:	4b36      	ldr	r3, [pc, #216]	; (80067c0 <xTaskIncrementTick+0x164>)
 80066e6:	f04f 32ff 	mov.w	r2, #4294967295
 80066ea:	601a      	str	r2, [r3, #0]
					break;
 80066ec:	e03f      	b.n	800676e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80066ee:	4b31      	ldr	r3, [pc, #196]	; (80067b4 <xTaskIncrementTick+0x158>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	429a      	cmp	r2, r3
 8006704:	d203      	bcs.n	800670e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006706:	4a2e      	ldr	r2, [pc, #184]	; (80067c0 <xTaskIncrementTick+0x164>)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6013      	str	r3, [r2, #0]
						break;
 800670c:	e02f      	b.n	800676e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	3304      	adds	r3, #4
 8006712:	4618      	mov	r0, r3
 8006714:	f7fe fdb4 	bl	8005280 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671c:	2b00      	cmp	r3, #0
 800671e:	d004      	beq.n	800672a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	3318      	adds	r3, #24
 8006724:	4618      	mov	r0, r3
 8006726:	f7fe fdab 	bl	8005280 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800672e:	4b25      	ldr	r3, [pc, #148]	; (80067c4 <xTaskIncrementTick+0x168>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	429a      	cmp	r2, r3
 8006734:	d903      	bls.n	800673e <xTaskIncrementTick+0xe2>
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673a:	4a22      	ldr	r2, [pc, #136]	; (80067c4 <xTaskIncrementTick+0x168>)
 800673c:	6013      	str	r3, [r2, #0]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006742:	4613      	mov	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4413      	add	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4a1f      	ldr	r2, [pc, #124]	; (80067c8 <xTaskIncrementTick+0x16c>)
 800674c:	441a      	add	r2, r3
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	3304      	adds	r3, #4
 8006752:	4619      	mov	r1, r3
 8006754:	4610      	mov	r0, r2
 8006756:	f7fe fd38 	bl	80051ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675e:	4b1b      	ldr	r3, [pc, #108]	; (80067cc <xTaskIncrementTick+0x170>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	429a      	cmp	r2, r3
 8006766:	d3b3      	bcc.n	80066d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006768:	2301      	movs	r3, #1
 800676a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800676c:	e7b0      	b.n	80066d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800676e:	4b17      	ldr	r3, [pc, #92]	; (80067cc <xTaskIncrementTick+0x170>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006774:	4914      	ldr	r1, [pc, #80]	; (80067c8 <xTaskIncrementTick+0x16c>)
 8006776:	4613      	mov	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	440b      	add	r3, r1
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d907      	bls.n	8006796 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006786:	2301      	movs	r3, #1
 8006788:	617b      	str	r3, [r7, #20]
 800678a:	e004      	b.n	8006796 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800678c:	4b10      	ldr	r3, [pc, #64]	; (80067d0 <xTaskIncrementTick+0x174>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3301      	adds	r3, #1
 8006792:	4a0f      	ldr	r2, [pc, #60]	; (80067d0 <xTaskIncrementTick+0x174>)
 8006794:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006796:	4b0f      	ldr	r3, [pc, #60]	; (80067d4 <xTaskIncrementTick+0x178>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800679e:	2301      	movs	r3, #1
 80067a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80067a2:	697b      	ldr	r3, [r7, #20]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	20001c1c 	.word	0x20001c1c
 80067b0:	20001bf8 	.word	0x20001bf8
 80067b4:	20001bac 	.word	0x20001bac
 80067b8:	20001bb0 	.word	0x20001bb0
 80067bc:	20001c0c 	.word	0x20001c0c
 80067c0:	20001c14 	.word	0x20001c14
 80067c4:	20001bfc 	.word	0x20001bfc
 80067c8:	20001724 	.word	0x20001724
 80067cc:	20001720 	.word	0x20001720
 80067d0:	20001c04 	.word	0x20001c04
 80067d4:	20001c08 	.word	0x20001c08

080067d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067de:	4b27      	ldr	r3, [pc, #156]	; (800687c <vTaskSwitchContext+0xa4>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80067e6:	4b26      	ldr	r3, [pc, #152]	; (8006880 <vTaskSwitchContext+0xa8>)
 80067e8:	2201      	movs	r2, #1
 80067ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80067ec:	e041      	b.n	8006872 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80067ee:	4b24      	ldr	r3, [pc, #144]	; (8006880 <vTaskSwitchContext+0xa8>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80067f4:	4b23      	ldr	r3, [pc, #140]	; (8006884 <vTaskSwitchContext+0xac>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	e010      	b.n	800681e <vTaskSwitchContext+0x46>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10a      	bne.n	8006818 <vTaskSwitchContext+0x40>
	__asm volatile
 8006802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006806:	f383 8811 	msr	BASEPRI, r3
 800680a:	f3bf 8f6f 	isb	sy
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	607b      	str	r3, [r7, #4]
}
 8006814:	bf00      	nop
 8006816:	e7fe      	b.n	8006816 <vTaskSwitchContext+0x3e>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3b01      	subs	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	491a      	ldr	r1, [pc, #104]	; (8006888 <vTaskSwitchContext+0xb0>)
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4613      	mov	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	440b      	add	r3, r1
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d0e4      	beq.n	80067fc <vTaskSwitchContext+0x24>
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	4613      	mov	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4413      	add	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4a12      	ldr	r2, [pc, #72]	; (8006888 <vTaskSwitchContext+0xb0>)
 800683e:	4413      	add	r3, r2
 8006840:	60bb      	str	r3, [r7, #8]
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	685a      	ldr	r2, [r3, #4]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	605a      	str	r2, [r3, #4]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	3308      	adds	r3, #8
 8006854:	429a      	cmp	r2, r3
 8006856:	d104      	bne.n	8006862 <vTaskSwitchContext+0x8a>
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	605a      	str	r2, [r3, #4]
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	4a08      	ldr	r2, [pc, #32]	; (800688c <vTaskSwitchContext+0xb4>)
 800686a:	6013      	str	r3, [r2, #0]
 800686c:	4a05      	ldr	r2, [pc, #20]	; (8006884 <vTaskSwitchContext+0xac>)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6013      	str	r3, [r2, #0]
}
 8006872:	bf00      	nop
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	bc80      	pop	{r7}
 800687a:	4770      	bx	lr
 800687c:	20001c1c 	.word	0x20001c1c
 8006880:	20001c08 	.word	0x20001c08
 8006884:	20001bfc 	.word	0x20001bfc
 8006888:	20001724 	.word	0x20001724
 800688c:	20001720 	.word	0x20001720

08006890 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10a      	bne.n	80068b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80068a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	60fb      	str	r3, [r7, #12]
}
 80068b2:	bf00      	nop
 80068b4:	e7fe      	b.n	80068b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068b6:	4b07      	ldr	r3, [pc, #28]	; (80068d4 <vTaskPlaceOnEventList+0x44>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	3318      	adds	r3, #24
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7fe fca6 	bl	8005210 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068c4:	2101      	movs	r1, #1
 80068c6:	6838      	ldr	r0, [r7, #0]
 80068c8:	f000 fa80 	bl	8006dcc <prvAddCurrentTaskToDelayedList>
}
 80068cc:	bf00      	nop
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	20001720 	.word	0x20001720

080068d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10a      	bne.n	8006900 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80068ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	617b      	str	r3, [r7, #20]
}
 80068fc:	bf00      	nop
 80068fe:	e7fe      	b.n	80068fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006900:	4b0a      	ldr	r3, [pc, #40]	; (800692c <vTaskPlaceOnEventListRestricted+0x54>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	3318      	adds	r3, #24
 8006906:	4619      	mov	r1, r3
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f7fe fc5e 	bl	80051ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006914:	f04f 33ff 	mov.w	r3, #4294967295
 8006918:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800691a:	6879      	ldr	r1, [r7, #4]
 800691c:	68b8      	ldr	r0, [r7, #8]
 800691e:	f000 fa55 	bl	8006dcc <prvAddCurrentTaskToDelayedList>
	}
 8006922:	bf00      	nop
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	20001720 	.word	0x20001720

08006930 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10a      	bne.n	800695c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	60fb      	str	r3, [r7, #12]
}
 8006958:	bf00      	nop
 800695a:	e7fe      	b.n	800695a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	3318      	adds	r3, #24
 8006960:	4618      	mov	r0, r3
 8006962:	f7fe fc8d 	bl	8005280 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006966:	4b1e      	ldr	r3, [pc, #120]	; (80069e0 <xTaskRemoveFromEventList+0xb0>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d11d      	bne.n	80069aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	3304      	adds	r3, #4
 8006972:	4618      	mov	r0, r3
 8006974:	f7fe fc84 	bl	8005280 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697c:	4b19      	ldr	r3, [pc, #100]	; (80069e4 <xTaskRemoveFromEventList+0xb4>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	429a      	cmp	r2, r3
 8006982:	d903      	bls.n	800698c <xTaskRemoveFromEventList+0x5c>
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006988:	4a16      	ldr	r2, [pc, #88]	; (80069e4 <xTaskRemoveFromEventList+0xb4>)
 800698a:	6013      	str	r3, [r2, #0]
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006990:	4613      	mov	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4a13      	ldr	r2, [pc, #76]	; (80069e8 <xTaskRemoveFromEventList+0xb8>)
 800699a:	441a      	add	r2, r3
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	3304      	adds	r3, #4
 80069a0:	4619      	mov	r1, r3
 80069a2:	4610      	mov	r0, r2
 80069a4:	f7fe fc11 	bl	80051ca <vListInsertEnd>
 80069a8:	e005      	b.n	80069b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	3318      	adds	r3, #24
 80069ae:	4619      	mov	r1, r3
 80069b0:	480e      	ldr	r0, [pc, #56]	; (80069ec <xTaskRemoveFromEventList+0xbc>)
 80069b2:	f7fe fc0a 	bl	80051ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ba:	4b0d      	ldr	r3, [pc, #52]	; (80069f0 <xTaskRemoveFromEventList+0xc0>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d905      	bls.n	80069d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80069c4:	2301      	movs	r3, #1
 80069c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80069c8:	4b0a      	ldr	r3, [pc, #40]	; (80069f4 <xTaskRemoveFromEventList+0xc4>)
 80069ca:	2201      	movs	r2, #1
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	e001      	b.n	80069d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80069d0:	2300      	movs	r3, #0
 80069d2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80069d4:	697b      	ldr	r3, [r7, #20]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3718      	adds	r7, #24
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	20001c1c 	.word	0x20001c1c
 80069e4:	20001bfc 	.word	0x20001bfc
 80069e8:	20001724 	.word	0x20001724
 80069ec:	20001bb4 	.word	0x20001bb4
 80069f0:	20001720 	.word	0x20001720
 80069f4:	20001c08 	.word	0x20001c08

080069f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a00:	4b06      	ldr	r3, [pc, #24]	; (8006a1c <vTaskInternalSetTimeOutState+0x24>)
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a08:	4b05      	ldr	r3, [pc, #20]	; (8006a20 <vTaskInternalSetTimeOutState+0x28>)
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	605a      	str	r2, [r3, #4]
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bc80      	pop	{r7}
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	20001c0c 	.word	0x20001c0c
 8006a20:	20001bf8 	.word	0x20001bf8

08006a24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b088      	sub	sp, #32
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10a      	bne.n	8006a4a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	613b      	str	r3, [r7, #16]
}
 8006a46:	bf00      	nop
 8006a48:	e7fe      	b.n	8006a48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10a      	bne.n	8006a66 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	60fb      	str	r3, [r7, #12]
}
 8006a62:	bf00      	nop
 8006a64:	e7fe      	b.n	8006a64 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006a66:	f7fe fd29 	bl	80054bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a6a:	4b1d      	ldr	r3, [pc, #116]	; (8006ae0 <xTaskCheckForTimeOut+0xbc>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a82:	d102      	bne.n	8006a8a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a84:	2300      	movs	r3, #0
 8006a86:	61fb      	str	r3, [r7, #28]
 8006a88:	e023      	b.n	8006ad2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	4b15      	ldr	r3, [pc, #84]	; (8006ae4 <xTaskCheckForTimeOut+0xc0>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d007      	beq.n	8006aa6 <xTaskCheckForTimeOut+0x82>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	69ba      	ldr	r2, [r7, #24]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d302      	bcc.n	8006aa6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	61fb      	str	r3, [r7, #28]
 8006aa4:	e015      	b.n	8006ad2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d20b      	bcs.n	8006ac8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	1ad2      	subs	r2, r2, r3
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7ff ff9b 	bl	80069f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	61fb      	str	r3, [r7, #28]
 8006ac6:	e004      	b.n	8006ad2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2200      	movs	r2, #0
 8006acc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ad2:	f7fe fd23 	bl	800551c <vPortExitCritical>

	return xReturn;
 8006ad6:	69fb      	ldr	r3, [r7, #28]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3720      	adds	r7, #32
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	20001bf8 	.word	0x20001bf8
 8006ae4:	20001c0c 	.word	0x20001c0c

08006ae8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ae8:	b480      	push	{r7}
 8006aea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006aec:	4b03      	ldr	r3, [pc, #12]	; (8006afc <vTaskMissedYield+0x14>)
 8006aee:	2201      	movs	r2, #1
 8006af0:	601a      	str	r2, [r3, #0]
}
 8006af2:	bf00      	nop
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bc80      	pop	{r7}
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	20001c08 	.word	0x20001c08

08006b00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b08:	f000 f852 	bl	8006bb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b0c:	4b06      	ldr	r3, [pc, #24]	; (8006b28 <prvIdleTask+0x28>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d9f9      	bls.n	8006b08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b14:	4b05      	ldr	r3, [pc, #20]	; (8006b2c <prvIdleTask+0x2c>)
 8006b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b24:	e7f0      	b.n	8006b08 <prvIdleTask+0x8>
 8006b26:	bf00      	nop
 8006b28:	20001724 	.word	0x20001724
 8006b2c:	e000ed04 	.word	0xe000ed04

08006b30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b36:	2300      	movs	r3, #0
 8006b38:	607b      	str	r3, [r7, #4]
 8006b3a:	e00c      	b.n	8006b56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4a12      	ldr	r2, [pc, #72]	; (8006b90 <prvInitialiseTaskLists+0x60>)
 8006b48:	4413      	add	r3, r2
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7fe fb12 	bl	8005174 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3301      	adds	r3, #1
 8006b54:	607b      	str	r3, [r7, #4]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b37      	cmp	r3, #55	; 0x37
 8006b5a:	d9ef      	bls.n	8006b3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b5c:	480d      	ldr	r0, [pc, #52]	; (8006b94 <prvInitialiseTaskLists+0x64>)
 8006b5e:	f7fe fb09 	bl	8005174 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b62:	480d      	ldr	r0, [pc, #52]	; (8006b98 <prvInitialiseTaskLists+0x68>)
 8006b64:	f7fe fb06 	bl	8005174 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b68:	480c      	ldr	r0, [pc, #48]	; (8006b9c <prvInitialiseTaskLists+0x6c>)
 8006b6a:	f7fe fb03 	bl	8005174 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b6e:	480c      	ldr	r0, [pc, #48]	; (8006ba0 <prvInitialiseTaskLists+0x70>)
 8006b70:	f7fe fb00 	bl	8005174 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b74:	480b      	ldr	r0, [pc, #44]	; (8006ba4 <prvInitialiseTaskLists+0x74>)
 8006b76:	f7fe fafd 	bl	8005174 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ba8 <prvInitialiseTaskLists+0x78>)
 8006b7c:	4a05      	ldr	r2, [pc, #20]	; (8006b94 <prvInitialiseTaskLists+0x64>)
 8006b7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b80:	4b0a      	ldr	r3, [pc, #40]	; (8006bac <prvInitialiseTaskLists+0x7c>)
 8006b82:	4a05      	ldr	r2, [pc, #20]	; (8006b98 <prvInitialiseTaskLists+0x68>)
 8006b84:	601a      	str	r2, [r3, #0]
}
 8006b86:	bf00      	nop
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	20001724 	.word	0x20001724
 8006b94:	20001b84 	.word	0x20001b84
 8006b98:	20001b98 	.word	0x20001b98
 8006b9c:	20001bb4 	.word	0x20001bb4
 8006ba0:	20001bc8 	.word	0x20001bc8
 8006ba4:	20001be0 	.word	0x20001be0
 8006ba8:	20001bac 	.word	0x20001bac
 8006bac:	20001bb0 	.word	0x20001bb0

08006bb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bb6:	e019      	b.n	8006bec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006bb8:	f7fe fc80 	bl	80054bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006bbc:	4b10      	ldr	r3, [pc, #64]	; (8006c00 <prvCheckTasksWaitingTermination+0x50>)
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7fe fb59 	bl	8005280 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006bce:	4b0d      	ldr	r3, [pc, #52]	; (8006c04 <prvCheckTasksWaitingTermination+0x54>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	4a0b      	ldr	r2, [pc, #44]	; (8006c04 <prvCheckTasksWaitingTermination+0x54>)
 8006bd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006bd8:	4b0b      	ldr	r3, [pc, #44]	; (8006c08 <prvCheckTasksWaitingTermination+0x58>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	4a0a      	ldr	r2, [pc, #40]	; (8006c08 <prvCheckTasksWaitingTermination+0x58>)
 8006be0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006be2:	f7fe fc9b 	bl	800551c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f810 	bl	8006c0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bec:	4b06      	ldr	r3, [pc, #24]	; (8006c08 <prvCheckTasksWaitingTermination+0x58>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1e1      	bne.n	8006bb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006bf4:	bf00      	nop
 8006bf6:	bf00      	nop
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	20001bc8 	.word	0x20001bc8
 8006c04:	20001bf4 	.word	0x20001bf4
 8006c08:	20001bdc 	.word	0x20001bdc

08006c0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d108      	bne.n	8006c30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fe f992 	bl	8004f4c <vPortFree>
				vPortFree( pxTCB );
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7fe f98f 	bl	8004f4c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c2e:	e018      	b.n	8006c62 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d103      	bne.n	8006c42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7fe f986 	bl	8004f4c <vPortFree>
	}
 8006c40:	e00f      	b.n	8006c62 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d00a      	beq.n	8006c62 <prvDeleteTCB+0x56>
	__asm volatile
 8006c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	60fb      	str	r3, [r7, #12]
}
 8006c5e:	bf00      	nop
 8006c60:	e7fe      	b.n	8006c60 <prvDeleteTCB+0x54>
	}
 8006c62:	bf00      	nop
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
	...

08006c6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c72:	4b0e      	ldr	r3, [pc, #56]	; (8006cac <prvResetNextTaskUnblockTime+0x40>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d101      	bne.n	8006c80 <prvResetNextTaskUnblockTime+0x14>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e000      	b.n	8006c82 <prvResetNextTaskUnblockTime+0x16>
 8006c80:	2300      	movs	r3, #0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d004      	beq.n	8006c90 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c86:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <prvResetNextTaskUnblockTime+0x44>)
 8006c88:	f04f 32ff 	mov.w	r2, #4294967295
 8006c8c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c8e:	e008      	b.n	8006ca2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c90:	4b06      	ldr	r3, [pc, #24]	; (8006cac <prvResetNextTaskUnblockTime+0x40>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	4a04      	ldr	r2, [pc, #16]	; (8006cb0 <prvResetNextTaskUnblockTime+0x44>)
 8006ca0:	6013      	str	r3, [r2, #0]
}
 8006ca2:	bf00      	nop
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bc80      	pop	{r7}
 8006caa:	4770      	bx	lr
 8006cac:	20001bac 	.word	0x20001bac
 8006cb0:	20001c14 	.word	0x20001c14

08006cb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006cba:	4b0b      	ldr	r3, [pc, #44]	; (8006ce8 <xTaskGetSchedulerState+0x34>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d102      	bne.n	8006cc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	607b      	str	r3, [r7, #4]
 8006cc6:	e008      	b.n	8006cda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cc8:	4b08      	ldr	r3, [pc, #32]	; (8006cec <xTaskGetSchedulerState+0x38>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d102      	bne.n	8006cd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	607b      	str	r3, [r7, #4]
 8006cd4:	e001      	b.n	8006cda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006cda:	687b      	ldr	r3, [r7, #4]
	}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bc80      	pop	{r7}
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	20001c00 	.word	0x20001c00
 8006cec:	20001c1c 	.word	0x20001c1c

08006cf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d056      	beq.n	8006db4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d06:	4b2e      	ldr	r3, [pc, #184]	; (8006dc0 <xTaskPriorityDisinherit+0xd0>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d00a      	beq.n	8006d26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	60fb      	str	r3, [r7, #12]
}
 8006d22:	bf00      	nop
 8006d24:	e7fe      	b.n	8006d24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10a      	bne.n	8006d44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	60bb      	str	r3, [r7, #8]
}
 8006d40:	bf00      	nop
 8006d42:	e7fe      	b.n	8006d42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d48:	1e5a      	subs	r2, r3, #1
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d02c      	beq.n	8006db4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d128      	bne.n	8006db4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	3304      	adds	r3, #4
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fe fa8a 	bl	8005280 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d78:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d84:	4b0f      	ldr	r3, [pc, #60]	; (8006dc4 <xTaskPriorityDisinherit+0xd4>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d903      	bls.n	8006d94 <xTaskPriorityDisinherit+0xa4>
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d90:	4a0c      	ldr	r2, [pc, #48]	; (8006dc4 <xTaskPriorityDisinherit+0xd4>)
 8006d92:	6013      	str	r3, [r2, #0]
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d98:	4613      	mov	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4a09      	ldr	r2, [pc, #36]	; (8006dc8 <xTaskPriorityDisinherit+0xd8>)
 8006da2:	441a      	add	r2, r3
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	3304      	adds	r3, #4
 8006da8:	4619      	mov	r1, r3
 8006daa:	4610      	mov	r0, r2
 8006dac:	f7fe fa0d 	bl	80051ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006db0:	2301      	movs	r3, #1
 8006db2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006db4:	697b      	ldr	r3, [r7, #20]
	}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3718      	adds	r7, #24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	20001720 	.word	0x20001720
 8006dc4:	20001bfc 	.word	0x20001bfc
 8006dc8:	20001724 	.word	0x20001724

08006dcc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006dd6:	4b21      	ldr	r3, [pc, #132]	; (8006e5c <prvAddCurrentTaskToDelayedList+0x90>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ddc:	4b20      	ldr	r3, [pc, #128]	; (8006e60 <prvAddCurrentTaskToDelayedList+0x94>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3304      	adds	r3, #4
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fe fa4c 	bl	8005280 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dee:	d10a      	bne.n	8006e06 <prvAddCurrentTaskToDelayedList+0x3a>
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d007      	beq.n	8006e06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006df6:	4b1a      	ldr	r3, [pc, #104]	; (8006e60 <prvAddCurrentTaskToDelayedList+0x94>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4819      	ldr	r0, [pc, #100]	; (8006e64 <prvAddCurrentTaskToDelayedList+0x98>)
 8006e00:	f7fe f9e3 	bl	80051ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e04:	e026      	b.n	8006e54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e0e:	4b14      	ldr	r3, [pc, #80]	; (8006e60 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d209      	bcs.n	8006e32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e1e:	4b12      	ldr	r3, [pc, #72]	; (8006e68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	4b0f      	ldr	r3, [pc, #60]	; (8006e60 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	3304      	adds	r3, #4
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	f7fe f9f0 	bl	8005210 <vListInsert>
}
 8006e30:	e010      	b.n	8006e54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e32:	4b0e      	ldr	r3, [pc, #56]	; (8006e6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	4b0a      	ldr	r3, [pc, #40]	; (8006e60 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	4610      	mov	r0, r2
 8006e40:	f7fe f9e6 	bl	8005210 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e44:	4b0a      	ldr	r3, [pc, #40]	; (8006e70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d202      	bcs.n	8006e54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006e4e:	4a08      	ldr	r2, [pc, #32]	; (8006e70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	6013      	str	r3, [r2, #0]
}
 8006e54:	bf00      	nop
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	20001bf8 	.word	0x20001bf8
 8006e60:	20001720 	.word	0x20001720
 8006e64:	20001be0 	.word	0x20001be0
 8006e68:	20001bb0 	.word	0x20001bb0
 8006e6c:	20001bac 	.word	0x20001bac
 8006e70:	20001c14 	.word	0x20001c14

08006e74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08a      	sub	sp, #40	; 0x28
 8006e78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006e7e:	f000 facb 	bl	8007418 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006e82:	4b1c      	ldr	r3, [pc, #112]	; (8006ef4 <xTimerCreateTimerTask+0x80>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d021      	beq.n	8006ece <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006e92:	1d3a      	adds	r2, r7, #4
 8006e94:	f107 0108 	add.w	r1, r7, #8
 8006e98:	f107 030c 	add.w	r3, r7, #12
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fd ff77 	bl	8004d90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006ea2:	6879      	ldr	r1, [r7, #4]
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	9202      	str	r2, [sp, #8]
 8006eaa:	9301      	str	r3, [sp, #4]
 8006eac:	2302      	movs	r3, #2
 8006eae:	9300      	str	r3, [sp, #0]
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	460a      	mov	r2, r1
 8006eb4:	4910      	ldr	r1, [pc, #64]	; (8006ef8 <xTimerCreateTimerTask+0x84>)
 8006eb6:	4811      	ldr	r0, [pc, #68]	; (8006efc <xTimerCreateTimerTask+0x88>)
 8006eb8:	f7ff f8e4 	bl	8006084 <xTaskCreateStatic>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	4a10      	ldr	r2, [pc, #64]	; (8006f00 <xTimerCreateTimerTask+0x8c>)
 8006ec0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006ec2:	4b0f      	ldr	r3, [pc, #60]	; (8006f00 <xTimerCreateTimerTask+0x8c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10a      	bne.n	8006eea <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	613b      	str	r3, [r7, #16]
}
 8006ee6:	bf00      	nop
 8006ee8:	e7fe      	b.n	8006ee8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006eea:	697b      	ldr	r3, [r7, #20]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3718      	adds	r7, #24
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	20001c50 	.word	0x20001c50
 8006ef8:	08007e40 	.word	0x08007e40
 8006efc:	08007021 	.word	0x08007021
 8006f00:	20001c54 	.word	0x20001c54

08006f04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08a      	sub	sp, #40	; 0x28
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
 8006f10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006f12:	2300      	movs	r3, #0
 8006f14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10a      	bne.n	8006f32 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	623b      	str	r3, [r7, #32]
}
 8006f2e:	bf00      	nop
 8006f30:	e7fe      	b.n	8006f30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006f32:	4b1a      	ldr	r3, [pc, #104]	; (8006f9c <xTimerGenericCommand+0x98>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d02a      	beq.n	8006f90 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2b05      	cmp	r3, #5
 8006f4a:	dc18      	bgt.n	8006f7e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006f4c:	f7ff feb2 	bl	8006cb4 <xTaskGetSchedulerState>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d109      	bne.n	8006f6a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006f56:	4b11      	ldr	r3, [pc, #68]	; (8006f9c <xTimerGenericCommand+0x98>)
 8006f58:	6818      	ldr	r0, [r3, #0]
 8006f5a:	f107 0110 	add.w	r1, r7, #16
 8006f5e:	2300      	movs	r3, #0
 8006f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f62:	f7fe fcad 	bl	80058c0 <xQueueGenericSend>
 8006f66:	6278      	str	r0, [r7, #36]	; 0x24
 8006f68:	e012      	b.n	8006f90 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006f6a:	4b0c      	ldr	r3, [pc, #48]	; (8006f9c <xTimerGenericCommand+0x98>)
 8006f6c:	6818      	ldr	r0, [r3, #0]
 8006f6e:	f107 0110 	add.w	r1, r7, #16
 8006f72:	2300      	movs	r3, #0
 8006f74:	2200      	movs	r2, #0
 8006f76:	f7fe fca3 	bl	80058c0 <xQueueGenericSend>
 8006f7a:	6278      	str	r0, [r7, #36]	; 0x24
 8006f7c:	e008      	b.n	8006f90 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006f7e:	4b07      	ldr	r3, [pc, #28]	; (8006f9c <xTimerGenericCommand+0x98>)
 8006f80:	6818      	ldr	r0, [r3, #0]
 8006f82:	f107 0110 	add.w	r1, r7, #16
 8006f86:	2300      	movs	r3, #0
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	f7fe fd97 	bl	8005abc <xQueueGenericSendFromISR>
 8006f8e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3728      	adds	r7, #40	; 0x28
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20001c50 	.word	0x20001c50

08006fa0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b088      	sub	sp, #32
 8006fa4:	af02      	add	r7, sp, #8
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006faa:	4b1c      	ldr	r3, [pc, #112]	; (800701c <prvProcessExpiredTimer+0x7c>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7fe f961 	bl	8005280 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d122      	bne.n	800700c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	699a      	ldr	r2, [r3, #24]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	18d1      	adds	r1, r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	6978      	ldr	r0, [r7, #20]
 8006fd4:	f000 f8c8 	bl	8007168 <prvInsertTimerInActiveList>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d016      	beq.n	800700c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006fde:	2300      	movs	r3, #0
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	6978      	ldr	r0, [r7, #20]
 8006fea:	f7ff ff8b 	bl	8006f04 <xTimerGenericCommand>
 8006fee:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10a      	bne.n	800700c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	60fb      	str	r3, [r7, #12]
}
 8007008:	bf00      	nop
 800700a:	e7fe      	b.n	800700a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	6978      	ldr	r0, [r7, #20]
 8007012:	4798      	blx	r3
}
 8007014:	bf00      	nop
 8007016:	3718      	adds	r7, #24
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	20001c48 	.word	0x20001c48

08007020 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007028:	f107 0308 	add.w	r3, r7, #8
 800702c:	4618      	mov	r0, r3
 800702e:	f000 f857 	bl	80070e0 <prvGetNextExpireTime>
 8007032:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	4619      	mov	r1, r3
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 f803 	bl	8007044 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800703e:	f000 f8d5 	bl	80071ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007042:	e7f1      	b.n	8007028 <prvTimerTask+0x8>

08007044 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800704e:	f7ff fa4b 	bl	80064e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007052:	f107 0308 	add.w	r3, r7, #8
 8007056:	4618      	mov	r0, r3
 8007058:	f000 f866 	bl	8007128 <prvSampleTimeNow>
 800705c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d130      	bne.n	80070c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10a      	bne.n	8007080 <prvProcessTimerOrBlockTask+0x3c>
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	429a      	cmp	r2, r3
 8007070:	d806      	bhi.n	8007080 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007072:	f7ff fa47 	bl	8006504 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007076:	68f9      	ldr	r1, [r7, #12]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f7ff ff91 	bl	8006fa0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800707e:	e024      	b.n	80070ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d008      	beq.n	8007098 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007086:	4b13      	ldr	r3, [pc, #76]	; (80070d4 <prvProcessTimerOrBlockTask+0x90>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	bf0c      	ite	eq
 8007090:	2301      	moveq	r3, #1
 8007092:	2300      	movne	r3, #0
 8007094:	b2db      	uxtb	r3, r3
 8007096:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007098:	4b0f      	ldr	r3, [pc, #60]	; (80070d8 <prvProcessTimerOrBlockTask+0x94>)
 800709a:	6818      	ldr	r0, [r3, #0]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	4619      	mov	r1, r3
 80070a6:	f7fe ffb9 	bl	800601c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80070aa:	f7ff fa2b 	bl	8006504 <xTaskResumeAll>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10a      	bne.n	80070ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80070b4:	4b09      	ldr	r3, [pc, #36]	; (80070dc <prvProcessTimerOrBlockTask+0x98>)
 80070b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	f3bf 8f6f 	isb	sy
}
 80070c4:	e001      	b.n	80070ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80070c6:	f7ff fa1d 	bl	8006504 <xTaskResumeAll>
}
 80070ca:	bf00      	nop
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20001c4c 	.word	0x20001c4c
 80070d8:	20001c50 	.word	0x20001c50
 80070dc:	e000ed04 	.word	0xe000ed04

080070e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80070e8:	4b0e      	ldr	r3, [pc, #56]	; (8007124 <prvGetNextExpireTime+0x44>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	bf0c      	ite	eq
 80070f2:	2301      	moveq	r3, #1
 80070f4:	2300      	movne	r3, #0
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	461a      	mov	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d105      	bne.n	8007112 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007106:	4b07      	ldr	r3, [pc, #28]	; (8007124 <prvGetNextExpireTime+0x44>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	e001      	b.n	8007116 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007112:	2300      	movs	r3, #0
 8007114:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007116:	68fb      	ldr	r3, [r7, #12]
}
 8007118:	4618      	mov	r0, r3
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	bc80      	pop	{r7}
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	20001c48 	.word	0x20001c48

08007128 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007130:	f7ff fa86 	bl	8006640 <xTaskGetTickCount>
 8007134:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007136:	4b0b      	ldr	r3, [pc, #44]	; (8007164 <prvSampleTimeNow+0x3c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	429a      	cmp	r2, r3
 800713e:	d205      	bcs.n	800714c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007140:	f000 f908 	bl	8007354 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	e002      	b.n	8007152 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007152:	4a04      	ldr	r2, [pc, #16]	; (8007164 <prvSampleTimeNow+0x3c>)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007158:	68fb      	ldr	r3, [r7, #12]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	20001c58 	.word	0x20001c58

08007168 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
 8007174:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007176:	2300      	movs	r3, #0
 8007178:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	429a      	cmp	r2, r3
 800718c:	d812      	bhi.n	80071b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	1ad2      	subs	r2, r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	429a      	cmp	r2, r3
 800719a:	d302      	bcc.n	80071a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800719c:	2301      	movs	r3, #1
 800719e:	617b      	str	r3, [r7, #20]
 80071a0:	e01b      	b.n	80071da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80071a2:	4b10      	ldr	r3, [pc, #64]	; (80071e4 <prvInsertTimerInActiveList+0x7c>)
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3304      	adds	r3, #4
 80071aa:	4619      	mov	r1, r3
 80071ac:	4610      	mov	r0, r2
 80071ae:	f7fe f82f 	bl	8005210 <vListInsert>
 80071b2:	e012      	b.n	80071da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d206      	bcs.n	80071ca <prvInsertTimerInActiveList+0x62>
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d302      	bcc.n	80071ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80071c4:	2301      	movs	r3, #1
 80071c6:	617b      	str	r3, [r7, #20]
 80071c8:	e007      	b.n	80071da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071ca:	4b07      	ldr	r3, [pc, #28]	; (80071e8 <prvInsertTimerInActiveList+0x80>)
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	3304      	adds	r3, #4
 80071d2:	4619      	mov	r1, r3
 80071d4:	4610      	mov	r0, r2
 80071d6:	f7fe f81b 	bl	8005210 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80071da:	697b      	ldr	r3, [r7, #20]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3718      	adds	r7, #24
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	20001c4c 	.word	0x20001c4c
 80071e8:	20001c48 	.word	0x20001c48

080071ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08e      	sub	sp, #56	; 0x38
 80071f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071f2:	e09d      	b.n	8007330 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	da18      	bge.n	800722c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80071fa:	1d3b      	adds	r3, r7, #4
 80071fc:	3304      	adds	r3, #4
 80071fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10a      	bne.n	800721c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	61fb      	str	r3, [r7, #28]
}
 8007218:	bf00      	nop
 800721a:	e7fe      	b.n	800721a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800721c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007222:	6850      	ldr	r0, [r2, #4]
 8007224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007226:	6892      	ldr	r2, [r2, #8]
 8007228:	4611      	mov	r1, r2
 800722a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	db7e      	blt.n	8007330 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d004      	beq.n	8007248 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007240:	3304      	adds	r3, #4
 8007242:	4618      	mov	r0, r3
 8007244:	f7fe f81c 	bl	8005280 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007248:	463b      	mov	r3, r7
 800724a:	4618      	mov	r0, r3
 800724c:	f7ff ff6c 	bl	8007128 <prvSampleTimeNow>
 8007250:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b09      	cmp	r3, #9
 8007256:	d86a      	bhi.n	800732e <prvProcessReceivedCommands+0x142>
 8007258:	a201      	add	r2, pc, #4	; (adr r2, 8007260 <prvProcessReceivedCommands+0x74>)
 800725a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725e:	bf00      	nop
 8007260:	08007289 	.word	0x08007289
 8007264:	08007289 	.word	0x08007289
 8007268:	08007289 	.word	0x08007289
 800726c:	08007331 	.word	0x08007331
 8007270:	080072e5 	.word	0x080072e5
 8007274:	0800731d 	.word	0x0800731d
 8007278:	08007289 	.word	0x08007289
 800727c:	08007289 	.word	0x08007289
 8007280:	08007331 	.word	0x08007331
 8007284:	080072e5 	.word	0x080072e5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	18d1      	adds	r1, r2, r3
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007296:	f7ff ff67 	bl	8007168 <prvInsertTimerInActiveList>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d047      	beq.n	8007330 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072a6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80072a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072aa:	69db      	ldr	r3, [r3, #28]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d13f      	bne.n	8007330 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	441a      	add	r2, r3
 80072b8:	2300      	movs	r3, #0
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	2300      	movs	r3, #0
 80072be:	2100      	movs	r1, #0
 80072c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072c2:	f7ff fe1f 	bl	8006f04 <xTimerGenericCommand>
 80072c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80072c8:	6a3b      	ldr	r3, [r7, #32]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d130      	bne.n	8007330 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80072ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	61bb      	str	r3, [r7, #24]
}
 80072e0:	bf00      	nop
 80072e2:	e7fe      	b.n	80072e2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80072ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10a      	bne.n	8007308 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	617b      	str	r3, [r7, #20]
}
 8007304:	bf00      	nop
 8007306:	e7fe      	b.n	8007306 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730a:	699a      	ldr	r2, [r3, #24]
 800730c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730e:	18d1      	adds	r1, r2, r3
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007316:	f7ff ff27 	bl	8007168 <prvInsertTimerInActiveList>
					break;
 800731a:	e009      	b.n	8007330 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800731c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007322:	2b00      	cmp	r3, #0
 8007324:	d104      	bne.n	8007330 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007328:	f7fd fe10 	bl	8004f4c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800732c:	e000      	b.n	8007330 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800732e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007330:	4b07      	ldr	r3, [pc, #28]	; (8007350 <prvProcessReceivedCommands+0x164>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	1d39      	adds	r1, r7, #4
 8007336:	2200      	movs	r2, #0
 8007338:	4618      	mov	r0, r3
 800733a:	f7fe fc57 	bl	8005bec <xQueueReceive>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	f47f af57 	bne.w	80071f4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007346:	bf00      	nop
 8007348:	bf00      	nop
 800734a:	3730      	adds	r7, #48	; 0x30
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	20001c50 	.word	0x20001c50

08007354 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b088      	sub	sp, #32
 8007358:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800735a:	e045      	b.n	80073e8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800735c:	4b2c      	ldr	r3, [pc, #176]	; (8007410 <prvSwitchTimerLists+0xbc>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007366:	4b2a      	ldr	r3, [pc, #168]	; (8007410 <prvSwitchTimerLists+0xbc>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	3304      	adds	r3, #4
 8007374:	4618      	mov	r0, r3
 8007376:	f7fd ff83 	bl	8005280 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	69db      	ldr	r3, [r3, #28]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d12e      	bne.n	80073e8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	4413      	add	r3, r2
 8007392:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	429a      	cmp	r2, r3
 800739a:	d90e      	bls.n	80073ba <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073a8:	4b19      	ldr	r3, [pc, #100]	; (8007410 <prvSwitchTimerLists+0xbc>)
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	3304      	adds	r3, #4
 80073b0:	4619      	mov	r1, r3
 80073b2:	4610      	mov	r0, r2
 80073b4:	f7fd ff2c 	bl	8005210 <vListInsert>
 80073b8:	e016      	b.n	80073e8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073ba:	2300      	movs	r3, #0
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	2300      	movs	r3, #0
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	2100      	movs	r1, #0
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f7ff fd9d 	bl	8006f04 <xTimerGenericCommand>
 80073ca:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10a      	bne.n	80073e8 <prvSwitchTimerLists+0x94>
	__asm volatile
 80073d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	603b      	str	r3, [r7, #0]
}
 80073e4:	bf00      	nop
 80073e6:	e7fe      	b.n	80073e6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073e8:	4b09      	ldr	r3, [pc, #36]	; (8007410 <prvSwitchTimerLists+0xbc>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1b4      	bne.n	800735c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80073f2:	4b07      	ldr	r3, [pc, #28]	; (8007410 <prvSwitchTimerLists+0xbc>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80073f8:	4b06      	ldr	r3, [pc, #24]	; (8007414 <prvSwitchTimerLists+0xc0>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a04      	ldr	r2, [pc, #16]	; (8007410 <prvSwitchTimerLists+0xbc>)
 80073fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007400:	4a04      	ldr	r2, [pc, #16]	; (8007414 <prvSwitchTimerLists+0xc0>)
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	6013      	str	r3, [r2, #0]
}
 8007406:	bf00      	nop
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	20001c48 	.word	0x20001c48
 8007414:	20001c4c 	.word	0x20001c4c

08007418 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800741e:	f7fe f84d 	bl	80054bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007422:	4b15      	ldr	r3, [pc, #84]	; (8007478 <prvCheckForValidListAndQueue+0x60>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d120      	bne.n	800746c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800742a:	4814      	ldr	r0, [pc, #80]	; (800747c <prvCheckForValidListAndQueue+0x64>)
 800742c:	f7fd fea2 	bl	8005174 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007430:	4813      	ldr	r0, [pc, #76]	; (8007480 <prvCheckForValidListAndQueue+0x68>)
 8007432:	f7fd fe9f 	bl	8005174 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007436:	4b13      	ldr	r3, [pc, #76]	; (8007484 <prvCheckForValidListAndQueue+0x6c>)
 8007438:	4a10      	ldr	r2, [pc, #64]	; (800747c <prvCheckForValidListAndQueue+0x64>)
 800743a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800743c:	4b12      	ldr	r3, [pc, #72]	; (8007488 <prvCheckForValidListAndQueue+0x70>)
 800743e:	4a10      	ldr	r2, [pc, #64]	; (8007480 <prvCheckForValidListAndQueue+0x68>)
 8007440:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007442:	2300      	movs	r3, #0
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	4b11      	ldr	r3, [pc, #68]	; (800748c <prvCheckForValidListAndQueue+0x74>)
 8007448:	4a11      	ldr	r2, [pc, #68]	; (8007490 <prvCheckForValidListAndQueue+0x78>)
 800744a:	2110      	movs	r1, #16
 800744c:	200a      	movs	r0, #10
 800744e:	f7fe f99d 	bl	800578c <xQueueGenericCreateStatic>
 8007452:	4603      	mov	r3, r0
 8007454:	4a08      	ldr	r2, [pc, #32]	; (8007478 <prvCheckForValidListAndQueue+0x60>)
 8007456:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007458:	4b07      	ldr	r3, [pc, #28]	; (8007478 <prvCheckForValidListAndQueue+0x60>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d005      	beq.n	800746c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007460:	4b05      	ldr	r3, [pc, #20]	; (8007478 <prvCheckForValidListAndQueue+0x60>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	490b      	ldr	r1, [pc, #44]	; (8007494 <prvCheckForValidListAndQueue+0x7c>)
 8007466:	4618      	mov	r0, r3
 8007468:	f7fe fdb0 	bl	8005fcc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800746c:	f7fe f856 	bl	800551c <vPortExitCritical>
}
 8007470:	bf00      	nop
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	20001c50 	.word	0x20001c50
 800747c:	20001c20 	.word	0x20001c20
 8007480:	20001c34 	.word	0x20001c34
 8007484:	20001c48 	.word	0x20001c48
 8007488:	20001c4c 	.word	0x20001c4c
 800748c:	20001cfc 	.word	0x20001cfc
 8007490:	20001c5c 	.word	0x20001c5c
 8007494:	08007e48 	.word	0x08007e48

08007498 <siprintf>:
 8007498:	b40e      	push	{r1, r2, r3}
 800749a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800749e:	b500      	push	{lr}
 80074a0:	b09c      	sub	sp, #112	; 0x70
 80074a2:	ab1d      	add	r3, sp, #116	; 0x74
 80074a4:	9002      	str	r0, [sp, #8]
 80074a6:	9006      	str	r0, [sp, #24]
 80074a8:	9107      	str	r1, [sp, #28]
 80074aa:	9104      	str	r1, [sp, #16]
 80074ac:	4808      	ldr	r0, [pc, #32]	; (80074d0 <siprintf+0x38>)
 80074ae:	4909      	ldr	r1, [pc, #36]	; (80074d4 <siprintf+0x3c>)
 80074b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80074b4:	9105      	str	r1, [sp, #20]
 80074b6:	6800      	ldr	r0, [r0, #0]
 80074b8:	a902      	add	r1, sp, #8
 80074ba:	9301      	str	r3, [sp, #4]
 80074bc:	f000 f99c 	bl	80077f8 <_svfiprintf_r>
 80074c0:	2200      	movs	r2, #0
 80074c2:	9b02      	ldr	r3, [sp, #8]
 80074c4:	701a      	strb	r2, [r3, #0]
 80074c6:	b01c      	add	sp, #112	; 0x70
 80074c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80074cc:	b003      	add	sp, #12
 80074ce:	4770      	bx	lr
 80074d0:	20000068 	.word	0x20000068
 80074d4:	ffff0208 	.word	0xffff0208

080074d8 <memset>:
 80074d8:	4603      	mov	r3, r0
 80074da:	4402      	add	r2, r0
 80074dc:	4293      	cmp	r3, r2
 80074de:	d100      	bne.n	80074e2 <memset+0xa>
 80074e0:	4770      	bx	lr
 80074e2:	f803 1b01 	strb.w	r1, [r3], #1
 80074e6:	e7f9      	b.n	80074dc <memset+0x4>

080074e8 <__errno>:
 80074e8:	4b01      	ldr	r3, [pc, #4]	; (80074f0 <__errno+0x8>)
 80074ea:	6818      	ldr	r0, [r3, #0]
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	20000068 	.word	0x20000068

080074f4 <__libc_init_array>:
 80074f4:	b570      	push	{r4, r5, r6, lr}
 80074f6:	2600      	movs	r6, #0
 80074f8:	4d0c      	ldr	r5, [pc, #48]	; (800752c <__libc_init_array+0x38>)
 80074fa:	4c0d      	ldr	r4, [pc, #52]	; (8007530 <__libc_init_array+0x3c>)
 80074fc:	1b64      	subs	r4, r4, r5
 80074fe:	10a4      	asrs	r4, r4, #2
 8007500:	42a6      	cmp	r6, r4
 8007502:	d109      	bne.n	8007518 <__libc_init_array+0x24>
 8007504:	f000 fc7a 	bl	8007dfc <_init>
 8007508:	2600      	movs	r6, #0
 800750a:	4d0a      	ldr	r5, [pc, #40]	; (8007534 <__libc_init_array+0x40>)
 800750c:	4c0a      	ldr	r4, [pc, #40]	; (8007538 <__libc_init_array+0x44>)
 800750e:	1b64      	subs	r4, r4, r5
 8007510:	10a4      	asrs	r4, r4, #2
 8007512:	42a6      	cmp	r6, r4
 8007514:	d105      	bne.n	8007522 <__libc_init_array+0x2e>
 8007516:	bd70      	pop	{r4, r5, r6, pc}
 8007518:	f855 3b04 	ldr.w	r3, [r5], #4
 800751c:	4798      	blx	r3
 800751e:	3601      	adds	r6, #1
 8007520:	e7ee      	b.n	8007500 <__libc_init_array+0xc>
 8007522:	f855 3b04 	ldr.w	r3, [r5], #4
 8007526:	4798      	blx	r3
 8007528:	3601      	adds	r6, #1
 800752a:	e7f2      	b.n	8007512 <__libc_init_array+0x1e>
 800752c:	08007f1c 	.word	0x08007f1c
 8007530:	08007f1c 	.word	0x08007f1c
 8007534:	08007f1c 	.word	0x08007f1c
 8007538:	08007f20 	.word	0x08007f20

0800753c <__retarget_lock_acquire_recursive>:
 800753c:	4770      	bx	lr

0800753e <__retarget_lock_release_recursive>:
 800753e:	4770      	bx	lr

08007540 <memcpy>:
 8007540:	440a      	add	r2, r1
 8007542:	4291      	cmp	r1, r2
 8007544:	f100 33ff 	add.w	r3, r0, #4294967295
 8007548:	d100      	bne.n	800754c <memcpy+0xc>
 800754a:	4770      	bx	lr
 800754c:	b510      	push	{r4, lr}
 800754e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007552:	4291      	cmp	r1, r2
 8007554:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007558:	d1f9      	bne.n	800754e <memcpy+0xe>
 800755a:	bd10      	pop	{r4, pc}

0800755c <_free_r>:
 800755c:	b538      	push	{r3, r4, r5, lr}
 800755e:	4605      	mov	r5, r0
 8007560:	2900      	cmp	r1, #0
 8007562:	d040      	beq.n	80075e6 <_free_r+0x8a>
 8007564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007568:	1f0c      	subs	r4, r1, #4
 800756a:	2b00      	cmp	r3, #0
 800756c:	bfb8      	it	lt
 800756e:	18e4      	addlt	r4, r4, r3
 8007570:	f000 f8dc 	bl	800772c <__malloc_lock>
 8007574:	4a1c      	ldr	r2, [pc, #112]	; (80075e8 <_free_r+0x8c>)
 8007576:	6813      	ldr	r3, [r2, #0]
 8007578:	b933      	cbnz	r3, 8007588 <_free_r+0x2c>
 800757a:	6063      	str	r3, [r4, #4]
 800757c:	6014      	str	r4, [r2, #0]
 800757e:	4628      	mov	r0, r5
 8007580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007584:	f000 b8d8 	b.w	8007738 <__malloc_unlock>
 8007588:	42a3      	cmp	r3, r4
 800758a:	d908      	bls.n	800759e <_free_r+0x42>
 800758c:	6820      	ldr	r0, [r4, #0]
 800758e:	1821      	adds	r1, r4, r0
 8007590:	428b      	cmp	r3, r1
 8007592:	bf01      	itttt	eq
 8007594:	6819      	ldreq	r1, [r3, #0]
 8007596:	685b      	ldreq	r3, [r3, #4]
 8007598:	1809      	addeq	r1, r1, r0
 800759a:	6021      	streq	r1, [r4, #0]
 800759c:	e7ed      	b.n	800757a <_free_r+0x1e>
 800759e:	461a      	mov	r2, r3
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	b10b      	cbz	r3, 80075a8 <_free_r+0x4c>
 80075a4:	42a3      	cmp	r3, r4
 80075a6:	d9fa      	bls.n	800759e <_free_r+0x42>
 80075a8:	6811      	ldr	r1, [r2, #0]
 80075aa:	1850      	adds	r0, r2, r1
 80075ac:	42a0      	cmp	r0, r4
 80075ae:	d10b      	bne.n	80075c8 <_free_r+0x6c>
 80075b0:	6820      	ldr	r0, [r4, #0]
 80075b2:	4401      	add	r1, r0
 80075b4:	1850      	adds	r0, r2, r1
 80075b6:	4283      	cmp	r3, r0
 80075b8:	6011      	str	r1, [r2, #0]
 80075ba:	d1e0      	bne.n	800757e <_free_r+0x22>
 80075bc:	6818      	ldr	r0, [r3, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	4408      	add	r0, r1
 80075c2:	6010      	str	r0, [r2, #0]
 80075c4:	6053      	str	r3, [r2, #4]
 80075c6:	e7da      	b.n	800757e <_free_r+0x22>
 80075c8:	d902      	bls.n	80075d0 <_free_r+0x74>
 80075ca:	230c      	movs	r3, #12
 80075cc:	602b      	str	r3, [r5, #0]
 80075ce:	e7d6      	b.n	800757e <_free_r+0x22>
 80075d0:	6820      	ldr	r0, [r4, #0]
 80075d2:	1821      	adds	r1, r4, r0
 80075d4:	428b      	cmp	r3, r1
 80075d6:	bf01      	itttt	eq
 80075d8:	6819      	ldreq	r1, [r3, #0]
 80075da:	685b      	ldreq	r3, [r3, #4]
 80075dc:	1809      	addeq	r1, r1, r0
 80075de:	6021      	streq	r1, [r4, #0]
 80075e0:	6063      	str	r3, [r4, #4]
 80075e2:	6054      	str	r4, [r2, #4]
 80075e4:	e7cb      	b.n	800757e <_free_r+0x22>
 80075e6:	bd38      	pop	{r3, r4, r5, pc}
 80075e8:	20001e8c 	.word	0x20001e8c

080075ec <sbrk_aligned>:
 80075ec:	b570      	push	{r4, r5, r6, lr}
 80075ee:	4e0e      	ldr	r6, [pc, #56]	; (8007628 <sbrk_aligned+0x3c>)
 80075f0:	460c      	mov	r4, r1
 80075f2:	6831      	ldr	r1, [r6, #0]
 80075f4:	4605      	mov	r5, r0
 80075f6:	b911      	cbnz	r1, 80075fe <sbrk_aligned+0x12>
 80075f8:	f000 fbaa 	bl	8007d50 <_sbrk_r>
 80075fc:	6030      	str	r0, [r6, #0]
 80075fe:	4621      	mov	r1, r4
 8007600:	4628      	mov	r0, r5
 8007602:	f000 fba5 	bl	8007d50 <_sbrk_r>
 8007606:	1c43      	adds	r3, r0, #1
 8007608:	d00a      	beq.n	8007620 <sbrk_aligned+0x34>
 800760a:	1cc4      	adds	r4, r0, #3
 800760c:	f024 0403 	bic.w	r4, r4, #3
 8007610:	42a0      	cmp	r0, r4
 8007612:	d007      	beq.n	8007624 <sbrk_aligned+0x38>
 8007614:	1a21      	subs	r1, r4, r0
 8007616:	4628      	mov	r0, r5
 8007618:	f000 fb9a 	bl	8007d50 <_sbrk_r>
 800761c:	3001      	adds	r0, #1
 800761e:	d101      	bne.n	8007624 <sbrk_aligned+0x38>
 8007620:	f04f 34ff 	mov.w	r4, #4294967295
 8007624:	4620      	mov	r0, r4
 8007626:	bd70      	pop	{r4, r5, r6, pc}
 8007628:	20001e90 	.word	0x20001e90

0800762c <_malloc_r>:
 800762c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007630:	1ccd      	adds	r5, r1, #3
 8007632:	f025 0503 	bic.w	r5, r5, #3
 8007636:	3508      	adds	r5, #8
 8007638:	2d0c      	cmp	r5, #12
 800763a:	bf38      	it	cc
 800763c:	250c      	movcc	r5, #12
 800763e:	2d00      	cmp	r5, #0
 8007640:	4607      	mov	r7, r0
 8007642:	db01      	blt.n	8007648 <_malloc_r+0x1c>
 8007644:	42a9      	cmp	r1, r5
 8007646:	d905      	bls.n	8007654 <_malloc_r+0x28>
 8007648:	230c      	movs	r3, #12
 800764a:	2600      	movs	r6, #0
 800764c:	603b      	str	r3, [r7, #0]
 800764e:	4630      	mov	r0, r6
 8007650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007654:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007728 <_malloc_r+0xfc>
 8007658:	f000 f868 	bl	800772c <__malloc_lock>
 800765c:	f8d8 3000 	ldr.w	r3, [r8]
 8007660:	461c      	mov	r4, r3
 8007662:	bb5c      	cbnz	r4, 80076bc <_malloc_r+0x90>
 8007664:	4629      	mov	r1, r5
 8007666:	4638      	mov	r0, r7
 8007668:	f7ff ffc0 	bl	80075ec <sbrk_aligned>
 800766c:	1c43      	adds	r3, r0, #1
 800766e:	4604      	mov	r4, r0
 8007670:	d155      	bne.n	800771e <_malloc_r+0xf2>
 8007672:	f8d8 4000 	ldr.w	r4, [r8]
 8007676:	4626      	mov	r6, r4
 8007678:	2e00      	cmp	r6, #0
 800767a:	d145      	bne.n	8007708 <_malloc_r+0xdc>
 800767c:	2c00      	cmp	r4, #0
 800767e:	d048      	beq.n	8007712 <_malloc_r+0xe6>
 8007680:	6823      	ldr	r3, [r4, #0]
 8007682:	4631      	mov	r1, r6
 8007684:	4638      	mov	r0, r7
 8007686:	eb04 0903 	add.w	r9, r4, r3
 800768a:	f000 fb61 	bl	8007d50 <_sbrk_r>
 800768e:	4581      	cmp	r9, r0
 8007690:	d13f      	bne.n	8007712 <_malloc_r+0xe6>
 8007692:	6821      	ldr	r1, [r4, #0]
 8007694:	4638      	mov	r0, r7
 8007696:	1a6d      	subs	r5, r5, r1
 8007698:	4629      	mov	r1, r5
 800769a:	f7ff ffa7 	bl	80075ec <sbrk_aligned>
 800769e:	3001      	adds	r0, #1
 80076a0:	d037      	beq.n	8007712 <_malloc_r+0xe6>
 80076a2:	6823      	ldr	r3, [r4, #0]
 80076a4:	442b      	add	r3, r5
 80076a6:	6023      	str	r3, [r4, #0]
 80076a8:	f8d8 3000 	ldr.w	r3, [r8]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d038      	beq.n	8007722 <_malloc_r+0xf6>
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	42a2      	cmp	r2, r4
 80076b4:	d12b      	bne.n	800770e <_malloc_r+0xe2>
 80076b6:	2200      	movs	r2, #0
 80076b8:	605a      	str	r2, [r3, #4]
 80076ba:	e00f      	b.n	80076dc <_malloc_r+0xb0>
 80076bc:	6822      	ldr	r2, [r4, #0]
 80076be:	1b52      	subs	r2, r2, r5
 80076c0:	d41f      	bmi.n	8007702 <_malloc_r+0xd6>
 80076c2:	2a0b      	cmp	r2, #11
 80076c4:	d917      	bls.n	80076f6 <_malloc_r+0xca>
 80076c6:	1961      	adds	r1, r4, r5
 80076c8:	42a3      	cmp	r3, r4
 80076ca:	6025      	str	r5, [r4, #0]
 80076cc:	bf18      	it	ne
 80076ce:	6059      	strne	r1, [r3, #4]
 80076d0:	6863      	ldr	r3, [r4, #4]
 80076d2:	bf08      	it	eq
 80076d4:	f8c8 1000 	streq.w	r1, [r8]
 80076d8:	5162      	str	r2, [r4, r5]
 80076da:	604b      	str	r3, [r1, #4]
 80076dc:	4638      	mov	r0, r7
 80076de:	f104 060b 	add.w	r6, r4, #11
 80076e2:	f000 f829 	bl	8007738 <__malloc_unlock>
 80076e6:	f026 0607 	bic.w	r6, r6, #7
 80076ea:	1d23      	adds	r3, r4, #4
 80076ec:	1af2      	subs	r2, r6, r3
 80076ee:	d0ae      	beq.n	800764e <_malloc_r+0x22>
 80076f0:	1b9b      	subs	r3, r3, r6
 80076f2:	50a3      	str	r3, [r4, r2]
 80076f4:	e7ab      	b.n	800764e <_malloc_r+0x22>
 80076f6:	42a3      	cmp	r3, r4
 80076f8:	6862      	ldr	r2, [r4, #4]
 80076fa:	d1dd      	bne.n	80076b8 <_malloc_r+0x8c>
 80076fc:	f8c8 2000 	str.w	r2, [r8]
 8007700:	e7ec      	b.n	80076dc <_malloc_r+0xb0>
 8007702:	4623      	mov	r3, r4
 8007704:	6864      	ldr	r4, [r4, #4]
 8007706:	e7ac      	b.n	8007662 <_malloc_r+0x36>
 8007708:	4634      	mov	r4, r6
 800770a:	6876      	ldr	r6, [r6, #4]
 800770c:	e7b4      	b.n	8007678 <_malloc_r+0x4c>
 800770e:	4613      	mov	r3, r2
 8007710:	e7cc      	b.n	80076ac <_malloc_r+0x80>
 8007712:	230c      	movs	r3, #12
 8007714:	4638      	mov	r0, r7
 8007716:	603b      	str	r3, [r7, #0]
 8007718:	f000 f80e 	bl	8007738 <__malloc_unlock>
 800771c:	e797      	b.n	800764e <_malloc_r+0x22>
 800771e:	6025      	str	r5, [r4, #0]
 8007720:	e7dc      	b.n	80076dc <_malloc_r+0xb0>
 8007722:	605b      	str	r3, [r3, #4]
 8007724:	deff      	udf	#255	; 0xff
 8007726:	bf00      	nop
 8007728:	20001e8c 	.word	0x20001e8c

0800772c <__malloc_lock>:
 800772c:	4801      	ldr	r0, [pc, #4]	; (8007734 <__malloc_lock+0x8>)
 800772e:	f7ff bf05 	b.w	800753c <__retarget_lock_acquire_recursive>
 8007732:	bf00      	nop
 8007734:	20001e88 	.word	0x20001e88

08007738 <__malloc_unlock>:
 8007738:	4801      	ldr	r0, [pc, #4]	; (8007740 <__malloc_unlock+0x8>)
 800773a:	f7ff bf00 	b.w	800753e <__retarget_lock_release_recursive>
 800773e:	bf00      	nop
 8007740:	20001e88 	.word	0x20001e88

08007744 <__ssputs_r>:
 8007744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007748:	461f      	mov	r7, r3
 800774a:	688e      	ldr	r6, [r1, #8]
 800774c:	4682      	mov	sl, r0
 800774e:	42be      	cmp	r6, r7
 8007750:	460c      	mov	r4, r1
 8007752:	4690      	mov	r8, r2
 8007754:	680b      	ldr	r3, [r1, #0]
 8007756:	d82c      	bhi.n	80077b2 <__ssputs_r+0x6e>
 8007758:	898a      	ldrh	r2, [r1, #12]
 800775a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800775e:	d026      	beq.n	80077ae <__ssputs_r+0x6a>
 8007760:	6965      	ldr	r5, [r4, #20]
 8007762:	6909      	ldr	r1, [r1, #16]
 8007764:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007768:	eba3 0901 	sub.w	r9, r3, r1
 800776c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007770:	1c7b      	adds	r3, r7, #1
 8007772:	444b      	add	r3, r9
 8007774:	106d      	asrs	r5, r5, #1
 8007776:	429d      	cmp	r5, r3
 8007778:	bf38      	it	cc
 800777a:	461d      	movcc	r5, r3
 800777c:	0553      	lsls	r3, r2, #21
 800777e:	d527      	bpl.n	80077d0 <__ssputs_r+0x8c>
 8007780:	4629      	mov	r1, r5
 8007782:	f7ff ff53 	bl	800762c <_malloc_r>
 8007786:	4606      	mov	r6, r0
 8007788:	b360      	cbz	r0, 80077e4 <__ssputs_r+0xa0>
 800778a:	464a      	mov	r2, r9
 800778c:	6921      	ldr	r1, [r4, #16]
 800778e:	f7ff fed7 	bl	8007540 <memcpy>
 8007792:	89a3      	ldrh	r3, [r4, #12]
 8007794:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800779c:	81a3      	strh	r3, [r4, #12]
 800779e:	6126      	str	r6, [r4, #16]
 80077a0:	444e      	add	r6, r9
 80077a2:	6026      	str	r6, [r4, #0]
 80077a4:	463e      	mov	r6, r7
 80077a6:	6165      	str	r5, [r4, #20]
 80077a8:	eba5 0509 	sub.w	r5, r5, r9
 80077ac:	60a5      	str	r5, [r4, #8]
 80077ae:	42be      	cmp	r6, r7
 80077b0:	d900      	bls.n	80077b4 <__ssputs_r+0x70>
 80077b2:	463e      	mov	r6, r7
 80077b4:	4632      	mov	r2, r6
 80077b6:	4641      	mov	r1, r8
 80077b8:	6820      	ldr	r0, [r4, #0]
 80077ba:	f000 faaf 	bl	8007d1c <memmove>
 80077be:	2000      	movs	r0, #0
 80077c0:	68a3      	ldr	r3, [r4, #8]
 80077c2:	1b9b      	subs	r3, r3, r6
 80077c4:	60a3      	str	r3, [r4, #8]
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	4433      	add	r3, r6
 80077ca:	6023      	str	r3, [r4, #0]
 80077cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d0:	462a      	mov	r2, r5
 80077d2:	f000 fadb 	bl	8007d8c <_realloc_r>
 80077d6:	4606      	mov	r6, r0
 80077d8:	2800      	cmp	r0, #0
 80077da:	d1e0      	bne.n	800779e <__ssputs_r+0x5a>
 80077dc:	4650      	mov	r0, sl
 80077de:	6921      	ldr	r1, [r4, #16]
 80077e0:	f7ff febc 	bl	800755c <_free_r>
 80077e4:	230c      	movs	r3, #12
 80077e6:	f8ca 3000 	str.w	r3, [sl]
 80077ea:	89a3      	ldrh	r3, [r4, #12]
 80077ec:	f04f 30ff 	mov.w	r0, #4294967295
 80077f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077f4:	81a3      	strh	r3, [r4, #12]
 80077f6:	e7e9      	b.n	80077cc <__ssputs_r+0x88>

080077f8 <_svfiprintf_r>:
 80077f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fc:	4698      	mov	r8, r3
 80077fe:	898b      	ldrh	r3, [r1, #12]
 8007800:	4607      	mov	r7, r0
 8007802:	061b      	lsls	r3, r3, #24
 8007804:	460d      	mov	r5, r1
 8007806:	4614      	mov	r4, r2
 8007808:	b09d      	sub	sp, #116	; 0x74
 800780a:	d50e      	bpl.n	800782a <_svfiprintf_r+0x32>
 800780c:	690b      	ldr	r3, [r1, #16]
 800780e:	b963      	cbnz	r3, 800782a <_svfiprintf_r+0x32>
 8007810:	2140      	movs	r1, #64	; 0x40
 8007812:	f7ff ff0b 	bl	800762c <_malloc_r>
 8007816:	6028      	str	r0, [r5, #0]
 8007818:	6128      	str	r0, [r5, #16]
 800781a:	b920      	cbnz	r0, 8007826 <_svfiprintf_r+0x2e>
 800781c:	230c      	movs	r3, #12
 800781e:	603b      	str	r3, [r7, #0]
 8007820:	f04f 30ff 	mov.w	r0, #4294967295
 8007824:	e0d0      	b.n	80079c8 <_svfiprintf_r+0x1d0>
 8007826:	2340      	movs	r3, #64	; 0x40
 8007828:	616b      	str	r3, [r5, #20]
 800782a:	2300      	movs	r3, #0
 800782c:	9309      	str	r3, [sp, #36]	; 0x24
 800782e:	2320      	movs	r3, #32
 8007830:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007834:	2330      	movs	r3, #48	; 0x30
 8007836:	f04f 0901 	mov.w	r9, #1
 800783a:	f8cd 800c 	str.w	r8, [sp, #12]
 800783e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80079e0 <_svfiprintf_r+0x1e8>
 8007842:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007846:	4623      	mov	r3, r4
 8007848:	469a      	mov	sl, r3
 800784a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800784e:	b10a      	cbz	r2, 8007854 <_svfiprintf_r+0x5c>
 8007850:	2a25      	cmp	r2, #37	; 0x25
 8007852:	d1f9      	bne.n	8007848 <_svfiprintf_r+0x50>
 8007854:	ebba 0b04 	subs.w	fp, sl, r4
 8007858:	d00b      	beq.n	8007872 <_svfiprintf_r+0x7a>
 800785a:	465b      	mov	r3, fp
 800785c:	4622      	mov	r2, r4
 800785e:	4629      	mov	r1, r5
 8007860:	4638      	mov	r0, r7
 8007862:	f7ff ff6f 	bl	8007744 <__ssputs_r>
 8007866:	3001      	adds	r0, #1
 8007868:	f000 80a9 	beq.w	80079be <_svfiprintf_r+0x1c6>
 800786c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800786e:	445a      	add	r2, fp
 8007870:	9209      	str	r2, [sp, #36]	; 0x24
 8007872:	f89a 3000 	ldrb.w	r3, [sl]
 8007876:	2b00      	cmp	r3, #0
 8007878:	f000 80a1 	beq.w	80079be <_svfiprintf_r+0x1c6>
 800787c:	2300      	movs	r3, #0
 800787e:	f04f 32ff 	mov.w	r2, #4294967295
 8007882:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007886:	f10a 0a01 	add.w	sl, sl, #1
 800788a:	9304      	str	r3, [sp, #16]
 800788c:	9307      	str	r3, [sp, #28]
 800788e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007892:	931a      	str	r3, [sp, #104]	; 0x68
 8007894:	4654      	mov	r4, sl
 8007896:	2205      	movs	r2, #5
 8007898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800789c:	4850      	ldr	r0, [pc, #320]	; (80079e0 <_svfiprintf_r+0x1e8>)
 800789e:	f000 fa67 	bl	8007d70 <memchr>
 80078a2:	9a04      	ldr	r2, [sp, #16]
 80078a4:	b9d8      	cbnz	r0, 80078de <_svfiprintf_r+0xe6>
 80078a6:	06d0      	lsls	r0, r2, #27
 80078a8:	bf44      	itt	mi
 80078aa:	2320      	movmi	r3, #32
 80078ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078b0:	0711      	lsls	r1, r2, #28
 80078b2:	bf44      	itt	mi
 80078b4:	232b      	movmi	r3, #43	; 0x2b
 80078b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078ba:	f89a 3000 	ldrb.w	r3, [sl]
 80078be:	2b2a      	cmp	r3, #42	; 0x2a
 80078c0:	d015      	beq.n	80078ee <_svfiprintf_r+0xf6>
 80078c2:	4654      	mov	r4, sl
 80078c4:	2000      	movs	r0, #0
 80078c6:	f04f 0c0a 	mov.w	ip, #10
 80078ca:	9a07      	ldr	r2, [sp, #28]
 80078cc:	4621      	mov	r1, r4
 80078ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078d2:	3b30      	subs	r3, #48	; 0x30
 80078d4:	2b09      	cmp	r3, #9
 80078d6:	d94d      	bls.n	8007974 <_svfiprintf_r+0x17c>
 80078d8:	b1b0      	cbz	r0, 8007908 <_svfiprintf_r+0x110>
 80078da:	9207      	str	r2, [sp, #28]
 80078dc:	e014      	b.n	8007908 <_svfiprintf_r+0x110>
 80078de:	eba0 0308 	sub.w	r3, r0, r8
 80078e2:	fa09 f303 	lsl.w	r3, r9, r3
 80078e6:	4313      	orrs	r3, r2
 80078e8:	46a2      	mov	sl, r4
 80078ea:	9304      	str	r3, [sp, #16]
 80078ec:	e7d2      	b.n	8007894 <_svfiprintf_r+0x9c>
 80078ee:	9b03      	ldr	r3, [sp, #12]
 80078f0:	1d19      	adds	r1, r3, #4
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	9103      	str	r1, [sp, #12]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	bfbb      	ittet	lt
 80078fa:	425b      	neglt	r3, r3
 80078fc:	f042 0202 	orrlt.w	r2, r2, #2
 8007900:	9307      	strge	r3, [sp, #28]
 8007902:	9307      	strlt	r3, [sp, #28]
 8007904:	bfb8      	it	lt
 8007906:	9204      	strlt	r2, [sp, #16]
 8007908:	7823      	ldrb	r3, [r4, #0]
 800790a:	2b2e      	cmp	r3, #46	; 0x2e
 800790c:	d10c      	bne.n	8007928 <_svfiprintf_r+0x130>
 800790e:	7863      	ldrb	r3, [r4, #1]
 8007910:	2b2a      	cmp	r3, #42	; 0x2a
 8007912:	d134      	bne.n	800797e <_svfiprintf_r+0x186>
 8007914:	9b03      	ldr	r3, [sp, #12]
 8007916:	3402      	adds	r4, #2
 8007918:	1d1a      	adds	r2, r3, #4
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	9203      	str	r2, [sp, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	bfb8      	it	lt
 8007922:	f04f 33ff 	movlt.w	r3, #4294967295
 8007926:	9305      	str	r3, [sp, #20]
 8007928:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80079e4 <_svfiprintf_r+0x1ec>
 800792c:	2203      	movs	r2, #3
 800792e:	4650      	mov	r0, sl
 8007930:	7821      	ldrb	r1, [r4, #0]
 8007932:	f000 fa1d 	bl	8007d70 <memchr>
 8007936:	b138      	cbz	r0, 8007948 <_svfiprintf_r+0x150>
 8007938:	2240      	movs	r2, #64	; 0x40
 800793a:	9b04      	ldr	r3, [sp, #16]
 800793c:	eba0 000a 	sub.w	r0, r0, sl
 8007940:	4082      	lsls	r2, r0
 8007942:	4313      	orrs	r3, r2
 8007944:	3401      	adds	r4, #1
 8007946:	9304      	str	r3, [sp, #16]
 8007948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800794c:	2206      	movs	r2, #6
 800794e:	4826      	ldr	r0, [pc, #152]	; (80079e8 <_svfiprintf_r+0x1f0>)
 8007950:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007954:	f000 fa0c 	bl	8007d70 <memchr>
 8007958:	2800      	cmp	r0, #0
 800795a:	d038      	beq.n	80079ce <_svfiprintf_r+0x1d6>
 800795c:	4b23      	ldr	r3, [pc, #140]	; (80079ec <_svfiprintf_r+0x1f4>)
 800795e:	bb1b      	cbnz	r3, 80079a8 <_svfiprintf_r+0x1b0>
 8007960:	9b03      	ldr	r3, [sp, #12]
 8007962:	3307      	adds	r3, #7
 8007964:	f023 0307 	bic.w	r3, r3, #7
 8007968:	3308      	adds	r3, #8
 800796a:	9303      	str	r3, [sp, #12]
 800796c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800796e:	4433      	add	r3, r6
 8007970:	9309      	str	r3, [sp, #36]	; 0x24
 8007972:	e768      	b.n	8007846 <_svfiprintf_r+0x4e>
 8007974:	460c      	mov	r4, r1
 8007976:	2001      	movs	r0, #1
 8007978:	fb0c 3202 	mla	r2, ip, r2, r3
 800797c:	e7a6      	b.n	80078cc <_svfiprintf_r+0xd4>
 800797e:	2300      	movs	r3, #0
 8007980:	f04f 0c0a 	mov.w	ip, #10
 8007984:	4619      	mov	r1, r3
 8007986:	3401      	adds	r4, #1
 8007988:	9305      	str	r3, [sp, #20]
 800798a:	4620      	mov	r0, r4
 800798c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007990:	3a30      	subs	r2, #48	; 0x30
 8007992:	2a09      	cmp	r2, #9
 8007994:	d903      	bls.n	800799e <_svfiprintf_r+0x1a6>
 8007996:	2b00      	cmp	r3, #0
 8007998:	d0c6      	beq.n	8007928 <_svfiprintf_r+0x130>
 800799a:	9105      	str	r1, [sp, #20]
 800799c:	e7c4      	b.n	8007928 <_svfiprintf_r+0x130>
 800799e:	4604      	mov	r4, r0
 80079a0:	2301      	movs	r3, #1
 80079a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80079a6:	e7f0      	b.n	800798a <_svfiprintf_r+0x192>
 80079a8:	ab03      	add	r3, sp, #12
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	462a      	mov	r2, r5
 80079ae:	4638      	mov	r0, r7
 80079b0:	4b0f      	ldr	r3, [pc, #60]	; (80079f0 <_svfiprintf_r+0x1f8>)
 80079b2:	a904      	add	r1, sp, #16
 80079b4:	f3af 8000 	nop.w
 80079b8:	1c42      	adds	r2, r0, #1
 80079ba:	4606      	mov	r6, r0
 80079bc:	d1d6      	bne.n	800796c <_svfiprintf_r+0x174>
 80079be:	89ab      	ldrh	r3, [r5, #12]
 80079c0:	065b      	lsls	r3, r3, #25
 80079c2:	f53f af2d 	bmi.w	8007820 <_svfiprintf_r+0x28>
 80079c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079c8:	b01d      	add	sp, #116	; 0x74
 80079ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ce:	ab03      	add	r3, sp, #12
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	462a      	mov	r2, r5
 80079d4:	4638      	mov	r0, r7
 80079d6:	4b06      	ldr	r3, [pc, #24]	; (80079f0 <_svfiprintf_r+0x1f8>)
 80079d8:	a904      	add	r1, sp, #16
 80079da:	f000 f87d 	bl	8007ad8 <_printf_i>
 80079de:	e7eb      	b.n	80079b8 <_svfiprintf_r+0x1c0>
 80079e0:	08007ee6 	.word	0x08007ee6
 80079e4:	08007eec 	.word	0x08007eec
 80079e8:	08007ef0 	.word	0x08007ef0
 80079ec:	00000000 	.word	0x00000000
 80079f0:	08007745 	.word	0x08007745

080079f4 <_printf_common>:
 80079f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079f8:	4616      	mov	r6, r2
 80079fa:	4699      	mov	r9, r3
 80079fc:	688a      	ldr	r2, [r1, #8]
 80079fe:	690b      	ldr	r3, [r1, #16]
 8007a00:	4607      	mov	r7, r0
 8007a02:	4293      	cmp	r3, r2
 8007a04:	bfb8      	it	lt
 8007a06:	4613      	movlt	r3, r2
 8007a08:	6033      	str	r3, [r6, #0]
 8007a0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a0e:	460c      	mov	r4, r1
 8007a10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a14:	b10a      	cbz	r2, 8007a1a <_printf_common+0x26>
 8007a16:	3301      	adds	r3, #1
 8007a18:	6033      	str	r3, [r6, #0]
 8007a1a:	6823      	ldr	r3, [r4, #0]
 8007a1c:	0699      	lsls	r1, r3, #26
 8007a1e:	bf42      	ittt	mi
 8007a20:	6833      	ldrmi	r3, [r6, #0]
 8007a22:	3302      	addmi	r3, #2
 8007a24:	6033      	strmi	r3, [r6, #0]
 8007a26:	6825      	ldr	r5, [r4, #0]
 8007a28:	f015 0506 	ands.w	r5, r5, #6
 8007a2c:	d106      	bne.n	8007a3c <_printf_common+0x48>
 8007a2e:	f104 0a19 	add.w	sl, r4, #25
 8007a32:	68e3      	ldr	r3, [r4, #12]
 8007a34:	6832      	ldr	r2, [r6, #0]
 8007a36:	1a9b      	subs	r3, r3, r2
 8007a38:	42ab      	cmp	r3, r5
 8007a3a:	dc2b      	bgt.n	8007a94 <_printf_common+0xa0>
 8007a3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a40:	1e13      	subs	r3, r2, #0
 8007a42:	6822      	ldr	r2, [r4, #0]
 8007a44:	bf18      	it	ne
 8007a46:	2301      	movne	r3, #1
 8007a48:	0692      	lsls	r2, r2, #26
 8007a4a:	d430      	bmi.n	8007aae <_printf_common+0xba>
 8007a4c:	4649      	mov	r1, r9
 8007a4e:	4638      	mov	r0, r7
 8007a50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a54:	47c0      	blx	r8
 8007a56:	3001      	adds	r0, #1
 8007a58:	d023      	beq.n	8007aa2 <_printf_common+0xae>
 8007a5a:	6823      	ldr	r3, [r4, #0]
 8007a5c:	6922      	ldr	r2, [r4, #16]
 8007a5e:	f003 0306 	and.w	r3, r3, #6
 8007a62:	2b04      	cmp	r3, #4
 8007a64:	bf14      	ite	ne
 8007a66:	2500      	movne	r5, #0
 8007a68:	6833      	ldreq	r3, [r6, #0]
 8007a6a:	f04f 0600 	mov.w	r6, #0
 8007a6e:	bf08      	it	eq
 8007a70:	68e5      	ldreq	r5, [r4, #12]
 8007a72:	f104 041a 	add.w	r4, r4, #26
 8007a76:	bf08      	it	eq
 8007a78:	1aed      	subeq	r5, r5, r3
 8007a7a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007a7e:	bf08      	it	eq
 8007a80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a84:	4293      	cmp	r3, r2
 8007a86:	bfc4      	itt	gt
 8007a88:	1a9b      	subgt	r3, r3, r2
 8007a8a:	18ed      	addgt	r5, r5, r3
 8007a8c:	42b5      	cmp	r5, r6
 8007a8e:	d11a      	bne.n	8007ac6 <_printf_common+0xd2>
 8007a90:	2000      	movs	r0, #0
 8007a92:	e008      	b.n	8007aa6 <_printf_common+0xb2>
 8007a94:	2301      	movs	r3, #1
 8007a96:	4652      	mov	r2, sl
 8007a98:	4649      	mov	r1, r9
 8007a9a:	4638      	mov	r0, r7
 8007a9c:	47c0      	blx	r8
 8007a9e:	3001      	adds	r0, #1
 8007aa0:	d103      	bne.n	8007aaa <_printf_common+0xb6>
 8007aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aaa:	3501      	adds	r5, #1
 8007aac:	e7c1      	b.n	8007a32 <_printf_common+0x3e>
 8007aae:	2030      	movs	r0, #48	; 0x30
 8007ab0:	18e1      	adds	r1, r4, r3
 8007ab2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ab6:	1c5a      	adds	r2, r3, #1
 8007ab8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007abc:	4422      	add	r2, r4
 8007abe:	3302      	adds	r3, #2
 8007ac0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ac4:	e7c2      	b.n	8007a4c <_printf_common+0x58>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	4622      	mov	r2, r4
 8007aca:	4649      	mov	r1, r9
 8007acc:	4638      	mov	r0, r7
 8007ace:	47c0      	blx	r8
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	d0e6      	beq.n	8007aa2 <_printf_common+0xae>
 8007ad4:	3601      	adds	r6, #1
 8007ad6:	e7d9      	b.n	8007a8c <_printf_common+0x98>

08007ad8 <_printf_i>:
 8007ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007adc:	7e0f      	ldrb	r7, [r1, #24]
 8007ade:	4691      	mov	r9, r2
 8007ae0:	2f78      	cmp	r7, #120	; 0x78
 8007ae2:	4680      	mov	r8, r0
 8007ae4:	460c      	mov	r4, r1
 8007ae6:	469a      	mov	sl, r3
 8007ae8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007aea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007aee:	d807      	bhi.n	8007b00 <_printf_i+0x28>
 8007af0:	2f62      	cmp	r7, #98	; 0x62
 8007af2:	d80a      	bhi.n	8007b0a <_printf_i+0x32>
 8007af4:	2f00      	cmp	r7, #0
 8007af6:	f000 80d5 	beq.w	8007ca4 <_printf_i+0x1cc>
 8007afa:	2f58      	cmp	r7, #88	; 0x58
 8007afc:	f000 80c1 	beq.w	8007c82 <_printf_i+0x1aa>
 8007b00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b08:	e03a      	b.n	8007b80 <_printf_i+0xa8>
 8007b0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b0e:	2b15      	cmp	r3, #21
 8007b10:	d8f6      	bhi.n	8007b00 <_printf_i+0x28>
 8007b12:	a101      	add	r1, pc, #4	; (adr r1, 8007b18 <_printf_i+0x40>)
 8007b14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b18:	08007b71 	.word	0x08007b71
 8007b1c:	08007b85 	.word	0x08007b85
 8007b20:	08007b01 	.word	0x08007b01
 8007b24:	08007b01 	.word	0x08007b01
 8007b28:	08007b01 	.word	0x08007b01
 8007b2c:	08007b01 	.word	0x08007b01
 8007b30:	08007b85 	.word	0x08007b85
 8007b34:	08007b01 	.word	0x08007b01
 8007b38:	08007b01 	.word	0x08007b01
 8007b3c:	08007b01 	.word	0x08007b01
 8007b40:	08007b01 	.word	0x08007b01
 8007b44:	08007c8b 	.word	0x08007c8b
 8007b48:	08007bb1 	.word	0x08007bb1
 8007b4c:	08007c45 	.word	0x08007c45
 8007b50:	08007b01 	.word	0x08007b01
 8007b54:	08007b01 	.word	0x08007b01
 8007b58:	08007cad 	.word	0x08007cad
 8007b5c:	08007b01 	.word	0x08007b01
 8007b60:	08007bb1 	.word	0x08007bb1
 8007b64:	08007b01 	.word	0x08007b01
 8007b68:	08007b01 	.word	0x08007b01
 8007b6c:	08007c4d 	.word	0x08007c4d
 8007b70:	682b      	ldr	r3, [r5, #0]
 8007b72:	1d1a      	adds	r2, r3, #4
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	602a      	str	r2, [r5, #0]
 8007b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b80:	2301      	movs	r3, #1
 8007b82:	e0a0      	b.n	8007cc6 <_printf_i+0x1ee>
 8007b84:	6820      	ldr	r0, [r4, #0]
 8007b86:	682b      	ldr	r3, [r5, #0]
 8007b88:	0607      	lsls	r7, r0, #24
 8007b8a:	f103 0104 	add.w	r1, r3, #4
 8007b8e:	6029      	str	r1, [r5, #0]
 8007b90:	d501      	bpl.n	8007b96 <_printf_i+0xbe>
 8007b92:	681e      	ldr	r6, [r3, #0]
 8007b94:	e003      	b.n	8007b9e <_printf_i+0xc6>
 8007b96:	0646      	lsls	r6, r0, #25
 8007b98:	d5fb      	bpl.n	8007b92 <_printf_i+0xba>
 8007b9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007b9e:	2e00      	cmp	r6, #0
 8007ba0:	da03      	bge.n	8007baa <_printf_i+0xd2>
 8007ba2:	232d      	movs	r3, #45	; 0x2d
 8007ba4:	4276      	negs	r6, r6
 8007ba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007baa:	230a      	movs	r3, #10
 8007bac:	4859      	ldr	r0, [pc, #356]	; (8007d14 <_printf_i+0x23c>)
 8007bae:	e012      	b.n	8007bd6 <_printf_i+0xfe>
 8007bb0:	682b      	ldr	r3, [r5, #0]
 8007bb2:	6820      	ldr	r0, [r4, #0]
 8007bb4:	1d19      	adds	r1, r3, #4
 8007bb6:	6029      	str	r1, [r5, #0]
 8007bb8:	0605      	lsls	r5, r0, #24
 8007bba:	d501      	bpl.n	8007bc0 <_printf_i+0xe8>
 8007bbc:	681e      	ldr	r6, [r3, #0]
 8007bbe:	e002      	b.n	8007bc6 <_printf_i+0xee>
 8007bc0:	0641      	lsls	r1, r0, #25
 8007bc2:	d5fb      	bpl.n	8007bbc <_printf_i+0xe4>
 8007bc4:	881e      	ldrh	r6, [r3, #0]
 8007bc6:	2f6f      	cmp	r7, #111	; 0x6f
 8007bc8:	bf0c      	ite	eq
 8007bca:	2308      	moveq	r3, #8
 8007bcc:	230a      	movne	r3, #10
 8007bce:	4851      	ldr	r0, [pc, #324]	; (8007d14 <_printf_i+0x23c>)
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bd6:	6865      	ldr	r5, [r4, #4]
 8007bd8:	2d00      	cmp	r5, #0
 8007bda:	bfa8      	it	ge
 8007bdc:	6821      	ldrge	r1, [r4, #0]
 8007bde:	60a5      	str	r5, [r4, #8]
 8007be0:	bfa4      	itt	ge
 8007be2:	f021 0104 	bicge.w	r1, r1, #4
 8007be6:	6021      	strge	r1, [r4, #0]
 8007be8:	b90e      	cbnz	r6, 8007bee <_printf_i+0x116>
 8007bea:	2d00      	cmp	r5, #0
 8007bec:	d04b      	beq.n	8007c86 <_printf_i+0x1ae>
 8007bee:	4615      	mov	r5, r2
 8007bf0:	fbb6 f1f3 	udiv	r1, r6, r3
 8007bf4:	fb03 6711 	mls	r7, r3, r1, r6
 8007bf8:	5dc7      	ldrb	r7, [r0, r7]
 8007bfa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007bfe:	4637      	mov	r7, r6
 8007c00:	42bb      	cmp	r3, r7
 8007c02:	460e      	mov	r6, r1
 8007c04:	d9f4      	bls.n	8007bf0 <_printf_i+0x118>
 8007c06:	2b08      	cmp	r3, #8
 8007c08:	d10b      	bne.n	8007c22 <_printf_i+0x14a>
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	07de      	lsls	r6, r3, #31
 8007c0e:	d508      	bpl.n	8007c22 <_printf_i+0x14a>
 8007c10:	6923      	ldr	r3, [r4, #16]
 8007c12:	6861      	ldr	r1, [r4, #4]
 8007c14:	4299      	cmp	r1, r3
 8007c16:	bfde      	ittt	le
 8007c18:	2330      	movle	r3, #48	; 0x30
 8007c1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c22:	1b52      	subs	r2, r2, r5
 8007c24:	6122      	str	r2, [r4, #16]
 8007c26:	464b      	mov	r3, r9
 8007c28:	4621      	mov	r1, r4
 8007c2a:	4640      	mov	r0, r8
 8007c2c:	f8cd a000 	str.w	sl, [sp]
 8007c30:	aa03      	add	r2, sp, #12
 8007c32:	f7ff fedf 	bl	80079f4 <_printf_common>
 8007c36:	3001      	adds	r0, #1
 8007c38:	d14a      	bne.n	8007cd0 <_printf_i+0x1f8>
 8007c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3e:	b004      	add	sp, #16
 8007c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	f043 0320 	orr.w	r3, r3, #32
 8007c4a:	6023      	str	r3, [r4, #0]
 8007c4c:	2778      	movs	r7, #120	; 0x78
 8007c4e:	4832      	ldr	r0, [pc, #200]	; (8007d18 <_printf_i+0x240>)
 8007c50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	6829      	ldr	r1, [r5, #0]
 8007c58:	061f      	lsls	r7, r3, #24
 8007c5a:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c5e:	d402      	bmi.n	8007c66 <_printf_i+0x18e>
 8007c60:	065f      	lsls	r7, r3, #25
 8007c62:	bf48      	it	mi
 8007c64:	b2b6      	uxthmi	r6, r6
 8007c66:	07df      	lsls	r7, r3, #31
 8007c68:	bf48      	it	mi
 8007c6a:	f043 0320 	orrmi.w	r3, r3, #32
 8007c6e:	6029      	str	r1, [r5, #0]
 8007c70:	bf48      	it	mi
 8007c72:	6023      	strmi	r3, [r4, #0]
 8007c74:	b91e      	cbnz	r6, 8007c7e <_printf_i+0x1a6>
 8007c76:	6823      	ldr	r3, [r4, #0]
 8007c78:	f023 0320 	bic.w	r3, r3, #32
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	2310      	movs	r3, #16
 8007c80:	e7a6      	b.n	8007bd0 <_printf_i+0xf8>
 8007c82:	4824      	ldr	r0, [pc, #144]	; (8007d14 <_printf_i+0x23c>)
 8007c84:	e7e4      	b.n	8007c50 <_printf_i+0x178>
 8007c86:	4615      	mov	r5, r2
 8007c88:	e7bd      	b.n	8007c06 <_printf_i+0x12e>
 8007c8a:	682b      	ldr	r3, [r5, #0]
 8007c8c:	6826      	ldr	r6, [r4, #0]
 8007c8e:	1d18      	adds	r0, r3, #4
 8007c90:	6961      	ldr	r1, [r4, #20]
 8007c92:	6028      	str	r0, [r5, #0]
 8007c94:	0635      	lsls	r5, r6, #24
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	d501      	bpl.n	8007c9e <_printf_i+0x1c6>
 8007c9a:	6019      	str	r1, [r3, #0]
 8007c9c:	e002      	b.n	8007ca4 <_printf_i+0x1cc>
 8007c9e:	0670      	lsls	r0, r6, #25
 8007ca0:	d5fb      	bpl.n	8007c9a <_printf_i+0x1c2>
 8007ca2:	8019      	strh	r1, [r3, #0]
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	4615      	mov	r5, r2
 8007ca8:	6123      	str	r3, [r4, #16]
 8007caa:	e7bc      	b.n	8007c26 <_printf_i+0x14e>
 8007cac:	682b      	ldr	r3, [r5, #0]
 8007cae:	2100      	movs	r1, #0
 8007cb0:	1d1a      	adds	r2, r3, #4
 8007cb2:	602a      	str	r2, [r5, #0]
 8007cb4:	681d      	ldr	r5, [r3, #0]
 8007cb6:	6862      	ldr	r2, [r4, #4]
 8007cb8:	4628      	mov	r0, r5
 8007cba:	f000 f859 	bl	8007d70 <memchr>
 8007cbe:	b108      	cbz	r0, 8007cc4 <_printf_i+0x1ec>
 8007cc0:	1b40      	subs	r0, r0, r5
 8007cc2:	6060      	str	r0, [r4, #4]
 8007cc4:	6863      	ldr	r3, [r4, #4]
 8007cc6:	6123      	str	r3, [r4, #16]
 8007cc8:	2300      	movs	r3, #0
 8007cca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cce:	e7aa      	b.n	8007c26 <_printf_i+0x14e>
 8007cd0:	462a      	mov	r2, r5
 8007cd2:	4649      	mov	r1, r9
 8007cd4:	4640      	mov	r0, r8
 8007cd6:	6923      	ldr	r3, [r4, #16]
 8007cd8:	47d0      	blx	sl
 8007cda:	3001      	adds	r0, #1
 8007cdc:	d0ad      	beq.n	8007c3a <_printf_i+0x162>
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	079b      	lsls	r3, r3, #30
 8007ce2:	d413      	bmi.n	8007d0c <_printf_i+0x234>
 8007ce4:	68e0      	ldr	r0, [r4, #12]
 8007ce6:	9b03      	ldr	r3, [sp, #12]
 8007ce8:	4298      	cmp	r0, r3
 8007cea:	bfb8      	it	lt
 8007cec:	4618      	movlt	r0, r3
 8007cee:	e7a6      	b.n	8007c3e <_printf_i+0x166>
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	4632      	mov	r2, r6
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	4640      	mov	r0, r8
 8007cf8:	47d0      	blx	sl
 8007cfa:	3001      	adds	r0, #1
 8007cfc:	d09d      	beq.n	8007c3a <_printf_i+0x162>
 8007cfe:	3501      	adds	r5, #1
 8007d00:	68e3      	ldr	r3, [r4, #12]
 8007d02:	9903      	ldr	r1, [sp, #12]
 8007d04:	1a5b      	subs	r3, r3, r1
 8007d06:	42ab      	cmp	r3, r5
 8007d08:	dcf2      	bgt.n	8007cf0 <_printf_i+0x218>
 8007d0a:	e7eb      	b.n	8007ce4 <_printf_i+0x20c>
 8007d0c:	2500      	movs	r5, #0
 8007d0e:	f104 0619 	add.w	r6, r4, #25
 8007d12:	e7f5      	b.n	8007d00 <_printf_i+0x228>
 8007d14:	08007ef7 	.word	0x08007ef7
 8007d18:	08007f08 	.word	0x08007f08

08007d1c <memmove>:
 8007d1c:	4288      	cmp	r0, r1
 8007d1e:	b510      	push	{r4, lr}
 8007d20:	eb01 0402 	add.w	r4, r1, r2
 8007d24:	d902      	bls.n	8007d2c <memmove+0x10>
 8007d26:	4284      	cmp	r4, r0
 8007d28:	4623      	mov	r3, r4
 8007d2a:	d807      	bhi.n	8007d3c <memmove+0x20>
 8007d2c:	1e43      	subs	r3, r0, #1
 8007d2e:	42a1      	cmp	r1, r4
 8007d30:	d008      	beq.n	8007d44 <memmove+0x28>
 8007d32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d3a:	e7f8      	b.n	8007d2e <memmove+0x12>
 8007d3c:	4601      	mov	r1, r0
 8007d3e:	4402      	add	r2, r0
 8007d40:	428a      	cmp	r2, r1
 8007d42:	d100      	bne.n	8007d46 <memmove+0x2a>
 8007d44:	bd10      	pop	{r4, pc}
 8007d46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d4e:	e7f7      	b.n	8007d40 <memmove+0x24>

08007d50 <_sbrk_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	2300      	movs	r3, #0
 8007d54:	4d05      	ldr	r5, [pc, #20]	; (8007d6c <_sbrk_r+0x1c>)
 8007d56:	4604      	mov	r4, r0
 8007d58:	4608      	mov	r0, r1
 8007d5a:	602b      	str	r3, [r5, #0]
 8007d5c:	f7f9 ff4e 	bl	8001bfc <_sbrk>
 8007d60:	1c43      	adds	r3, r0, #1
 8007d62:	d102      	bne.n	8007d6a <_sbrk_r+0x1a>
 8007d64:	682b      	ldr	r3, [r5, #0]
 8007d66:	b103      	cbz	r3, 8007d6a <_sbrk_r+0x1a>
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	bd38      	pop	{r3, r4, r5, pc}
 8007d6c:	20001e84 	.word	0x20001e84

08007d70 <memchr>:
 8007d70:	4603      	mov	r3, r0
 8007d72:	b510      	push	{r4, lr}
 8007d74:	b2c9      	uxtb	r1, r1
 8007d76:	4402      	add	r2, r0
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	d101      	bne.n	8007d82 <memchr+0x12>
 8007d7e:	2000      	movs	r0, #0
 8007d80:	e003      	b.n	8007d8a <memchr+0x1a>
 8007d82:	7804      	ldrb	r4, [r0, #0]
 8007d84:	3301      	adds	r3, #1
 8007d86:	428c      	cmp	r4, r1
 8007d88:	d1f6      	bne.n	8007d78 <memchr+0x8>
 8007d8a:	bd10      	pop	{r4, pc}

08007d8c <_realloc_r>:
 8007d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d90:	4680      	mov	r8, r0
 8007d92:	4614      	mov	r4, r2
 8007d94:	460e      	mov	r6, r1
 8007d96:	b921      	cbnz	r1, 8007da2 <_realloc_r+0x16>
 8007d98:	4611      	mov	r1, r2
 8007d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d9e:	f7ff bc45 	b.w	800762c <_malloc_r>
 8007da2:	b92a      	cbnz	r2, 8007db0 <_realloc_r+0x24>
 8007da4:	f7ff fbda 	bl	800755c <_free_r>
 8007da8:	4625      	mov	r5, r4
 8007daa:	4628      	mov	r0, r5
 8007dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007db0:	f000 f81b 	bl	8007dea <_malloc_usable_size_r>
 8007db4:	4284      	cmp	r4, r0
 8007db6:	4607      	mov	r7, r0
 8007db8:	d802      	bhi.n	8007dc0 <_realloc_r+0x34>
 8007dba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007dbe:	d812      	bhi.n	8007de6 <_realloc_r+0x5a>
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	f7ff fc32 	bl	800762c <_malloc_r>
 8007dc8:	4605      	mov	r5, r0
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	d0ed      	beq.n	8007daa <_realloc_r+0x1e>
 8007dce:	42bc      	cmp	r4, r7
 8007dd0:	4622      	mov	r2, r4
 8007dd2:	4631      	mov	r1, r6
 8007dd4:	bf28      	it	cs
 8007dd6:	463a      	movcs	r2, r7
 8007dd8:	f7ff fbb2 	bl	8007540 <memcpy>
 8007ddc:	4631      	mov	r1, r6
 8007dde:	4640      	mov	r0, r8
 8007de0:	f7ff fbbc 	bl	800755c <_free_r>
 8007de4:	e7e1      	b.n	8007daa <_realloc_r+0x1e>
 8007de6:	4635      	mov	r5, r6
 8007de8:	e7df      	b.n	8007daa <_realloc_r+0x1e>

08007dea <_malloc_usable_size_r>:
 8007dea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dee:	1f18      	subs	r0, r3, #4
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	bfbc      	itt	lt
 8007df4:	580b      	ldrlt	r3, [r1, r0]
 8007df6:	18c0      	addlt	r0, r0, r3
 8007df8:	4770      	bx	lr
	...

08007dfc <_init>:
 8007dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dfe:	bf00      	nop
 8007e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e02:	bc08      	pop	{r3}
 8007e04:	469e      	mov	lr, r3
 8007e06:	4770      	bx	lr

08007e08 <_fini>:
 8007e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e0a:	bf00      	nop
 8007e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e0e:	bc08      	pop	{r3}
 8007e10:	469e      	mov	lr, r3
 8007e12:	4770      	bx	lr
